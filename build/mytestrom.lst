                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13049 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module mytestrom
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _PrintChar
                                     12 	.globl _PlotOneColumnTileAndMask
                                     13 	.globl _PlotOneColumnTile
                                     14 	.globl _main
                                     15 	.globl _v
                                     16 	.globl _x
                                     17 	.globl _y
                                     18 	.globl _u
                                     19 	.globl _object
                                     20 	.globl _RG18SA
                                     21 	.globl _RG17SA
                                     22 	.globl _RG16SA
                                     23 	.globl _RG15SA
                                     24 	.globl _RG14SA
                                     25 	.globl _RG13SA
                                     26 	.globl _RG12SA
                                     27 	.globl _RG11SA
                                     28 	.globl _RG10SA
                                     29 	.globl _RG9SAV
                                     30 	.globl _RG8SAV
                                     31 	.globl _RG1SAV
                                     32 	.globl _RG0SAV
                                     33 	.globl _LevelMap
                                     34 	.globl _cursat
                                     35 	.globl _OldIsr
                                     36 	.globl _page
                                     37 	.globl _newx
                                     38 	.globl _WLevelDY
                                     39 	.globl _WLevelDX
                                     40 	.globl _LevelH
                                     41 	.globl _LevelW
                                     42 	.globl _WLevely
                                     43 	.globl _WLevelx
                                     44 	.globl _ScrollRight
                                     45 	.globl _ScrollLeft
                                     46 	.globl _BorderLinesL
                                     47 	.globl _BorderLinesR
                                     48 	.globl _NewLine
                                     49 	.globl _PatchPlotOneTile
                                     50 	.globl _myVDPwrite
                                     51 	.globl _myfVDP
                                     52 	.globl _mySetAdjust
                                     53 	.globl _myFT_wait
                                     54 	.globl _WaitLineInt
                                     55 	.globl _FT_errorHandler
                                     56 	.globl _MyLoadMap
                                     57 	.globl _myISR
                                     58 	.globl _myInstISR
                                     59 	.globl _myISRrestore
                                     60 	.globl _myCheckkbd
                                     61 	.globl _ObjectsInit
                                     62 	.globl _ObjectstoVRAM
                                     63 	.globl _UpdateColor
                                     64 	.globl _UpdateFrame
                                     65 	.globl _SprtInit
                                     66 	.globl _VramWrite
                                     67 	.globl _SetVramW
                                     68 	.globl _chgmod
                                     69 	.globl _putch
                                     70 	.globl _myHMMV
                                     71 	.globl _SetDisplayPage
                                     72 	.globl _VDPlineSwitch
                                     73 	.globl _VDP60Hz
                                     74 	.globl _Print
                                     75 	.globl _myVDPready
                                     76 	.globl _sprite_patterns
                                     77 	.globl _sprite_colors
                                     78 	.globl _DataLevelMap
                                     79 ;--------------------------------------------------------
                                     80 ; special function registers
                                     81 ;--------------------------------------------------------
                                     82 ;--------------------------------------------------------
                                     83 ; ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area _DATA
      000000                         86 _MyCommand:
      000000                         87 	.ds 15
      00000F                         88 _MyBorder:
      00000F                         89 	.ds 15
      00001E                         90 _WLevelx::
      00001E                         91 	.ds 2
      000020                         92 _WLevely::
      000020                         93 	.ds 1
      000021                         94 _LevelW::
      000021                         95 	.ds 1
      000022                         96 _LevelH::
      000022                         97 	.ds 1
      000023                         98 _WLevelDX::
      000023                         99 	.ds 2
      000025                        100 _WLevelDY::
      000025                        101 	.ds 2
      000027                        102 _newx::
      000027                        103 	.ds 1
      000028                        104 _page::
      000028                        105 	.ds 1
      000029                        106 _OldIsr::
      000029                        107 	.ds 3
      00002C                        108 _cursat::
      00002C                        109 	.ds 1
      00002D                        110 _LevelMap::
      00002D                        111 	.ds 2816
      000B2D                        112 _p:
      000B2D                        113 	.ds 2
                           00F3DF   114 _RG0SAV	=	0xf3df
                           00F3E0   115 _RG1SAV	=	0xf3e0
                           00FFE7   116 _RG8SAV	=	0xffe7
                           00FFE8   117 _RG9SAV	=	0xffe8
                           00FFE9   118 _RG10SA	=	0xffe9
                           00FFEA   119 _RG11SA	=	0xffea
                           00FFEB   120 _RG12SA	=	0xffeb
                           00FFEC   121 _RG13SA	=	0xffec
                           00FFED   122 _RG14SA	=	0xffed
                           00FFEE   123 _RG15SA	=	0xffee
                           00FFEF   124 _RG16SA	=	0xffef
                           00FFF0   125 _RG17SA	=	0xfff0
                           00FFF1   126 _RG18SA	=	0xfff1
      000B2F                        127 _object::
      000B2F                        128 	.ds 56
      000B67                        129 _u::
      000B67                        130 	.ds 2
      000B69                        131 _y::
      000B69                        132 	.ds 1
      000B6A                        133 _x::
      000B6A                        134 	.ds 1
      000B6B                        135 _v::
      000B6B                        136 	.ds 1
                                    137 ;--------------------------------------------------------
                                    138 ; ram data
                                    139 ;--------------------------------------------------------
                                    140 	.area _INITIALIZED
                                    141 ;--------------------------------------------------------
                                    142 ; absolute external ram data
                                    143 ;--------------------------------------------------------
                                    144 	.area _DABS (ABS)
                                    145 ;--------------------------------------------------------
                                    146 ; global & static initialisations
                                    147 ;--------------------------------------------------------
                                    148 	.area _HOME
                                    149 	.area _GSINIT
                                    150 	.area _GSFINAL
                                    151 	.area _GSINIT
                                    152 ;--------------------------------------------------------
                                    153 ; Home
                                    154 ;--------------------------------------------------------
                                    155 	.area _HOME
                                    156 	.area _HOME
                                    157 ;--------------------------------------------------------
                                    158 ; code
                                    159 ;--------------------------------------------------------
                                    160 	.area _BANK0
                                    161 ;src\mytestrom.c:62: void main(void) 
                                    162 ;	---------------------------------
                                    163 ; Function main
                                    164 ; ---------------------------------
      000000                        165 _main::
                                    166 ;src\mytestrom.c:66: rd = ReadMSXtype();					  	// Read MSX Type
      000000 3A 2D 00         [13]  167 	ld	a, (#0x002d)
                                    168 ;src\mytestrom.c:68: if (rd==0) FT_errorHandler(3,"msx 1 ");	// If MSX1 got to Error !
      000003 B7               [ 4]  169 	or	a, a
      000004 20 08            [12]  170 	jr	NZ, 00102$
      000006 11r91r01         [10]  171 	ld	de, #___str_0
      000009 3E 03            [ 7]  172 	ld	a, #0x03
      00000B CDr4Er07         [17]  173 	call	_FT_errorHandler
      00000E                        174 00102$:
                                    175 ;src\mytestrom.c:70: MyLoadMap(0,LevelMap);					// load level map 256x11 arranged by columns
      00000E 11r2Dr00         [10]  176 	ld	de, #_LevelMap
      000011 AF               [ 4]  177 	xor	a, a
      000012 CDr0Br08         [17]  178 	call	_MyLoadMap
                                    179 ;src\mytestrom.c:72: chgmod(8);						  		// Init Screen 8
      000015 3E 08            [ 7]  180 	ld	a, #0x08
      000017 CDrAFr0B         [17]  181 	call	_chgmod
                                    182 ;src\mytestrom.c:73: myVDPwrite(0,7);						// borders	
      00001A 2E 07            [ 7]  183 	ld	l, #0x07
                                    184 ;	spillPairReg hl
                                    185 ;	spillPairReg hl
      00001C AF               [ 4]  186 	xor	a, a
      00001D CDrC9r06         [17]  187 	call	_myVDPwrite
                                    188 ;src\mytestrom.c:74: VDPlineSwitch();						// 192 lines
      000020 CDr1Er0C         [17]  189 	call	_VDPlineSwitch
                                    190 ;src\mytestrom.c:76: VDP60Hz();
      000023 CDr30r0C         [17]  191 	call	_VDP60Hz
                                    192 ;src\mytestrom.c:78: myHMMV(0,0,256,512, 0);					// Clear all VRAM  by Byte 0 (Black)
      000026 AF               [ 4]  193 	xor	a, a
      000027 F5               [11]  194 	push	af
      000028 33               [ 6]  195 	inc	sp
      000029 21 00 02         [10]  196 	ld	hl, #0x0200
      00002C E5               [11]  197 	push	hl
      00002D 26 01            [ 7]  198 	ld	h, #0x01
      00002F E5               [11]  199 	push	hl
      000030 65               [ 4]  200 	ld	h, l
      000031 E5               [11]  201 	push	hl
      000032 E5               [11]  202 	push	hl
      000033 CDrB5r0B         [17]  203 	call	_myHMMV
      000036 21 09 00         [10]  204 	ld	hl, #9
      000039 39               [11]  205 	add	hl, sp
      00003A F9               [ 6]  206 	ld	sp, hl
                                    207 ;src\/myheader.h:13: __endasm; 
      00003B F3               [ 4]  208 	di
                                    209 ;src\mytestrom.c:80: myVDPready();								// wait for command completion
      00003C CDr75r0C         [17]  210 	call	_myVDPready
                                    211 ;src\/myheader.h:7: __endasm; 
      00003F FB               [ 4]  212 	ei
                                    213 ;src\mytestrom.c:83: ObjectsInit();							// initialize logical object 
      000040 CDr8Cr08         [17]  214 	call	_ObjectsInit
                                    215 ;src\mytestrom.c:84: SprtInit();								// initialize sprites in VRAM 
      000043 CDrF2r0A         [17]  216 	call	_SprtInit
                                    217 ;src\mytestrom.c:86: myInstISR();							// install a fake ISR to cut the overhead
      000046 CDr40r08         [17]  218 	call	_myInstISR
                                    219 ;src\mytestrom.c:88: page = 0;
      000049 21r28r00         [10]  220 	ld	hl, #_page
      00004C 36 00            [10]  221 	ld	(hl), #0x00
                                    222 ;src\mytestrom.c:89: mySetAdjust(0,8);						// same as myVDPwrite((0-8) & 15,18);	
      00004E 2E 08            [ 7]  223 	ld	l, #0x08
                                    224 ;	spillPairReg hl
                                    225 ;	spillPairReg hl
      000050 AF               [ 4]  226 	xor	a, a
      000051 CDr13r07         [17]  227 	call	_mySetAdjust
                                    228 ;src\mytestrom.c:91: for (WLevelx = 0;WLevelx<0+WindowW;) {
      000054 21 00 00         [10]  229 	ld	hl, #0x0000
      000057 22r1Er00         [16]  230 	ld	(_WLevelx), hl
      00005A                        231 00117$:
                                    232 ;src\mytestrom.c:92: myFT_wait(1);		
      00005A 3E 01            [ 7]  233 	ld	a, #0x01
      00005C CDr30r07         [17]  234 	call	_myFT_wait
                                    235 ;src\mytestrom.c:93: NewLine(WLevelx,0,WLevelx);WLevelx++;
      00005F 3Ar1Er00         [13]  236 	ld	a, (_WLevelx+0)
      000062 4F               [ 4]  237 	ld	c, a
      000063 2Ar1Er00         [16]  238 	ld	hl, (_WLevelx)
      000066 E5               [11]  239 	push	hl
      000067 2E 00            [ 7]  240 	ld	l, #0x00
                                    241 ;	spillPairReg hl
                                    242 ;	spillPairReg hl
      000069 79               [ 4]  243 	ld	a, c
      00006A CDrF9r05         [17]  244 	call	_NewLine
      00006D 2Ar1Er00         [16]  245 	ld	hl, (_WLevelx)
      000070 23               [ 6]  246 	inc	hl
                                    247 ;src\mytestrom.c:94: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      000071 22r1Er00         [16]  248 	ld	(_WLevelx), hl
      000074 3E F0            [ 7]  249 	ld	a, #0xf0
      000076 95               [ 4]  250 	sub	a, l
      000077 5F               [ 4]  251 	ld	e, a
      000078 9F               [ 4]  252 	sbc	a, a
      000079 94               [ 4]  253 	sub	a, h
      00007A 57               [ 4]  254 	ld	d, a
      00007B 3Ar1Er00         [13]  255 	ld	a, (_WLevelx+0)
      00007E 4F               [ 4]  256 	ld	c, a
      00007F 3E F0            [ 7]  257 	ld	a, #0xf0
      000081 91               [ 4]  258 	sub	a, c
      000082 4F               [ 4]  259 	ld	c, a
      000083 D5               [11]  260 	push	de
      000084 2E 00            [ 7]  261 	ld	l, #0x00
                                    262 ;	spillPairReg hl
                                    263 ;	spillPairReg hl
      000086 79               [ 4]  264 	ld	a, c
      000087 CDrF9r05         [17]  265 	call	_NewLine
      00008A 2Ar1Er00         [16]  266 	ld	hl, (_WLevelx)
      00008D 23               [ 6]  267 	inc	hl
      00008E 22r1Er00         [16]  268 	ld	(_WLevelx), hl
                                    269 ;src\mytestrom.c:95: NewLine(WLevelx,0,WLevelx);WLevelx++;
      000091 3Ar1Er00         [13]  270 	ld	a, (_WLevelx+0)
      000094 4F               [ 4]  271 	ld	c, a
      000095 2Ar1Er00         [16]  272 	ld	hl, (_WLevelx)
      000098 E5               [11]  273 	push	hl
      000099 2E 00            [ 7]  274 	ld	l, #0x00
                                    275 ;	spillPairReg hl
                                    276 ;	spillPairReg hl
      00009B 79               [ 4]  277 	ld	a, c
      00009C CDrF9r05         [17]  278 	call	_NewLine
      00009F 2Ar1Er00         [16]  279 	ld	hl, (_WLevelx)
      0000A2 23               [ 6]  280 	inc	hl
                                    281 ;src\mytestrom.c:96: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      0000A3 22r1Er00         [16]  282 	ld	(_WLevelx), hl
      0000A6 3E F0            [ 7]  283 	ld	a, #0xf0
      0000A8 95               [ 4]  284 	sub	a, l
      0000A9 5F               [ 4]  285 	ld	e, a
      0000AA 9F               [ 4]  286 	sbc	a, a
      0000AB 94               [ 4]  287 	sub	a, h
      0000AC 57               [ 4]  288 	ld	d, a
      0000AD 3Ar1Er00         [13]  289 	ld	a, (_WLevelx+0)
      0000B0 4F               [ 4]  290 	ld	c, a
      0000B1 3E F0            [ 7]  291 	ld	a, #0xf0
      0000B3 91               [ 4]  292 	sub	a, c
      0000B4 4F               [ 4]  293 	ld	c, a
      0000B5 D5               [11]  294 	push	de
      0000B6 2E 00            [ 7]  295 	ld	l, #0x00
                                    296 ;	spillPairReg hl
                                    297 ;	spillPairReg hl
      0000B8 79               [ 4]  298 	ld	a, c
      0000B9 CDrF9r05         [17]  299 	call	_NewLine
      0000BC 2Ar1Er00         [16]  300 	ld	hl, (_WLevelx)
      0000BF 23               [ 6]  301 	inc	hl
                                    302 ;src\mytestrom.c:91: for (WLevelx = 0;WLevelx<0+WindowW;) {
      0000C0 22r1Er00         [16]  303 	ld	(_WLevelx), hl
      0000C3 11 F0 00         [10]  304 	ld	de, #0x00f0
      0000C6 BF               [ 4]  305 	cp	a, a
      0000C7 ED 52            [15]  306 	sbc	hl, de
      0000C9 38 8F            [12]  307 	jr	C, 00117$
                                    308 ;src\mytestrom.c:99: WLevelx = 0;	
      0000CB 21 00 00         [10]  309 	ld	hl, #0x0000
      0000CE 22r1Er00         [16]  310 	ld	(_WLevelx), hl
                                    311 ;src\mytestrom.c:101: MyBorder.ny = WindowH;
      0000D1 2E B0            [ 7]  312 	ld	l, #0xb0
      0000D3 22r19r00         [16]  313 	ld	((_MyBorder + 10)), hl
                                    314 ;src\mytestrom.c:102: MyBorder.col = 0;
      0000D6 21r1Br00         [10]  315 	ld	hl, #(_MyBorder + 12)
      0000D9 36 00            [10]  316 	ld	(hl), #0x00
                                    317 ;src\mytestrom.c:103: MyBorder.param = 0;
      0000DB 21r1Cr00         [10]  318 	ld	hl, #(_MyBorder + 13)
      0000DE 36 00            [10]  319 	ld	(hl), #0x00
                                    320 ;src\mytestrom.c:104: MyBorder.cmd = opHMMV;
      0000E0 21r1Dr00         [10]  321 	ld	hl, #(_MyBorder + 14)
      0000E3 36 C0            [10]  322 	ld	(hl), #0xc0
                                    323 ;src\mytestrom.c:106: MyCommand.ny = WindowH;
      0000E5 21 B0 00         [10]  324 	ld	hl, #0x00b0
      0000E8 22r0Ar00         [16]  325 	ld	((_MyCommand + 10)), hl
                                    326 ;src\mytestrom.c:107: MyCommand.col = 0;
      0000EB 21r0Cr00         [10]  327 	ld	hl, #(_MyCommand + 12)
      0000EE 36 00            [10]  328 	ld	(hl), #0x00
                                    329 ;src\mytestrom.c:108: MyCommand.param = 0;
      0000F0 21r0Dr00         [10]  330 	ld	hl, #(_MyCommand + 13)
      0000F3 36 00            [10]  331 	ld	(hl), #0x00
                                    332 ;src\mytestrom.c:109: MyCommand.cmd = opHMMM;
      0000F5 21r0Er00         [10]  333 	ld	hl, #(_MyCommand + 14)
      0000F8 36 D0            [10]  334 	ld	(hl), #0xd0
                                    335 ;src\mytestrom.c:112: while (myCheckkbd(7)==0xFF)
      0000FA                        336 00112$:
      0000FA 3E 07            [ 7]  337 	ld	a, #0x07
      0000FC CDr7Er08         [17]  338 	call	_myCheckkbd
      0000FF 3C               [ 4]  339 	inc	a
      000100 C2r88r01         [10]  340 	jp	NZ,00114$
                                    341 ;src\mytestrom.c:114: WaitLineInt();			// wait for line 176-16
      000103 CDr37r07         [17]  342 	call	_WaitLineInt
                                    343 ;src\mytestrom.c:115: cursat^=1;				// swap sat 0 and sat 1
      000106 3Ar2Cr00         [13]  344 	ld	a, (_cursat+0)
      000109 EE 01            [ 7]  345 	xor	a, #0x01
      00010B 32r2Cr00         [13]  346 	ld	(_cursat+0), a
                                    347 ;src\mytestrom.c:117: if ((myCheckkbd(8)==0x7F) && (WLevelx<16*(LevelW-15)))  { 
      00010E 3E 08            [ 7]  348 	ld	a, #0x08
      000110 CDr7Er08         [17]  349 	call	_myCheckkbd
      000113 D6 7F            [ 7]  350 	sub	a, #0x7f
      000115 20 37            [12]  351 	jr	NZ, 00109$
      000117 3Ar21r00         [13]  352 	ld	a, (_LevelW+0)
      00011A 0E 00            [ 7]  353 	ld	c, #0x00
      00011C C6 F1            [ 7]  354 	add	a, #0xf1
      00011E 5F               [ 4]  355 	ld	e, a
      00011F 79               [ 4]  356 	ld	a, c
      000120 CE FF            [ 7]  357 	adc	a, #0xff
      000122 57               [ 4]  358 	ld	d, a
      000123 EB               [ 4]  359 	ex	de, hl
      000124 29               [11]  360 	add	hl, hl
      000125 29               [11]  361 	add	hl, hl
      000126 29               [11]  362 	add	hl, hl
      000127 29               [11]  363 	add	hl, hl
      000128 EB               [ 4]  364 	ex	de, hl
      000129 3Ar1Er00         [13]  365 	ld	a, (_WLevelx+0)
      00012C 93               [ 4]  366 	sub	a, e
      00012D 3Ar1Fr00         [13]  367 	ld	a, (_WLevelx+1)
      000130 9A               [ 4]  368 	sbc	a, d
      000131 E2r36r01         [10]  369 	jp	PO, 00170$
      000134 EE 80            [ 7]  370 	xor	a, #0x80
      000136                        371 00170$:
      000136 F2r4Er01         [10]  372 	jp	P, 00109$
                                    373 ;src\mytestrom.c:118: WLevelx++;
      000139 2Ar1Er00         [16]  374 	ld	hl, (_WLevelx)
      00013C 23               [ 6]  375 	inc	hl
                                    376 ;src\mytestrom.c:119: ObjectstoVRAM(WLevelx);			
      00013D 22r1Er00         [16]  377 	ld	(_WLevelx), hl
      000140 CDr2Er09         [17]  378 	call	_ObjectstoVRAM
                                    379 ;src\mytestrom.c:120: ScrollRight(WLevelx & 15);
      000143 3Ar1Er00         [13]  380 	ld	a, (_WLevelx+0)
      000146 E6 0F            [ 7]  381 	and	a, #0x0f
      000148 CDr98r01         [17]  382 	call	_ScrollRight
      00014B C3rFAr00         [10]  383 	jp	00112$
      00014E                        384 00109$:
                                    385 ;src\mytestrom.c:122: else if ((myCheckkbd(8)==0xEF) && (WLevelx>0)) { 
      00014E 3E 08            [ 7]  386 	ld	a, #0x08
      000150 CDr7Er08         [17]  387 	call	_myCheckkbd
      000153 D6 EF            [ 7]  388 	sub	a, #0xef
      000155 20 28            [12]  389 	jr	NZ, 00105$
      000157 AF               [ 4]  390 	xor	a, a
      000158 FD 21r1Er00      [14]  391 	ld	iy, #_WLevelx
      00015C FD BE 00         [19]  392 	cp	a, 0 (iy)
      00015F FD 9E 01         [19]  393 	sbc	a, 1 (iy)
      000162 E2r67r01         [10]  394 	jp	PO, 00173$
      000165 EE 80            [ 7]  395 	xor	a, #0x80
      000167                        396 00173$:
      000167 F2r7Fr01         [10]  397 	jp	P, 00105$
                                    398 ;src\mytestrom.c:123: WLevelx--;
      00016A 2Ar1Er00         [16]  399 	ld	hl, (_WLevelx)
      00016D 2B               [ 6]  400 	dec	hl
                                    401 ;src\mytestrom.c:124: ObjectstoVRAM(WLevelx);			
      00016E 22r1Er00         [16]  402 	ld	(_WLevelx), hl
      000171 CDr2Er09         [17]  403 	call	_ObjectstoVRAM
                                    404 ;src\mytestrom.c:125: ScrollLeft(WLevelx & 15);
      000174 3Ar1Er00         [13]  405 	ld	a, (_WLevelx+0)
      000177 E6 0F            [ 7]  406 	and	a, #0x0f
      000179 CDr61r02         [17]  407 	call	_ScrollLeft
      00017C C3rFAr00         [10]  408 	jp	00112$
      00017F                        409 00105$:
                                    410 ;src\mytestrom.c:128: ObjectstoVRAM(WLevelx);						
      00017F 2Ar1Er00         [16]  411 	ld	hl, (_WLevelx)
      000182 CDr2Er09         [17]  412 	call	_ObjectstoVRAM
      000185 C3rFAr00         [10]  413 	jp	00112$
      000188                        414 00114$:
                                    415 ;src\mytestrom.c:132: myISRrestore();
      000188 CDr60r08         [17]  416 	call	_myISRrestore
                                    417 ;src\mytestrom.c:133: chgmod(0);
      00018B AF               [ 4]  418 	xor	a, a
      00018C CDrAFr0B         [17]  419 	call	_chgmod
                                    420 ;src\mytestrom.c:134: Reboot(0);
      00018F C7               [11]  421 	rst	#0
                                    422 ;src\mytestrom.c:135: }
      000190 C9               [10]  423 	ret
      000191                        424 ___str_0:
      000191 6D 73 78 20 31 20      425 	.ascii "msx 1 "
      000197 00                     426 	.db 0x00
                                    427 ;src\mytestrom.c:137: void ScrollRight(char step) __sdcccall(1) 
                                    428 ;	---------------------------------
                                    429 ; Function ScrollRight
                                    430 ; ---------------------------------
      000198                        431 _ScrollRight::
      000198 4F               [ 4]  432 	ld	c, a
                                    433 ;src\mytestrom.c:140: myVDPwrite((step-8) & 15,18);			
      000199 41               [ 4]  434 	ld	b, c
      00019A 78               [ 4]  435 	ld	a, b
      00019B C6 F8            [ 7]  436 	add	a, #0xf8
      00019D E6 0F            [ 7]  437 	and	a, #0x0f
      00019F 5F               [ 4]  438 	ld	e, a
      0001A0 C5               [11]  439 	push	bc
      0001A1 2E 12            [ 7]  440 	ld	l, #0x12
                                    441 ;	spillPairReg hl
                                    442 ;	spillPairReg hl
      0001A3 7B               [ 4]  443 	ld	a, e
      0001A4 CDrC9r06         [17]  444 	call	_myVDPwrite
      0001A7 C1               [10]  445 	pop	bc
                                    446 ;src\mytestrom.c:141: switch (step) {
      0001A8 79               [ 4]  447 	ld	a, c
      0001A9 B7               [ 4]  448 	or	a, a
      0001AA 20 44            [12]  449 	jr	NZ, 00102$
                                    450 ;src\mytestrom.c:143: page ^=1;							// case 0
      0001AC 3Ar28r00         [13]  451 	ld	a, (_page+0)
      0001AF EE 01            [ 7]  452 	xor	a, #0x01
      0001B1 32r28r00         [13]  453 	ld	(_page+0), a
                                    454 ;src\mytestrom.c:144: SetDisplayPage(page);
      0001B4 C5               [11]  455 	push	bc
      0001B5 3Ar28r00         [13]  456 	ld	a, (_page+0)
      0001B8 6F               [ 4]  457 	ld	l, a
                                    458 ;	spillPairReg hl
                                    459 ;	spillPairReg hl
      0001B9 CDr03r0C         [17]  460 	call	_SetDisplayPage
      0001BC C1               [10]  461 	pop	bc
                                    462 ;src\mytestrom.c:145: MyBorder.dx = 240;
      0001BD 21 F0 00         [10]  463 	ld	hl, #0x00f0
      0001C0 22r13r00         [16]  464 	ld	((_MyBorder + 4)), hl
                                    465 ;src\mytestrom.c:146: MyBorder.nx = 15;
      0001C3 2E 0F            [ 7]  466 	ld	l, #0x0f
      0001C5 22r17r00         [16]  467 	ld	((_MyBorder + 8)), hl
                                    468 ;src\mytestrom.c:147: MyBorder.dy = 256*page;
      0001C8 3Ar28r00         [13]  469 	ld	a, (_page+0)
      0001CB 57               [ 4]  470 	ld	d, a
      0001CC 1E 00            [ 7]  471 	ld	e, #0x00
      0001CE ED 53r15r00      [20]  472 	ld	((_MyBorder + 6)), de
                                    473 ;src\mytestrom.c:148: myfVDP(&MyBorder);
      0001D2 C5               [11]  474 	push	bc
      0001D3 21r0Fr00         [10]  475 	ld	hl, #_MyBorder
      0001D6 CDrD3r06         [17]  476 	call	_myfVDP
      0001D9 C1               [10]  477 	pop	bc
                                    478 ;src\mytestrom.c:149: BorderLinesR(WindowW-1,page, WLevelx+WindowW-1);		
      0001DA 2Ar1Er00         [16]  479 	ld	hl, (_WLevelx)
      0001DD 11 EF 00         [10]  480 	ld	de, #0x00ef
      0001E0 19               [11]  481 	add	hl, de
      0001E1 C5               [11]  482 	push	bc
      0001E2 E5               [11]  483 	push	hl
      0001E3 3Ar28r00         [13]  484 	ld	a, (_page+0)
      0001E6 6F               [ 4]  485 	ld	l, a
                                    486 ;	spillPairReg hl
                                    487 ;	spillPairReg hl
      0001E7 3E EF            [ 7]  488 	ld	a, #0xef
      0001E9 CDr70r05         [17]  489 	call	_BorderLinesR
      0001EC C1               [10]  490 	pop	bc
                                    491 ;src\mytestrom.c:150: break;
      0001ED C3r45r02         [10]  492 	jp	00103$
                                    493 ;src\mytestrom.c:151: default:								// case 1-15
      0001F0                        494 00102$:
                                    495 ;src\mytestrom.c:152: MyCommand.sx = 16*step;
      0001F0 59               [ 4]  496 	ld	e, c
      0001F1 16 00            [ 7]  497 	ld	d, #0x00
      0001F3 EB               [ 4]  498 	ex	de, hl
      0001F4 29               [11]  499 	add	hl, hl
      0001F5 29               [11]  500 	add	hl, hl
      0001F6 29               [11]  501 	add	hl, hl
      0001F7 29               [11]  502 	add	hl, hl
      0001F8 EB               [ 4]  503 	ex	de, hl
      0001F9 ED 53r00r00      [20]  504 	ld	(_MyCommand), de
                                    505 ;src\mytestrom.c:153: MyCommand.dx = MyCommand.sx - 16;;
      0001FD 2Ar00r00         [16]  506 	ld	hl, (#_MyCommand + 0)
      000200 11 F0 FF         [10]  507 	ld	de, #0xfff0
      000203 19               [11]  508 	add	hl, de
      000204 5D               [ 4]  509 	ld	e, l
      000205 7C               [ 4]  510 	ld	a,h
      000206 57               [ 4]  511 	ld	d,a
      000207 ED 53r04r00      [20]  512 	ld	((_MyCommand + 4)), de
                                    513 ;src\mytestrom.c:154: MyCommand.sy = 256*page;
      00020B 3Ar28r00         [13]  514 	ld	a, (_page+0)
      00020E 57               [ 4]  515 	ld	d, a
      00020F 1E 00            [ 7]  516 	ld	e, #0x00
      000211 ED 53r02r00      [20]  517 	ld	((_MyCommand + 2)), de
                                    518 ;src\mytestrom.c:155: MyCommand.dy = MyCommand.sy ^ 256;
      000215 ED 5Br02r00      [20]  519 	ld	de, (#(_MyCommand + 2) + 0)
      000219 7A               [ 4]  520 	ld	a, d
      00021A EE 01            [ 7]  521 	xor	a, #0x01
      00021C 57               [ 4]  522 	ld	d, a
      00021D ED 53r06r00      [20]  523 	ld	((_MyCommand + 6)), de
                                    524 ;src\mytestrom.c:156: MyCommand.nx = 16;
      000221 21 10 00         [10]  525 	ld	hl, #0x0010
      000224 22r08r00         [16]  526 	ld	((_MyCommand + 8)), hl
                                    527 ;src\mytestrom.c:157: myfVDP(&MyCommand);		
      000227 C5               [11]  528 	push	bc
      000228 21r00r00         [10]  529 	ld	hl, #_MyCommand
      00022B CDrD3r06         [17]  530 	call	_myfVDP
      00022E C1               [10]  531 	pop	bc
                                    532 ;src\mytestrom.c:158: BorderLinesR(step+WindowW-1,page,WLevelx+WindowW-1);
      00022F 2Ar1Er00         [16]  533 	ld	hl, (_WLevelx)
      000232 11 EF 00         [10]  534 	ld	de, #0x00ef
      000235 19               [11]  535 	add	hl, de
      000236 78               [ 4]  536 	ld	a, b
      000237 C6 EF            [ 7]  537 	add	a, #0xef
      000239 5F               [ 4]  538 	ld	e, a
      00023A C5               [11]  539 	push	bc
      00023B E5               [11]  540 	push	hl
      00023C 3Ar28r00         [13]  541 	ld	a, (_page+0)
      00023F 6F               [ 4]  542 	ld	l, a
                                    543 ;	spillPairReg hl
                                    544 ;	spillPairReg hl
      000240 7B               [ 4]  545 	ld	a, e
      000241 CDr70r05         [17]  546 	call	_BorderLinesR
      000244 C1               [10]  547 	pop	bc
                                    548 ;src\mytestrom.c:160: }
      000245                        549 00103$:
                                    550 ;src\mytestrom.c:161: if (step==15) PatchPlotOneTile(step+WindowW-1-16,page^1,WLevelx+WindowW-1);		
      000245 79               [ 4]  551 	ld	a, c
      000246 D6 0F            [ 7]  552 	sub	a, #0x0f
      000248 C0               [11]  553 	ret	NZ
      000249 2Ar1Er00         [16]  554 	ld	hl, (_WLevelx)
      00024C 11 EF 00         [10]  555 	ld	de, #0x00ef
      00024F 19               [11]  556 	add	hl, de
      000250 3Ar28r00         [13]  557 	ld	a, (_page+0)
      000253 EE 01            [ 7]  558 	xor	a, #0x01
      000255 4F               [ 4]  559 	ld	c, a
      000256 78               [ 4]  560 	ld	a, b
      000257 C6 DF            [ 7]  561 	add	a, #0xdf
      000259 47               [ 4]  562 	ld	b, a
      00025A E5               [11]  563 	push	hl
      00025B 69               [ 4]  564 	ld	l, c
                                    565 ;	spillPairReg hl
                                    566 ;	spillPairReg hl
      00025C 78               [ 4]  567 	ld	a, b
      00025D CDr7Fr06         [17]  568 	call	_PatchPlotOneTile
                                    569 ;src\mytestrom.c:162: }
      000260 C9               [10]  570 	ret
                                    571 ;src\mytestrom.c:164: void ScrollLeft(char step) __sdcccall(1)
                                    572 ;	---------------------------------
                                    573 ; Function ScrollLeft
                                    574 ; ---------------------------------
      000261                        575 _ScrollLeft::
                                    576 ;src\mytestrom.c:167: myVDPwrite((step-8) & 15,18);	
      000261 4F               [ 4]  577 	ld	c, a
      000262 C6 F8            [ 7]  578 	add	a, #0xf8
      000264 E6 0F            [ 7]  579 	and	a, #0x0f
      000266 47               [ 4]  580 	ld	b, a
      000267 C5               [11]  581 	push	bc
      000268 2E 12            [ 7]  582 	ld	l, #0x12
                                    583 ;	spillPairReg hl
                                    584 ;	spillPairReg hl
      00026A 78               [ 4]  585 	ld	a, b
      00026B CDrC9r06         [17]  586 	call	_myVDPwrite
      00026E C1               [10]  587 	pop	bc
                                    588 ;src\mytestrom.c:168: switch (step) {
      00026F 79               [ 4]  589 	ld	a, c
      000270 D6 0F            [ 7]  590 	sub	a, #0x0f
      000272 20 41            [12]  591 	jr	NZ, 00102$
                                    592 ;src\mytestrom.c:170: page ^=1;					
      000274 3Ar28r00         [13]  593 	ld	a, (_page+0)
      000277 EE 01            [ 7]  594 	xor	a, #0x01
      000279 32r28r00         [13]  595 	ld	(_page+0), a
                                    596 ;src\mytestrom.c:171: SetDisplayPage(page);				// case 15
      00027C C5               [11]  597 	push	bc
      00027D 3Ar28r00         [13]  598 	ld	a, (_page+0)
      000280 6F               [ 4]  599 	ld	l, a
                                    600 ;	spillPairReg hl
                                    601 ;	spillPairReg hl
      000281 CDr03r0C         [17]  602 	call	_SetDisplayPage
      000284 C1               [10]  603 	pop	bc
                                    604 ;src\mytestrom.c:172: MyBorder.dx = 0;	
      000285 21 00 00         [10]  605 	ld	hl, #0x0000
      000288 22r13r00         [16]  606 	ld	((_MyBorder + 4)), hl
                                    607 ;src\mytestrom.c:173: MyBorder.nx = 15;
      00028B 2E 0F            [ 7]  608 	ld	l, #0x0f
      00028D 22r17r00         [16]  609 	ld	((_MyBorder + 8)), hl
                                    610 ;src\mytestrom.c:174: MyBorder.dy = 256*page;
      000290 3Ar28r00         [13]  611 	ld	a, (_page+0)
      000293 06 00            [ 7]  612 	ld	b, #0x00
      000295 57               [ 4]  613 	ld	d, a
      000296 1E 00            [ 7]  614 	ld	e, #0x00
      000298 ED 53r15r00      [20]  615 	ld	((_MyBorder + 6)), de
                                    616 ;src\mytestrom.c:175: myfVDP(&MyBorder);
      00029C C5               [11]  617 	push	bc
      00029D 21r0Fr00         [10]  618 	ld	hl, #_MyBorder
      0002A0 CDrD3r06         [17]  619 	call	_myfVDP
      0002A3 C1               [10]  620 	pop	bc
                                    621 ;src\mytestrom.c:176: BorderLinesL(step,page,WLevelx);		
      0002A4 C5               [11]  622 	push	bc
      0002A5 2Ar1Er00         [16]  623 	ld	hl, (_WLevelx)
      0002A8 E5               [11]  624 	push	hl
      0002A9 3Ar28r00         [13]  625 	ld	a, (_page+0)
      0002AC 6F               [ 4]  626 	ld	l, a
                                    627 ;	spillPairReg hl
                                    628 ;	spillPairReg hl
      0002AD 79               [ 4]  629 	ld	a, c
      0002AE CDrE7r04         [17]  630 	call	_BorderLinesL
      0002B1 C1               [10]  631 	pop	bc
                                    632 ;src\mytestrom.c:177: break;				
      0002B2 C3r03r03         [10]  633 	jp	00103$
                                    634 ;src\mytestrom.c:178: default:								// case 14-0
      0002B5                        635 00102$:
                                    636 ;src\mytestrom.c:179: MyCommand.sx = 16*step;
      0002B5 59               [ 4]  637 	ld	e, c
      0002B6 16 00            [ 7]  638 	ld	d, #0x00
      0002B8 EB               [ 4]  639 	ex	de, hl
      0002B9 29               [11]  640 	add	hl, hl
      0002BA 29               [11]  641 	add	hl, hl
      0002BB 29               [11]  642 	add	hl, hl
      0002BC 29               [11]  643 	add	hl, hl
      0002BD EB               [ 4]  644 	ex	de, hl
      0002BE ED 53r00r00      [20]  645 	ld	(_MyCommand), de
                                    646 ;src\mytestrom.c:180: MyCommand.dx = MyCommand.sx + 16;
      0002C2 ED 5Br00r00      [20]  647 	ld	de, (#_MyCommand + 0)
      0002C6 21 10 00         [10]  648 	ld	hl, #0x0010
      0002C9 19               [11]  649 	add	hl, de
      0002CA EB               [ 4]  650 	ex	de, hl
      0002CB ED 53r04r00      [20]  651 	ld	((_MyCommand + 4)), de
                                    652 ;src\mytestrom.c:181: MyCommand.sy = 256*page;
      0002CF 3Ar28r00         [13]  653 	ld	a, (_page+0)
      0002D2 06 00            [ 7]  654 	ld	b, #0x00
      0002D4 57               [ 4]  655 	ld	d, a
      0002D5 1E 00            [ 7]  656 	ld	e, #0x00
      0002D7 ED 53r02r00      [20]  657 	ld	((_MyCommand + 2)), de
                                    658 ;src\mytestrom.c:182: MyCommand.dy = MyCommand.sy ^ 256;		
      0002DB ED 5Br02r00      [20]  659 	ld	de, (#(_MyCommand + 2) + 0)
      0002DF 7A               [ 4]  660 	ld	a, d
      0002E0 EE 01            [ 7]  661 	xor	a, #0x01
      0002E2 57               [ 4]  662 	ld	d, a
      0002E3 ED 53r06r00      [20]  663 	ld	((_MyCommand + 6)), de
                                    664 ;src\mytestrom.c:183: MyCommand.nx = 16;						
      0002E7 21 10 00         [10]  665 	ld	hl, #0x0010
      0002EA 22r08r00         [16]  666 	ld	((_MyCommand + 8)), hl
                                    667 ;src\mytestrom.c:184: myfVDP(&MyCommand);					
      0002ED C5               [11]  668 	push	bc
      0002EE 21r00r00         [10]  669 	ld	hl, #_MyCommand
      0002F1 CDrD3r06         [17]  670 	call	_myfVDP
      0002F4 C1               [10]  671 	pop	bc
                                    672 ;src\mytestrom.c:185: BorderLinesL(step,page,WLevelx);			
      0002F5 C5               [11]  673 	push	bc
      0002F6 2Ar1Er00         [16]  674 	ld	hl, (_WLevelx)
      0002F9 E5               [11]  675 	push	hl
      0002FA 3Ar28r00         [13]  676 	ld	a, (_page+0)
      0002FD 6F               [ 4]  677 	ld	l, a
                                    678 ;	spillPairReg hl
                                    679 ;	spillPairReg hl
      0002FE 79               [ 4]  680 	ld	a, c
      0002FF CDrE7r04         [17]  681 	call	_BorderLinesL
      000302 C1               [10]  682 	pop	bc
                                    683 ;src\mytestrom.c:187: }
      000303                        684 00103$:
                                    685 ;src\mytestrom.c:188: if (step==0) PatchPlotOneTile(16,page^1,WLevelx);				
      000303 79               [ 4]  686 	ld	a, c
      000304 B7               [ 4]  687 	or	a, a
      000305 C0               [11]  688 	ret	NZ
      000306 3Ar28r00         [13]  689 	ld	a, (_page+0)
      000309 EE 01            [ 7]  690 	xor	a, #0x01
      00030B 4F               [ 4]  691 	ld	c, a
      00030C 2Ar1Er00         [16]  692 	ld	hl, (_WLevelx)
      00030F E5               [11]  693 	push	hl
      000310 69               [ 4]  694 	ld	l, c
                                    695 ;	spillPairReg hl
                                    696 ;	spillPairReg hl
      000311 3E 10            [ 7]  697 	ld	a, #0x10
      000313 CDr7Fr06         [17]  698 	call	_PatchPlotOneTile
                                    699 ;src\mytestrom.c:189: }
      000316 C9               [10]  700 	ret
                                    701 ;src\mytestrom.c:209: void PlotOneColumnTile(void) __sdcccall(1) 
                                    702 ;	---------------------------------
                                    703 ; Function PlotOneColumnTile
                                    704 ; ---------------------------------
      000317                        705 _PlotOneColumnTile::
                                    706 ;src\mytestrom.c:241: __endasm;
      000317 D9               [ 4]  707 	exx
      000318 2Ar2Dr0B         [16]  708 	ld	hl,(_p)
      00031B 7E               [ 7]  709 	ld	a,(hl)
      00031C 07               [ 4]  710 	rlca
      00031D 07               [ 4]  711 	rlca
      00031E E6 03            [ 7]  712 	and	a,#3
      000320 87               [ 4]  713 	add	a,a
      000321 C6r00            [ 7]  714 	add	a,#b_data0
      000323 32 00 90         [13]  715 	ld	(#0x9000),a
      000326 3C               [ 4]  716 	inc	a
      000327 32 00 B0         [13]  717 	ld	(#0xb000),a
      00032A 7E               [ 7]  718 	ld	a,(hl)
      00032B 23               [ 6]  719 	inc	hl
      00032C 22r2Dr0B         [16]  720 	ld	(_p),hl ; save next tile
      00032F E6 3F            [ 7]  721 	and	a,#0x3F ; tile number
      000331 C6 80            [ 7]  722 	add	a,#0x80 ; address of the segment
      000333 67               [ 4]  723 	ld	h,a ; address of the tile in the segment
      000334 6A               [ 4]  724 	ld	l,d
      000335 D9               [ 4]  725 	exx
                                    726 	.rept	#16
                                    727 	out	(c),e ; set vram address in 14 bits
                                    728 	out	(c),d
                                    729 	inc	d ; new line
                                    730 	exx
                                    731 	outi	; write data
                                    732 	exx
                                    733 	.endm
      000336 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000338 ED 51            [12]    2 	out	(c),d
      00033A 14               [ 4]    3 	inc	d ; new line
      00033B D9               [ 4]    4 	exx
      00033C ED A3            [16]    5 	outi	; write data
      00033E D9               [ 4]    6 	exx
      00033F ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000341 ED 51            [12]    2 	out	(c),d
      000343 14               [ 4]    3 	inc	d ; new line
      000344 D9               [ 4]    4 	exx
      000345 ED A3            [16]    5 	outi	; write data
      000347 D9               [ 4]    6 	exx
      000348 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00034A ED 51            [12]    2 	out	(c),d
      00034C 14               [ 4]    3 	inc	d ; new line
      00034D D9               [ 4]    4 	exx
      00034E ED A3            [16]    5 	outi	; write data
      000350 D9               [ 4]    6 	exx
      000351 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000353 ED 51            [12]    2 	out	(c),d
      000355 14               [ 4]    3 	inc	d ; new line
      000356 D9               [ 4]    4 	exx
      000357 ED A3            [16]    5 	outi	; write data
      000359 D9               [ 4]    6 	exx
      00035A ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00035C ED 51            [12]    2 	out	(c),d
      00035E 14               [ 4]    3 	inc	d ; new line
      00035F D9               [ 4]    4 	exx
      000360 ED A3            [16]    5 	outi	; write data
      000362 D9               [ 4]    6 	exx
      000363 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000365 ED 51            [12]    2 	out	(c),d
      000367 14               [ 4]    3 	inc	d ; new line
      000368 D9               [ 4]    4 	exx
      000369 ED A3            [16]    5 	outi	; write data
      00036B D9               [ 4]    6 	exx
      00036C ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00036E ED 51            [12]    2 	out	(c),d
      000370 14               [ 4]    3 	inc	d ; new line
      000371 D9               [ 4]    4 	exx
      000372 ED A3            [16]    5 	outi	; write data
      000374 D9               [ 4]    6 	exx
      000375 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000377 ED 51            [12]    2 	out	(c),d
      000379 14               [ 4]    3 	inc	d ; new line
      00037A D9               [ 4]    4 	exx
      00037B ED A3            [16]    5 	outi	; write data
      00037D D9               [ 4]    6 	exx
      00037E ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000380 ED 51            [12]    2 	out	(c),d
      000382 14               [ 4]    3 	inc	d ; new line
      000383 D9               [ 4]    4 	exx
      000384 ED A3            [16]    5 	outi	; write data
      000386 D9               [ 4]    6 	exx
      000387 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000389 ED 51            [12]    2 	out	(c),d
      00038B 14               [ 4]    3 	inc	d ; new line
      00038C D9               [ 4]    4 	exx
      00038D ED A3            [16]    5 	outi	; write data
      00038F D9               [ 4]    6 	exx
      000390 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000392 ED 51            [12]    2 	out	(c),d
      000394 14               [ 4]    3 	inc	d ; new line
      000395 D9               [ 4]    4 	exx
      000396 ED A3            [16]    5 	outi	; write data
      000398 D9               [ 4]    6 	exx
      000399 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00039B ED 51            [12]    2 	out	(c),d
      00039D 14               [ 4]    3 	inc	d ; new line
      00039E D9               [ 4]    4 	exx
      00039F ED A3            [16]    5 	outi	; write data
      0003A1 D9               [ 4]    6 	exx
      0003A2 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003A4 ED 51            [12]    2 	out	(c),d
      0003A6 14               [ 4]    3 	inc	d ; new line
      0003A7 D9               [ 4]    4 	exx
      0003A8 ED A3            [16]    5 	outi	; write data
      0003AA D9               [ 4]    6 	exx
      0003AB ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003AD ED 51            [12]    2 	out	(c),d
      0003AF 14               [ 4]    3 	inc	d ; new line
      0003B0 D9               [ 4]    4 	exx
      0003B1 ED A3            [16]    5 	outi	; write data
      0003B3 D9               [ 4]    6 	exx
      0003B4 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003B6 ED 51            [12]    2 	out	(c),d
      0003B8 14               [ 4]    3 	inc	d ; new line
      0003B9 D9               [ 4]    4 	exx
      0003BA ED A3            [16]    5 	outi	; write data
      0003BC D9               [ 4]    6 	exx
      0003BD ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003BF ED 51            [12]    2 	out	(c),d
      0003C1 14               [ 4]    3 	inc	d ; new line
      0003C2 D9               [ 4]    4 	exx
      0003C3 ED A3            [16]    5 	outi	; write data
      0003C5 D9               [ 4]    6 	exx
                                    734 ;src\mytestrom.c:242: }
      0003C6 C9               [10]  735 	ret
                                    736 ;src\mytestrom.c:244: void PlotOneColumnTileAndMask(void) __sdcccall(1) 
                                    737 ;	---------------------------------
                                    738 ; Function PlotOneColumnTileAndMask
                                    739 ; ---------------------------------
      0003C7                        740 _PlotOneColumnTileAndMask::
                                    741 ;src\mytestrom.c:280: __endasm;
      0003C7 D9               [ 4]  742 	exx
      0003C8 2Ar2Dr0B         [16]  743 	ld	hl,(_p)
      0003CB 7E               [ 7]  744 	ld	a,(hl)
      0003CC 07               [ 4]  745 	rlca
      0003CD 07               [ 4]  746 	rlca
      0003CE E6 03            [ 7]  747 	and	a,#3
      0003D0 87               [ 4]  748 	add	a,a
      0003D1 C6r00            [ 7]  749 	add	a,#b_data0
      0003D3 32 00 90         [13]  750 	ld	(#0x9000),a
      0003D6 3C               [ 4]  751 	inc	a
      0003D7 32 00 B0         [13]  752 	ld	(#0xb000),a
      0003DA 7E               [ 7]  753 	ld	a,(hl)
      0003DB 23               [ 6]  754 	inc	hl
      0003DC 22r2Dr0B         [16]  755 	ld	(_p),hl ; save next tile
      0003DF E6 3F            [ 7]  756 	and	a,#0x3F ; tile number
      0003E1 C6 80            [ 7]  757 	add	a,#0x80 ; address of the segment
      0003E3 67               [ 4]  758 	ld	h,a ; address of the tile in the segment
      0003E4 6A               [ 4]  759 	ld	l,d
      0003E5 D9               [ 4]  760 	exx
                                    761 	.rept	#16
                                    762 	out	(c),e ; set vram address in 14 bits
                                    763 	out	(c),d
                                    764 	exx
                                    765 	outi	; write data
                                    766 	exx
                                    767 	out	(c),l ; set vram address in 14 bits for border
                                    768 	out	(c),d
                                    769 	inc	d ; new line
                                    770 	xor	a,a ; write border
                                    771 	out	(#0x98),a
                                    772 	.endm
      0003E6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003E8 ED 51            [12]    2 	out	(c),d
      0003EA D9               [ 4]    3 	exx
      0003EB ED A3            [16]    4 	outi	; write data
      0003ED D9               [ 4]    5 	exx
      0003EE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0003F0 ED 51            [12]    7 	out	(c),d
      0003F2 14               [ 4]    8 	inc	d ; new line
      0003F3 AF               [ 4]    9 	xor	a,a ; write border
      0003F4 D3 98            [11]   10 	out	(#0x98),a
      0003F6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003F8 ED 51            [12]    2 	out	(c),d
      0003FA D9               [ 4]    3 	exx
      0003FB ED A3            [16]    4 	outi	; write data
      0003FD D9               [ 4]    5 	exx
      0003FE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000400 ED 51            [12]    7 	out	(c),d
      000402 14               [ 4]    8 	inc	d ; new line
      000403 AF               [ 4]    9 	xor	a,a ; write border
      000404 D3 98            [11]   10 	out	(#0x98),a
      000406 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000408 ED 51            [12]    2 	out	(c),d
      00040A D9               [ 4]    3 	exx
      00040B ED A3            [16]    4 	outi	; write data
      00040D D9               [ 4]    5 	exx
      00040E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000410 ED 51            [12]    7 	out	(c),d
      000412 14               [ 4]    8 	inc	d ; new line
      000413 AF               [ 4]    9 	xor	a,a ; write border
      000414 D3 98            [11]   10 	out	(#0x98),a
      000416 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000418 ED 51            [12]    2 	out	(c),d
      00041A D9               [ 4]    3 	exx
      00041B ED A3            [16]    4 	outi	; write data
      00041D D9               [ 4]    5 	exx
      00041E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000420 ED 51            [12]    7 	out	(c),d
      000422 14               [ 4]    8 	inc	d ; new line
      000423 AF               [ 4]    9 	xor	a,a ; write border
      000424 D3 98            [11]   10 	out	(#0x98),a
      000426 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000428 ED 51            [12]    2 	out	(c),d
      00042A D9               [ 4]    3 	exx
      00042B ED A3            [16]    4 	outi	; write data
      00042D D9               [ 4]    5 	exx
      00042E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000430 ED 51            [12]    7 	out	(c),d
      000432 14               [ 4]    8 	inc	d ; new line
      000433 AF               [ 4]    9 	xor	a,a ; write border
      000434 D3 98            [11]   10 	out	(#0x98),a
      000436 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000438 ED 51            [12]    2 	out	(c),d
      00043A D9               [ 4]    3 	exx
      00043B ED A3            [16]    4 	outi	; write data
      00043D D9               [ 4]    5 	exx
      00043E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000440 ED 51            [12]    7 	out	(c),d
      000442 14               [ 4]    8 	inc	d ; new line
      000443 AF               [ 4]    9 	xor	a,a ; write border
      000444 D3 98            [11]   10 	out	(#0x98),a
      000446 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000448 ED 51            [12]    2 	out	(c),d
      00044A D9               [ 4]    3 	exx
      00044B ED A3            [16]    4 	outi	; write data
      00044D D9               [ 4]    5 	exx
      00044E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000450 ED 51            [12]    7 	out	(c),d
      000452 14               [ 4]    8 	inc	d ; new line
      000453 AF               [ 4]    9 	xor	a,a ; write border
      000454 D3 98            [11]   10 	out	(#0x98),a
      000456 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000458 ED 51            [12]    2 	out	(c),d
      00045A D9               [ 4]    3 	exx
      00045B ED A3            [16]    4 	outi	; write data
      00045D D9               [ 4]    5 	exx
      00045E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000460 ED 51            [12]    7 	out	(c),d
      000462 14               [ 4]    8 	inc	d ; new line
      000463 AF               [ 4]    9 	xor	a,a ; write border
      000464 D3 98            [11]   10 	out	(#0x98),a
      000466 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000468 ED 51            [12]    2 	out	(c),d
      00046A D9               [ 4]    3 	exx
      00046B ED A3            [16]    4 	outi	; write data
      00046D D9               [ 4]    5 	exx
      00046E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000470 ED 51            [12]    7 	out	(c),d
      000472 14               [ 4]    8 	inc	d ; new line
      000473 AF               [ 4]    9 	xor	a,a ; write border
      000474 D3 98            [11]   10 	out	(#0x98),a
      000476 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000478 ED 51            [12]    2 	out	(c),d
      00047A D9               [ 4]    3 	exx
      00047B ED A3            [16]    4 	outi	; write data
      00047D D9               [ 4]    5 	exx
      00047E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000480 ED 51            [12]    7 	out	(c),d
      000482 14               [ 4]    8 	inc	d ; new line
      000483 AF               [ 4]    9 	xor	a,a ; write border
      000484 D3 98            [11]   10 	out	(#0x98),a
      000486 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000488 ED 51            [12]    2 	out	(c),d
      00048A D9               [ 4]    3 	exx
      00048B ED A3            [16]    4 	outi	; write data
      00048D D9               [ 4]    5 	exx
      00048E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000490 ED 51            [12]    7 	out	(c),d
      000492 14               [ 4]    8 	inc	d ; new line
      000493 AF               [ 4]    9 	xor	a,a ; write border
      000494 D3 98            [11]   10 	out	(#0x98),a
      000496 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000498 ED 51            [12]    2 	out	(c),d
      00049A D9               [ 4]    3 	exx
      00049B ED A3            [16]    4 	outi	; write data
      00049D D9               [ 4]    5 	exx
      00049E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004A0 ED 51            [12]    7 	out	(c),d
      0004A2 14               [ 4]    8 	inc	d ; new line
      0004A3 AF               [ 4]    9 	xor	a,a ; write border
      0004A4 D3 98            [11]   10 	out	(#0x98),a
      0004A6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004A8 ED 51            [12]    2 	out	(c),d
      0004AA D9               [ 4]    3 	exx
      0004AB ED A3            [16]    4 	outi	; write data
      0004AD D9               [ 4]    5 	exx
      0004AE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004B0 ED 51            [12]    7 	out	(c),d
      0004B2 14               [ 4]    8 	inc	d ; new line
      0004B3 AF               [ 4]    9 	xor	a,a ; write border
      0004B4 D3 98            [11]   10 	out	(#0x98),a
      0004B6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004B8 ED 51            [12]    2 	out	(c),d
      0004BA D9               [ 4]    3 	exx
      0004BB ED A3            [16]    4 	outi	; write data
      0004BD D9               [ 4]    5 	exx
      0004BE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004C0 ED 51            [12]    7 	out	(c),d
      0004C2 14               [ 4]    8 	inc	d ; new line
      0004C3 AF               [ 4]    9 	xor	a,a ; write border
      0004C4 D3 98            [11]   10 	out	(#0x98),a
      0004C6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004C8 ED 51            [12]    2 	out	(c),d
      0004CA D9               [ 4]    3 	exx
      0004CB ED A3            [16]    4 	outi	; write data
      0004CD D9               [ 4]    5 	exx
      0004CE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004D0 ED 51            [12]    7 	out	(c),d
      0004D2 14               [ 4]    8 	inc	d ; new line
      0004D3 AF               [ 4]    9 	xor	a,a ; write border
      0004D4 D3 98            [11]   10 	out	(#0x98),a
      0004D6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004D8 ED 51            [12]    2 	out	(c),d
      0004DA D9               [ 4]    3 	exx
      0004DB ED A3            [16]    4 	outi	; write data
      0004DD D9               [ 4]    5 	exx
      0004DE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004E0 ED 51            [12]    7 	out	(c),d
      0004E2 14               [ 4]    8 	inc	d ; new line
      0004E3 AF               [ 4]    9 	xor	a,a ; write border
      0004E4 D3 98            [11]   10 	out	(#0x98),a
                                    773 ;src\mytestrom.c:281: }
      0004E6 C9               [10]  774 	ret
                                    775 ;src\mytestrom.c:283: void BorderLinesL(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    776 ;	---------------------------------
                                    777 ; Function BorderLinesL
                                    778 ; ---------------------------------
      0004E7                        779 _BorderLinesL::
                                    780 ;src\mytestrom.c:387: __endasm;
      0004E7 C1               [10]  781 	pop	bc ; get ret address
      0004E8 D1               [10]  782 	pop	de ; de = MapX
      0004E9 C5               [11]  783 	push	bc ; save ret address
      0004EA 08               [ 4]  784 	ex	af,af'			; a' = ScrnX
      0004EB 7D               [ 4]  785 	ld	a,l ; l = page
      0004EC 87               [ 4]  786 	add	a,a
      0004ED 87               [ 4]  787 	add	a,a
      0004EE 32 ED FF         [13]  788 	ld	(_RG14SA),a
      0004F1 4B               [ 4]  789 	ld	c,e ; C = low(mapx)
      0004F2 CB 2A            [ 8]  790 	sra	d ; DE/16
      0004F4 CB 1B            [ 8]  791 	rr	e
      0004F6 CB 2A            [ 8]  792 	sra	d
      0004F8 CB 1B            [ 8]  793 	rr	e
      0004FA CB 2A            [ 8]  794 	sra	d
      0004FC CB 1B            [ 8]  795 	rr	e
      0004FE CB 2A            [ 8]  796 	sra	d
      000500 CB 1B            [ 8]  797 	rr	e
      000502 6B               [ 4]  798 	ld	l,e
      000503 62               [ 4]  799 	ld	h,d
      000504 29               [11]  800 	add	hl,hl
      000505 29               [11]  801 	add	hl,hl
      000506 19               [11]  802 	add	hl,de
      000507 29               [11]  803 	add	hl,hl
      000508 19               [11]  804 	add	hl,de ; DE/16 * 11
      000509 11r2Dr00         [10]  805 	ld	de,#_LevelMap
      00050C 19               [11]  806 	add	hl,de
      00050D 22r2Dr0B         [16]  807 	ld	(_p), hl
      000510 08               [ 4]  808 	ex	af,af'				; a' = ScrnX
      000511 5F               [ 4]  809 	ld	e,a ; DE vramm address for new border data
      000512 C6 F0            [ 7]  810 	add	a,#240 ; L = E +/- 240U according to the scroll direction
      000514 6F               [ 4]  811 	ld	l,a ; DL hold vramm address for blank border
      000515 79               [ 4]  812 	ld	a,c ; C = low(MapX)
      000516 E6 0F            [ 7]  813 	and	a,#15
      000518 87               [ 4]  814 	add	a,a
      000519 87               [ 4]  815 	add	a,a
      00051A 87               [ 4]  816 	add	a,a
      00051B 87               [ 4]  817 	add	a,a
      00051C D9               [ 4]  818 	exx
      00051D 57               [ 4]  819 	ld	d,a ; common offeset of the address in the tile
      00051E 0E 98            [ 7]  820 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      000520 D9               [ 4]  821 	exx
      000521 F3               [ 4]  822 	di
      000522 3A ED FF         [13]  823 	ld	a,(_RG14SA) ; set address in vdp(14)
      000525 D3 99            [11]  824 	out	(#0x99), a
      000527 3C               [ 4]  825 	inc	a
      000528 32 ED FF         [13]  826 	ld	(_RG14SA),a ; save next block
      00052B 3E 8E            [ 7]  827 	ld	a,#0x8E
      00052D D3 99            [11]  828 	out	(#0x99), a
      00052F 0E 99            [ 7]  829 	ld	c,#0x99
      000531 16 40            [ 7]  830 	ld	d,#0x40
      000533 CDrC7r03         [17]  831 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000536 CDrC7r03         [17]  832 	call	_PlotOneColumnTileAndMask
      000539 CDrC7r03         [17]  833 	call	_PlotOneColumnTileAndMask
      00053C CDrC7r03         [17]  834 	call	_PlotOneColumnTileAndMask
      00053F 3A ED FF         [13]  835 	ld	a,(_RG14SA) ; set address in vdp(14)
      000542 D3 99            [11]  836 	out	(#0x99), a
      000544 3C               [ 4]  837 	inc	a
      000545 32 ED FF         [13]  838 	ld	(_RG14SA),a ; save next block
      000548 3E 8E            [ 7]  839 	ld	a,#0x8E
      00054A D3 99            [11]  840 	out	(#0x99), a
      00054C 16 40            [ 7]  841 	ld	d,#0x40
      00054E CDrC7r03         [17]  842 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000551 CDrC7r03         [17]  843 	call	_PlotOneColumnTileAndMask
      000554 CDrC7r03         [17]  844 	call	_PlotOneColumnTileAndMask
      000557 CDrC7r03         [17]  845 	call	_PlotOneColumnTileAndMask
      00055A 3A ED FF         [13]  846 	ld	a,(_RG14SA) ; set address in vdp(14)
      00055D D3 99            [11]  847 	out	(#0x99), a
      00055F 3E 8E            [ 7]  848 	ld	a,#0x8E
      000561 D3 99            [11]  849 	out	(#0x99), a
      000563 16 40            [ 7]  850 	ld	d,#0x40
      000565 CDrC7r03         [17]  851 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      000568 CDrC7r03         [17]  852 	call	_PlotOneColumnTileAndMask
      00056B CDrC7r03         [17]  853 	call	_PlotOneColumnTileAndMask
      00056E FB               [ 4]  854 	ei
      00056F C9               [10]  855 	ret
                                    856 ;src\mytestrom.c:388: }
                                    857 ;src\mytestrom.c:390: void BorderLinesR(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    858 ;	---------------------------------
                                    859 ; Function BorderLinesR
                                    860 ; ---------------------------------
      000570                        861 _BorderLinesR::
                                    862 ;src\mytestrom.c:494: __endasm;
      000570 C1               [10]  863 	pop	bc ; get ret address
      000571 D1               [10]  864 	pop	de ; DE = MapX+240U
      000572 C5               [11]  865 	push	bc ; save ret address
      000573 08               [ 4]  866 	ex	af,af'			; a' = ScrnX
      000574 7D               [ 4]  867 	ld	a,l ; l = page
      000575 87               [ 4]  868 	add	a,a
      000576 87               [ 4]  869 	add	a,a
      000577 32 ED FF         [13]  870 	ld	(_RG14SA),a
      00057A 4B               [ 4]  871 	ld	c,e ; C = low(mapx)
      00057B CB 2A            [ 8]  872 	sra	d ; DE/16
      00057D CB 1B            [ 8]  873 	rr	e
      00057F CB 2A            [ 8]  874 	sra	d
      000581 CB 1B            [ 8]  875 	rr	e
      000583 CB 2A            [ 8]  876 	sra	d
      000585 CB 1B            [ 8]  877 	rr	e
      000587 CB 2A            [ 8]  878 	sra	d
      000589 CB 1B            [ 8]  879 	rr	e
      00058B 6B               [ 4]  880 	ld	l,e
      00058C 62               [ 4]  881 	ld	h,d
      00058D 29               [11]  882 	add	hl,hl
      00058E 29               [11]  883 	add	hl,hl
      00058F 19               [11]  884 	add	hl,de
      000590 29               [11]  885 	add	hl,hl
      000591 19               [11]  886 	add	hl,de ; DE/16 * 11
      000592 11r2Dr00         [10]  887 	ld	de,#_LevelMap
      000595 19               [11]  888 	add	hl,de
      000596 22r2Dr0B         [16]  889 	ld	(_p), hl
      000599 08               [ 4]  890 	ex	af,af'				; a' = ScrnX
      00059A 5F               [ 4]  891 	ld	e,a ; DE vramm address for new border data
      00059B D6 F0            [ 7]  892 	sub	a,#240 ; L = E +/- 240U according to the scroll direction
      00059D 6F               [ 4]  893 	ld	l,a ; DL hold vramm address for blank border
      00059E 79               [ 4]  894 	ld	a,c ; C = low(MapX)
      00059F E6 0F            [ 7]  895 	and	a,#15
      0005A1 87               [ 4]  896 	add	a,a
      0005A2 87               [ 4]  897 	add	a,a
      0005A3 87               [ 4]  898 	add	a,a
      0005A4 87               [ 4]  899 	add	a,a
      0005A5 D9               [ 4]  900 	exx
      0005A6 57               [ 4]  901 	ld	d,a ; common offeset of the address in the tile
      0005A7 0E 98            [ 7]  902 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      0005A9 D9               [ 4]  903 	exx
      0005AA F3               [ 4]  904 	di
      0005AB 3A ED FF         [13]  905 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005AE D3 99            [11]  906 	out	(#0x99), a
      0005B0 3C               [ 4]  907 	inc	a
      0005B1 32 ED FF         [13]  908 	ld	(_RG14SA),a ; save next block
      0005B4 3E 8E            [ 7]  909 	ld	a,#0x8E
      0005B6 D3 99            [11]  910 	out	(#0x99), a
      0005B8 0E 99            [ 7]  911 	ld	c,#0x99
      0005BA 16 40            [ 7]  912 	ld	d,#0x40
      0005BC CDrC7r03         [17]  913 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005BF CDrC7r03         [17]  914 	call	_PlotOneColumnTileAndMask
      0005C2 CDrC7r03         [17]  915 	call	_PlotOneColumnTileAndMask
      0005C5 CDrC7r03         [17]  916 	call	_PlotOneColumnTileAndMask
      0005C8 3A ED FF         [13]  917 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005CB D3 99            [11]  918 	out	(#0x99), a
      0005CD 3C               [ 4]  919 	inc	a
      0005CE 32 ED FF         [13]  920 	ld	(_RG14SA),a ; save next block
      0005D1 3E 8E            [ 7]  921 	ld	a,#0x8E
      0005D3 D3 99            [11]  922 	out	(#0x99), a
      0005D5 16 40            [ 7]  923 	ld	d,#0x40
      0005D7 CDrC7r03         [17]  924 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005DA CDrC7r03         [17]  925 	call	_PlotOneColumnTileAndMask
      0005DD CDrC7r03         [17]  926 	call	_PlotOneColumnTileAndMask
      0005E0 CDrC7r03         [17]  927 	call	_PlotOneColumnTileAndMask
      0005E3 3A ED FF         [13]  928 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005E6 D3 99            [11]  929 	out	(#0x99), a
      0005E8 3E 8E            [ 7]  930 	ld	a,#0x8E
      0005EA D3 99            [11]  931 	out	(#0x99), a
      0005EC 16 40            [ 7]  932 	ld	d,#0x40
      0005EE CDrC7r03         [17]  933 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      0005F1 CDrC7r03         [17]  934 	call	_PlotOneColumnTileAndMask
      0005F4 CDrC7r03         [17]  935 	call	_PlotOneColumnTileAndMask
      0005F7 FB               [ 4]  936 	ei
      0005F8 C9               [10]  937 	ret
                                    938 ;src\mytestrom.c:495: }
                                    939 ;src\mytestrom.c:497: void NewLine(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    940 ;	---------------------------------
                                    941 ; Function NewLine
                                    942 ; ---------------------------------
      0005F9                        943 _NewLine::
                                    944 ;src\mytestrom.c:606: __endasm;
      0005F9 C1               [10]  945 	pop	bc ; get ret address
      0005FA D1               [10]  946 	pop	de ; de = MapX
      0005FB C5               [11]  947 	push	bc ; save ret address
      0005FC 08               [ 4]  948 	ex	af,af'			; a' = ScrnX
      0005FD 7D               [ 4]  949 	ld	a,l ; l = page
      0005FE 87               [ 4]  950 	add	a,a
      0005FF 87               [ 4]  951 	add	a,a
      000600 32 ED FF         [13]  952 	ld	(_RG14SA),a
      000603 4B               [ 4]  953 	ld	c,e ; C = low(mapx)
      000604 CB 2A            [ 8]  954 	sra	d ; DE/16
      000606 CB 1B            [ 8]  955 	rr	e
      000608 CB 2A            [ 8]  956 	sra	d
      00060A CB 1B            [ 8]  957 	rr	e
      00060C CB 2A            [ 8]  958 	sra	d
      00060E CB 1B            [ 8]  959 	rr	e
      000610 CB 2A            [ 8]  960 	sra	d
      000612 CB 1B            [ 8]  961 	rr	e
      000614 6B               [ 4]  962 	ld	l,e
      000615 62               [ 4]  963 	ld	h,d
      000616 29               [11]  964 	add	hl,hl
      000617 29               [11]  965 	add	hl,hl
      000618 19               [11]  966 	add	hl,de
      000619 29               [11]  967 	add	hl,hl
      00061A 19               [11]  968 	add	hl,de ; DE/16 * 11
      00061B 11r2Dr00         [10]  969 	ld	de,#_LevelMap
      00061E 19               [11]  970 	add	hl,de
      00061F 22r2Dr0B         [16]  971 	ld	(_p), hl
      000622 08               [ 4]  972 	ex	af,af'			; a' = ScrnX
      000623 5F               [ 4]  973 	ld	e,a ; DE vramm address for new border data
      000624 79               [ 4]  974 	ld	a,c ; C = low(MapX)
      000625 E6 0F            [ 7]  975 	and	a,#15
      000627 87               [ 4]  976 	add	a,a
      000628 87               [ 4]  977 	add	a,a
      000629 87               [ 4]  978 	add	a,a
      00062A 87               [ 4]  979 	add	a,a
      00062B D9               [ 4]  980 	exx
      00062C 57               [ 4]  981 	ld	d,a ; common offeset of the address in the tile
      00062D 0E 98            [ 7]  982 	ld	c,#0x98 ; used by _PlotOneColumnTile
      00062F D9               [ 4]  983 	exx
      000630 F3               [ 4]  984 	di
      000631 3A ED FF         [13]  985 	ld	a,(_RG14SA) ; set address in vdp(14)
      000634 D3 99            [11]  986 	out	(#0x99), a
      000636 3C               [ 4]  987 	inc	a
      000637 32 ED FF         [13]  988 	ld	(_RG14SA),a ; save next block
      00063A 3E 8E            [ 7]  989 	ld	a,#0x8E
      00063C D3 99            [11]  990 	out	(#0x99), a
      00063E 0E 99            [ 7]  991 	ld	c,#0x99
      000640 16 40            [ 7]  992 	ld	d,#0x40
      000642 CDr17r03         [17]  993 	call	_PlotOneColumnTile ; 4 tiles
      000645 CDr17r03         [17]  994 	call	_PlotOneColumnTile
      000648 CDr17r03         [17]  995 	call	_PlotOneColumnTile
      00064B CDr17r03         [17]  996 	call	_PlotOneColumnTile
      00064E 3A ED FF         [13]  997 	ld	a,(_RG14SA) ; set address in vdp(14)
      000651 D3 99            [11]  998 	out	(#0x99), a
      000653 3C               [ 4]  999 	inc	a
      000654 32 ED FF         [13] 1000 	ld	(_RG14SA),a ; save next block
      000657 3E 8E            [ 7] 1001 	ld	a,#0x8E
      000659 D3 99            [11] 1002 	out	(#0x99), a
      00065B 16 40            [ 7] 1003 	ld	d,#0x40
      00065D CDr17r03         [17] 1004 	call	_PlotOneColumnTile ; 4 tiles
      000660 CDr17r03         [17] 1005 	call	_PlotOneColumnTile
      000663 CDr17r03         [17] 1006 	call	_PlotOneColumnTile
      000666 CDr17r03         [17] 1007 	call	_PlotOneColumnTile
      000669 3A ED FF         [13] 1008 	ld	a,(_RG14SA) ; set address in vdp(14)
      00066C D3 99            [11] 1009 	out	(#0x99), a
      00066E 3E 8E            [ 7] 1010 	ld	a,#0x8E
      000670 D3 99            [11] 1011 	out	(#0x99), a
      000672 16 40            [ 7] 1012 	ld	d,#0x40
      000674 CDr17r03         [17] 1013 	call	_PlotOneColumnTile ; 3 tiles
      000677 CDr17r03         [17] 1014 	call	_PlotOneColumnTile
      00067A CDr17r03         [17] 1015 	call	_PlotOneColumnTile
      00067D FB               [ 4] 1016 	ei
      00067E C9               [10] 1017 	ret
                                   1018 ;src\mytestrom.c:607: }
                                   1019 ;src\mytestrom.c:609: void PatchPlotOneTile(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                   1020 ;	---------------------------------
                                   1021 ; Function PatchPlotOneTile
                                   1022 ; ---------------------------------
      00067F                       1023 _PatchPlotOneTile::
                                   1024 ;src\mytestrom.c:692: __endasm;
      00067F C1               [10] 1025 	pop	bc ; get ret address
      000680 D1               [10] 1026 	pop	de ; DE = MapX
      000681 C5               [11] 1027 	push	bc ; save ret address
      000682 08               [ 4] 1028 	ex	af,af'			; a' = ScrnX
      000683 7D               [ 4] 1029 	ld	a,l ; l = page
      000684 87               [ 4] 1030 	add	a,a
      000685 87               [ 4] 1031 	add	a,a
      000686 32 ED FF         [13] 1032 	ld	(_RG14SA),a
      000689 4B               [ 4] 1033 	ld	c,e ; C = low(mapx)
      00068A CB 2A            [ 8] 1034 	sra	d ; DE/16
      00068C CB 1B            [ 8] 1035 	rr	e
      00068E CB 2A            [ 8] 1036 	sra	d
      000690 CB 1B            [ 8] 1037 	rr	e
      000692 CB 2A            [ 8] 1038 	sra	d
      000694 CB 1B            [ 8] 1039 	rr	e
      000696 CB 2A            [ 8] 1040 	sra	d
      000698 CB 1B            [ 8] 1041 	rr	e
      00069A 6B               [ 4] 1042 	ld	l,e
      00069B 62               [ 4] 1043 	ld	h,d
      00069C 29               [11] 1044 	add	hl,hl
      00069D 29               [11] 1045 	add	hl,hl
      00069E 19               [11] 1046 	add	hl,de
      00069F 29               [11] 1047 	add	hl,hl
      0006A0 19               [11] 1048 	add	hl,de ; DE/16 * 11
      0006A1 11r2Dr00         [10] 1049 	ld	de,#_LevelMap
      0006A4 19               [11] 1050 	add	hl,de
      0006A5 22r2Dr0B         [16] 1051 	ld	(_p), hl
      0006A8 08               [ 4] 1052 	ex	af,af'				; a' = ScrnX
      0006A9 5F               [ 4] 1053 	ld	e,a ; DE vramm address for new border data
      0006AA 79               [ 4] 1054 	ld	a,c ; C = low(MapX)
      0006AB E6 0F            [ 7] 1055 	and	a,#15
      0006AD 87               [ 4] 1056 	add	a,a
      0006AE 87               [ 4] 1057 	add	a,a
      0006AF 87               [ 4] 1058 	add	a,a
      0006B0 87               [ 4] 1059 	add	a,a
      0006B1 D9               [ 4] 1060 	exx
      0006B2 57               [ 4] 1061 	ld	d,a ; common offeset of the address in the tile
      0006B3 0E 98            [ 7] 1062 	ld	c,#0x98 ; used by _PlotOneColumnTile
      0006B5 D9               [ 4] 1063 	exx
      0006B6 F3               [ 4] 1064 	di
      0006B7 3A ED FF         [13] 1065 	ld	a,(_RG14SA) ; set address in vdp(14)
      0006BA D3 99            [11] 1066 	out	(#0x99), a
      0006BC 3E 8E            [ 7] 1067 	ld	a,#0x8E
      0006BE D3 99            [11] 1068 	out	(#0x99), a
      0006C0 16 40            [ 7] 1069 	ld	d,#0x40
      0006C2 0E 99            [ 7] 1070 	ld	c,#0x99
      0006C4 CDr17r03         [17] 1071 	call	_PlotOneColumnTile ; 1 tile
      0006C7 FB               [ 4] 1072 	ei
      0006C8 C9               [10] 1073 	ret
                                   1074 ;src\mytestrom.c:693: }
                                   1075 ;src\mytestrom.c:695: void 	myVDPwrite(char data, char vdpreg) __sdcccall(1) __naked
                                   1076 ;	---------------------------------
                                   1077 ; Function myVDPwrite
                                   1078 ; ---------------------------------
      0006C9                       1079 _myVDPwrite::
                                   1080 ;src\mytestrom.c:707: __endasm;
      0006C9 F3               [ 4] 1081 	di
      0006CA D3 99            [11] 1082 	out	(#0x99),a
      0006CC 3E 80            [ 7] 1083 	ld	a,#128
      0006CE B5               [ 4] 1084 	or	a,l
      0006CF D3 99            [11] 1085 	out	(#0x99),a ;R#A := L
      0006D1 FB               [ 4] 1086 	ei
      0006D2 C9               [10] 1087 	ret
                                   1088 ;src\mytestrom.c:709: }	
                                   1089 ;src\mytestrom.c:732: void  	myfVDP(void *Address)  __sdcccall(1)  __naked
                                   1090 ;	---------------------------------
                                   1091 ; Function myfVDP
                                   1092 ; ---------------------------------
      0006D3                       1093 _myfVDP::
                                   1094 ;src\mytestrom.c:764: __endasm;
      0006D3 F3               [ 4] 1095 	di
      0006D4 3E 20            [ 7] 1096 	ld	a,#32 ; Start with Reg 32
      0006D6 D3 99            [11] 1097 	out	(#0x99),a
      0006D8 3E 91            [ 7] 1098 	ld	a,#128+#17
      0006DA D3 99            [11] 1099 	out	(#0x99),a ;R#17 := 32
      0006DC 0E 9B            [ 7] 1100 	ld	c,#0x9b ; c=#0x9b
      0006DE                       1101 	fvdpWait:
      0006DE 3E 02            [ 7] 1102 	ld	a,#2
      0006E0 D3 99            [11] 1103 	out	(#0x99),a
      0006E2 3E 8F            [ 7] 1104 	ld	a,#128+#15
      0006E4 D3 99            [11] 1105 	out	(#0x99),a
      0006E6 DB 99            [11] 1106 	in	a,(#0x99)
      0006E8 0F               [ 4] 1107 	rrca
      0006E9 DArDEr06         [10] 1108 	jp	c, fvdpWait ; wait CE
                                   1109 	.rept	#15
                                   1110 	OUTI
                                   1111 	.endm
      0006EC ED A3            [16]    1 	OUTI
      0006EE ED A3            [16]    1 	OUTI
      0006F0 ED A3            [16]    1 	OUTI
      0006F2 ED A3            [16]    1 	OUTI
      0006F4 ED A3            [16]    1 	OUTI
      0006F6 ED A3            [16]    1 	OUTI
      0006F8 ED A3            [16]    1 	OUTI
      0006FA ED A3            [16]    1 	OUTI
      0006FC ED A3            [16]    1 	OUTI
      0006FE ED A3            [16]    1 	OUTI
      000700 ED A3            [16]    1 	OUTI
      000702 ED A3            [16]    1 	OUTI
      000704 ED A3            [16]    1 	OUTI
      000706 ED A3            [16]    1 	OUTI
      000708 ED A3            [16]    1 	OUTI
      00070A AF               [ 4] 1112 	xor	a,a ; set Status Register #0 for reading
      00070B D3 99            [11] 1113 	out	(#0x99),a
      00070D 3E 8F            [ 7] 1114 	ld	a,#0x8f
      00070F D3 99            [11] 1115 	out	(#0x99),a
      000711 FB               [ 4] 1116 	ei
      000712 C9               [10] 1117 	ret
                                   1118 ;src\mytestrom.c:765: }
                                   1119 ;src\mytestrom.c:817: void mySetAdjust(signed char x, signed char y) __sdcccall(1)
                                   1120 ;	---------------------------------
                                   1121 ; Function mySetAdjust
                                   1122 ; ---------------------------------
      000713                       1123 _mySetAdjust::
                                   1124 ;src\mytestrom.c:819: unsigned char value = ((x-8) & 15) | (((y-8) & 15)<<4);
      000713 C6 F8            [ 7] 1125 	add	a, #0xf8
      000715 E6 0F            [ 7] 1126 	and	a, #0x0f
      000717 4F               [ 4] 1127 	ld	c, a
      000718 7D               [ 4] 1128 	ld	a, l
      000719 C6 F8            [ 7] 1129 	add	a, #0xf8
      00071B E6 0F            [ 7] 1130 	and	a, #0x0f
      00071D 87               [ 4] 1131 	add	a, a
      00071E 87               [ 4] 1132 	add	a, a
      00071F 87               [ 4] 1133 	add	a, a
      000720 87               [ 4] 1134 	add	a, a
      000721 B1               [ 4] 1135 	or	a, c
      000722 4F               [ 4] 1136 	ld	c, a
                                   1137 ;src\mytestrom.c:820: RG18SA = value;			// Reg18 Save
      000723 FD 21 F1 FF      [14] 1138 	ld	iy, #_RG18SA
      000727 FD 71 00         [19] 1139 	ld	0 (iy), c
                                   1140 ;src\mytestrom.c:821: myVDPwrite(value,18);
      00072A 2E 12            [ 7] 1141 	ld	l, #0x12
                                   1142 ;	spillPairReg hl
                                   1143 ;	spillPairReg hl
      00072C 79               [ 4] 1144 	ld	a, c
                                   1145 ;src\mytestrom.c:822: }
      00072D C3rC9r06         [10] 1146 	jp	_myVDPwrite
                                   1147 ;src\mytestrom.c:829: void myFT_wait(unsigned char cicles) __sdcccall(1) __naked {
                                   1148 ;	---------------------------------
                                   1149 ; Function myFT_wait
                                   1150 ; ---------------------------------
      000730                       1151 _myFT_wait::
                                   1152 ;src\mytestrom.c:852: __endasm;
      000730 B7               [ 4] 1153 	or	a, a
      000731                       1154 	00004$:
      000731 C8               [11] 1155 	ret	Z
      000732 76               [ 4] 1156 	halt
      000733 3D               [ 4] 1157 	dec	a
      000734 C3r31r07         [10] 1158 	jp	00004$
                                   1159 ;src\mytestrom.c:853: }
                                   1160 ;src\mytestrom.c:855: void WaitLineInt(void) __sdcccall(1) __naked {
                                   1161 ;	---------------------------------
                                   1162 ; Function WaitLineInt
                                   1163 ; ---------------------------------
      000737                       1164 _WaitLineInt::
                                   1165 ;src\mytestrom.c:885: __endasm;
      000737 F3               [ 4] 1166 	di
      000738 3E 01            [ 7] 1167 	ld	a,#1 ; set Status Register #1 for reading
      00073A D3 99            [11] 1168 	out	(#0x99),a
      00073C 3E 8F            [ 7] 1169 	ld	a,#0x8f
      00073E D3 99            [11] 1170 	out	(#0x99),a
      000740                       1171 	WaitLI:
      000740 DB 99            [11] 1172 	in	a,(#0x99)
      000742 0F               [ 4] 1173 	rrca
      000743 30 FB            [12] 1174 	jr	nc,WaitLI
      000745 AF               [ 4] 1175 	xor	a,a ; set Status Register #0 for reading
      000746 D3 99            [11] 1176 	out	(#0x99),a
      000748 3E 8F            [ 7] 1177 	ld	a,#0x8f
      00074A D3 99            [11] 1178 	out	(#0x99),a
      00074C FB               [ 4] 1179 	ei
      00074D C9               [10] 1180 	ret
                                   1181 ;src\mytestrom.c:886: }
                                   1182 ;src\mytestrom.c:918: void FT_errorHandler(char n, char *name) __sdcccall(1) 
                                   1183 ;	---------------------------------
                                   1184 ; Function FT_errorHandler
                                   1185 ; ---------------------------------
      00074E                       1186 _FT_errorHandler::
      00074E 4F               [ 4] 1187 	ld	c, a
                                   1188 ;src\mytestrom.c:925: chgmod(0);
      00074F C5               [11] 1189 	push	bc
      000750 D5               [11] 1190 	push	de
      000751 AF               [ 4] 1191 	xor	a, a
      000752 CDrAFr0B         [17] 1192 	call	_chgmod
      000755 D1               [10] 1193 	pop	de
      000756 C1               [10] 1194 	pop	bc
                                   1195 ;src\mytestrom.c:927: switch (n)
      000757 79               [ 4] 1196 	ld	a, c
      000758 3D               [ 4] 1197 	dec	a
      000759 28 12            [12] 1198 	jr	Z, 00101$
      00075B 79               [ 4] 1199 	ld	a, c
      00075C D6 02            [ 7] 1200 	sub	a, #0x02
      00075E 28 1C            [12] 1201 	jr	Z, 00102$
      000760 79               [ 4] 1202 	ld	a, c
      000761 D6 03            [ 7] 1203 	sub	a, #0x03
      000763 28 26            [12] 1204 	jr	Z, 00103$
      000765 79               [ 4] 1205 	ld	a, c
      000766 D6 04            [ 7] 1206 	sub	a, #0x04
      000768 28 2A            [12] 1207 	jr	Z, 00104$
      00076A C3rA0r07         [10] 1208 	jp	00105$
                                   1209 ;src\mytestrom.c:929: case 1:
      00076D                       1210 00101$:
                                   1211 ;src\mytestrom.c:930: Print("\n\rFAILED: fcb_open(): ");
      00076D D5               [11] 1212 	push	de
      00076E 21rA2r07         [10] 1213 	ld	hl, #___str_1
      000771 CDr54r0C         [17] 1214 	call	_Print
      000774 D1               [10] 1215 	pop	de
                                   1216 ;src\mytestrom.c:931: Print(name);
      000775 EB               [ 4] 1217 	ex	de, hl
      000776 CDr54r0C         [17] 1218 	call	_Print
                                   1219 ;src\mytestrom.c:932: break;
      000779 C3rA0r07         [10] 1220 	jp	00105$
                                   1221 ;src\mytestrom.c:934: case 2:
      00077C                       1222 00102$:
                                   1223 ;src\mytestrom.c:935: Print("\n\rFAILED: fcb_close():");
      00077C D5               [11] 1224 	push	de
      00077D 21rB9r07         [10] 1225 	ld	hl, #___str_2
      000780 CDr54r0C         [17] 1226 	call	_Print
      000783 D1               [10] 1227 	pop	de
                                   1228 ;src\mytestrom.c:936: Print(name);
      000784 EB               [ 4] 1229 	ex	de, hl
      000785 CDr54r0C         [17] 1230 	call	_Print
                                   1231 ;src\mytestrom.c:937: break;  
      000788 C3rA0r07         [10] 1232 	jp	00105$
                                   1233 ;src\mytestrom.c:939: case 3:
      00078B                       1234 00103$:
                                   1235 ;src\mytestrom.c:940: Print("\n\rStop Kidding, run me on MSX2 !");
      00078B 21rD0r07         [10] 1236 	ld	hl, #___str_3
      00078E CDr54r0C         [17] 1237 	call	_Print
                                   1238 ;src\mytestrom.c:941: break;
      000791 C3rA0r07         [10] 1239 	jp	00105$
                                   1240 ;src\mytestrom.c:943: case 4:
      000794                       1241 00104$:
                                   1242 ;src\mytestrom.c:944: Print("\n\rUnespected end of file:");
      000794 D5               [11] 1243 	push	de
      000795 21rF1r07         [10] 1244 	ld	hl, #___str_4
      000798 CDr54r0C         [17] 1245 	call	_Print
      00079B D1               [10] 1246 	pop	de
                                   1247 ;src\mytestrom.c:945: Print(name);		  
      00079C EB               [ 4] 1248 	ex	de, hl
      00079D CDr54r0C         [17] 1249 	call	_Print
                                   1250 ;src\mytestrom.c:947: }
      0007A0                       1251 00105$:
                                   1252 ;src\mytestrom.c:948: Reboot(0);
      0007A0 C7               [11] 1253 	rst	#0
                                   1254 ;src\mytestrom.c:949: }
      0007A1 C9               [10] 1255 	ret
      0007A2                       1256 ___str_1:
      0007A2 0A                    1257 	.db 0x0a
      0007A3 0D                    1258 	.db 0x0d
      0007A4 46 41 49 4C 45 44 3A  1259 	.ascii "FAILED: fcb_open(): "
             20 66 63 62 5F 6F 70
             65 6E 28 29 3A 20
      0007B8 00                    1260 	.db 0x00
      0007B9                       1261 ___str_2:
      0007B9 0A                    1262 	.db 0x0a
      0007BA 0D                    1263 	.db 0x0d
      0007BB 46 41 49 4C 45 44 3A  1264 	.ascii "FAILED: fcb_close():"
             20 66 63 62 5F 63 6C
             6F 73 65 28 29 3A
      0007CF 00                    1265 	.db 0x00
      0007D0                       1266 ___str_3:
      0007D0 0A                    1267 	.db 0x0a
      0007D1 0D                    1268 	.db 0x0d
      0007D2 53 74 6F 70 20 4B 69  1269 	.ascii "Stop Kidding, run me on MSX2 !"
             64 64 69 6E 67 2C 20
             72 75 6E 20 6D 65 20
             6F 6E 20 4D 53 58 32
             20 21
      0007F0 00                    1270 	.db 0x00
      0007F1                       1271 ___str_4:
      0007F1 0A                    1272 	.db 0x0a
      0007F2 0D                    1273 	.db 0x0d
      0007F3 55 6E 65 73 70 65 63  1274 	.ascii "Unespected end of file:"
             74 65 64 20 65 6E 64
             20 6F 66 20 66 69 6C
             65 3A
      00080A 00                    1275 	.db 0x00
                                   1276 ;src\mytestrom.c:951: void MyLoadMap(char mapnumber,unsigned char* p ) __sdcccall(1)
                                   1277 ;	---------------------------------
                                   1278 ; Function MyLoadMap
                                   1279 ; ---------------------------------
      00080B                       1280 _MyLoadMap::
                                   1281 ;src\mytestrom.c:955: LevelW = ((char*)DataLevelMap)[0];
      00080B 01r0Cr1D         [10] 1282 	ld	bc, #_DataLevelMap
      00080E 0A               [ 7] 1283 	ld	a, (bc)
      00080F 32r21r00         [13] 1284 	ld	(_LevelW+0), a
                                   1285 ;src\mytestrom.c:956: LevelH = ((char*)DataLevelMap)[1];
      000812 69               [ 4] 1286 	ld	l, c
                                   1287 ;	spillPairReg hl
                                   1288 ;	spillPairReg hl
      000813 60               [ 4] 1289 	ld	h, b
                                   1290 ;	spillPairReg hl
                                   1291 ;	spillPairReg hl
      000814 23               [ 6] 1292 	inc	hl
      000815 7E               [ 7] 1293 	ld	a, (hl)
      000816 32r22r00         [13] 1294 	ld	(_LevelH+0), a
                                   1295 ;src\mytestrom.c:957: memcpy(p,&((char*)DataLevelMap)[2],MaxLevelW*MaxLevelH);
                                   1296 ;	spillPairReg hl
                                   1297 ;	spillPairReg hl
      000819 69               [ 4] 1298 	ld	l, c
      00081A 60               [ 4] 1299 	ld	h, b
      00081B 23               [ 6] 1300 	inc	hl
      00081C 23               [ 6] 1301 	inc	hl
                                   1302 ;	spillPairReg hl
                                   1303 ;	spillPairReg hl
      00081D 01 00 0B         [10] 1304 	ld	bc, #0x0b00
      000820 ED B0            [21] 1305 	ldir
                                   1306 ;src\mytestrom.c:958: }
      000822 C9               [10] 1307 	ret
                                   1308 ;src\mytestrom.c:960: void myISR(void) __sdcccall(1) __naked
                                   1309 ;	---------------------------------
                                   1310 ; Function myISR
                                   1311 ; ---------------------------------
      000823                       1312 _myISR::
                                   1313 ;src\mytestrom.c:999: __endasm;
      000823 F5               [11] 1314 	push	af
      000824 AF               [ 4] 1315 	xor	a,a ; set Status Register #0 for reading
      000825 D3 99            [11] 1316 	out	(#0x99),a
      000827 3E 8F            [ 7] 1317 	ld	a,#0x8f
      000829 D3 99            [11] 1318 	out	(#0x99),a
      00082B DB 99            [11] 1319 	in	a,(#0x99) ; mimimum ISR
      00082D 3Ar2Cr00         [13] 1320 	ld	a,(#_cursat)
      000830 A7               [ 4] 1321 	and	a,a
      000831 3E 03            [ 7] 1322 	ld	a,#3
      000833 20 02            [12] 1323 	jr	nz,setsat1
      000835 3E 01            [ 7] 1324 	ld	a,#1
      000837                       1325 	setsat1:
      000837 D3 99            [11] 1326 	out	(#0x99),a
      000839 3E 8B            [ 7] 1327 	ld	a,#128+#11
      00083B D3 99            [11] 1328 	out	(#0x99),a
      00083D F1               [10] 1329 	pop	af
      00083E FB               [ 4] 1330 	ei
      00083F C9               [10] 1331 	ret
                                   1332 ;src\mytestrom.c:1000: }
                                   1333 ;src\mytestrom.c:1002: void myInstISR(void) __sdcccall(1) __naked
                                   1334 ;	---------------------------------
                                   1335 ; Function myInstISR
                                   1336 ; ---------------------------------
      000840                       1337 _myInstISR::
                                   1338 ;src\mytestrom.c:1004: myVDPwrite(WindowH-8,19); // indagare sul glitch !!! xxx
      000840 2E 13            [ 7] 1339 	ld	l, #0x13
                                   1340 ;	spillPairReg hl
                                   1341 ;	spillPairReg hl
      000842 3E A8            [ 7] 1342 	ld	a, #0xa8
      000844 CDrC9r06         [17] 1343 	call	_myVDPwrite
                                   1344 ;src\mytestrom.c:1020: __endasm;
      000847 21 9A FD         [10] 1345 	ld	hl,#0xFD9A
      00084A 11r29r00         [10] 1346 	ld	de,#_OldIsr
      00084D 01 03 00         [10] 1347 	ld	bc,#3
      000850 ED B0            [21] 1348 	ldir
      000852 F3               [ 4] 1349 	di
      000853 3E C3            [ 7] 1350 	ld	a,#0xC3
      000855 32 9A FD         [13] 1351 	ld	(#0xFD9A+#0),a
      000858 21r23r08         [10] 1352 	ld	hl,#_myISR
      00085B 22 9B FD         [16] 1353 	ld	(#0xFD9A+#1),hl
      00085E FB               [ 4] 1354 	ei
      00085F C9               [10] 1355 	ret
                                   1356 ;src\mytestrom.c:1021: }
                                   1357 ;src\mytestrom.c:1023: void myISRrestore(void) __sdcccall(1) __naked
                                   1358 ;	---------------------------------
                                   1359 ; Function myISRrestore
                                   1360 ; ---------------------------------
      000860                       1361 _myISRrestore::
                                   1362 ;src\mytestrom.c:1025: RG0SAV &= 0xEF;
      000860 3A DF F3         [13] 1363 	ld	a, (_RG0SAV+0)
      000863 E6 EF            [ 7] 1364 	and	a, #0xef
      000865 32 DF F3         [13] 1365 	ld	(_RG0SAV+0), a
                                   1366 ;src\mytestrom.c:1026: myVDPwrite(RG0SAV,0);
      000868 2E 00            [ 7] 1367 	ld	l, #0x00
                                   1368 ;	spillPairReg hl
                                   1369 ;	spillPairReg hl
      00086A 3A DF F3         [13] 1370 	ld	a, (_RG0SAV+0)
      00086D CDrC9r06         [17] 1371 	call	_myVDPwrite
                                   1372 ;src\mytestrom.c:1036: __endasm;
      000870 21r29r00         [10] 1373 	ld	hl,#_OldIsr
      000873 11 9A FD         [10] 1374 	ld	de,#0xFD9A
      000876 01 03 00         [10] 1375 	ld	bc,#3
      000879 F3               [ 4] 1376 	di
      00087A ED B0            [21] 1377 	ldir
      00087C FB               [ 4] 1378 	ei
      00087D C9               [10] 1379 	ret
                                   1380 ;src\mytestrom.c:1037: }
                                   1381 ;src\mytestrom.c:1041: unsigned char myCheckkbd(unsigned char nrow) __sdcccall(1) __naked
                                   1382 ;	---------------------------------
                                   1383 ; Function myCheckkbd
                                   1384 ; ---------------------------------
      00087E                       1385 _myCheckkbd::
                                   1386 ;src\mytestrom.c:1067: __endasm;
                                   1387 ;
                                   1388 ;
                                   1389 ;
                                   1390 ;
                                   1391 ;
                                   1392 ;
                                   1393 ;
                                   1394 ;
                                   1395 ;
                                   1396 ;
                                   1397 ;	checkkbd:
      00087E 5F               [ 4] 1398 	ld	e,a
      00087F F3               [ 4] 1399 	di
      000880 DB AA            [11] 1400 	in	a,(#0xaa)
      000882 E6 F0            [ 7] 1401 	and	a,#0b11110000 ; upper 4 bits contain info to preserve
      000884 B3               [ 4] 1402 	or	a,e
      000885 D3 AA            [11] 1403 	out	(#0xaa),a
      000887 DB A9            [11] 1404 	in	a,(#0xa9)
      000889 6F               [ 4] 1405 	ld	l,a
      00088A FB               [ 4] 1406 	ei
      00088B C9               [10] 1407 	ret
                                   1408 ;src\mytestrom.c:1068: }
                                   1409 ;src\mytestrom.c:1079: void ObjectsInit(void) {
                                   1410 ;	---------------------------------
                                   1411 ; Function ObjectsInit
                                   1412 ; ---------------------------------
      00088C                       1413 _ObjectsInit::
      00088C DD E5            [15] 1414 	push	ix
      00088E DD 21 00 00      [14] 1415 	ld	ix,#0
      000892 DD 39            [15] 1416 	add	ix,sp
      000894 F5               [11] 1417 	push	af
      000895 3B               [ 6] 1418 	dec	sp
                                   1419 ;src\mytestrom.c:1081: for (t=0;t<MaxObjNum;t++)
      000896 DD 36 FF 00      [19] 1420 	ld	-1 (ix), #0x00
      00089A                       1421 00102$:
                                   1422 ;src\mytestrom.c:1083: object[t].x = t*LevelW*4/MaxObjNum + WindowW/2;
      00089A DD 4E FF         [19] 1423 	ld	c, -1 (ix)
      00089D 06 00            [ 7] 1424 	ld	b, #0x00
      00089F 69               [ 4] 1425 	ld	l, c
      0008A0 60               [ 4] 1426 	ld	h, b
      0008A1 29               [11] 1427 	add	hl, hl
      0008A2 09               [11] 1428 	add	hl, bc
      0008A3 29               [11] 1429 	add	hl, hl
      0008A4 09               [11] 1430 	add	hl, bc
      0008A5 EB               [ 4] 1431 	ex	de, hl
      0008A6 21r2Fr0B         [10] 1432 	ld	hl, #_object
      0008A9 19               [11] 1433 	add	hl, de
      0008AA EB               [ 4] 1434 	ex	de, hl
      0008AB 33               [ 6] 1435 	inc	sp
      0008AC 33               [ 6] 1436 	inc	sp
      0008AD D5               [11] 1437 	push	de
      0008AE D5               [11] 1438 	push	de
      0008AF 3Ar21r00         [13] 1439 	ld	a, (#_LevelW + 0)
      0008B2 5F               [ 4] 1440 	ld	e, a
      0008B3 DD 66 FF         [19] 1441 	ld	h, -1 (ix)
                                   1442 ;	spillPairReg hl
                                   1443 ;	spillPairReg hl
      0008B6 2E 00            [ 7] 1444 	ld	l, #0x00
      0008B8 55               [ 4] 1445 	ld	d, l
      0008B9 06 08            [ 7] 1446 	ld	b, #0x08
      0008BB                       1447 00125$:
      0008BB 29               [11] 1448 	add	hl, hl
      0008BC 30 01            [12] 1449 	jr	NC, 00126$
      0008BE 19               [11] 1450 	add	hl, de
      0008BF                       1451 00126$:
      0008BF 10 FA            [13] 1452 	djnz	00125$
      0008C1 D1               [10] 1453 	pop	de
      0008C2 29               [11] 1454 	add	hl, hl
      0008C3 29               [11] 1455 	add	hl, hl
                                   1456 ;	spillPairReg hl
                                   1457 ;	spillPairReg hl
      0008C4 4D               [ 4] 1458 	ld	c,l
      0008C5 44               [ 4] 1459 	ld	b,h
                                   1460 ;	spillPairReg hl
                                   1461 ;	spillPairReg hl
      0008C6 CB 78            [ 8] 1462 	bit	7, b
      0008C8 28 04            [12] 1463 	jr	Z, 00106$
      0008CA 21 07 00         [10] 1464 	ld	hl, #0x0007
      0008CD 09               [11] 1465 	add	hl, bc
      0008CE                       1466 00106$:
      0008CE CB 2C            [ 8] 1467 	sra	h
      0008D0 CB 1D            [ 8] 1468 	rr	l
      0008D2 CB 2C            [ 8] 1469 	sra	h
      0008D4 CB 1D            [ 8] 1470 	rr	l
      0008D6 CB 2C            [ 8] 1471 	sra	h
      0008D8 CB 1D            [ 8] 1472 	rr	l
      0008DA 7D               [ 4] 1473 	ld	a, l
      0008DB 44               [ 4] 1474 	ld	b, h
      0008DC C6 78            [ 7] 1475 	add	a, #0x78
      0008DE 4F               [ 4] 1476 	ld	c, a
      0008DF 30 01            [12] 1477 	jr	NC, 00127$
      0008E1 04               [ 4] 1478 	inc	b
      0008E2                       1479 00127$:
      0008E2 E1               [10] 1480 	pop	hl
      0008E3 E5               [11] 1481 	push	hl
      0008E4 71               [ 7] 1482 	ld	(hl), c
      0008E5 23               [ 6] 1483 	inc	hl
      0008E6 70               [ 7] 1484 	ld	(hl), b
                                   1485 ;src\mytestrom.c:1084: object[t].y = (t & 1) ? LevelH*16-32 : 0;
      0008E7 6B               [ 4] 1486 	ld	l, e
                                   1487 ;	spillPairReg hl
                                   1488 ;	spillPairReg hl
      0008E8 62               [ 4] 1489 	ld	h, d
                                   1490 ;	spillPairReg hl
                                   1491 ;	spillPairReg hl
      0008E9 23               [ 6] 1492 	inc	hl
      0008EA 23               [ 6] 1493 	inc	hl
      0008EB DD CB FF 46      [20] 1494 	bit	0, -1 (ix)
      0008EF 28 1A            [12] 1495 	jr	Z, 00107$
      0008F1 3Ar22r00         [13] 1496 	ld	a, (_LevelH+0)
      0008F4 0E 00            [ 7] 1497 	ld	c, #0x00
      0008F6 87               [ 4] 1498 	add	a, a
      0008F7 CB 11            [ 8] 1499 	rl	c
      0008F9 87               [ 4] 1500 	add	a, a
      0008FA CB 11            [ 8] 1501 	rl	c
      0008FC 87               [ 4] 1502 	add	a, a
      0008FD CB 11            [ 8] 1503 	rl	c
      0008FF 87               [ 4] 1504 	add	a, a
      000900 CB 11            [ 8] 1505 	rl	c
      000902 C6 E0            [ 7] 1506 	add	a, #0xe0
      000904 47               [ 4] 1507 	ld	b, a
      000905 79               [ 4] 1508 	ld	a, c
      000906 CE FF            [ 7] 1509 	adc	a, #0xff
      000908 C3r0Dr09         [10] 1510 	jp	00108$
      00090B                       1511 00107$:
      00090B AF               [ 4] 1512 	xor	a, a
      00090C 47               [ 4] 1513 	ld	b, a
      00090D                       1514 00108$:
      00090D 70               [ 7] 1515 	ld	(hl), b
      00090E 23               [ 6] 1516 	inc	hl
      00090F 77               [ 7] 1517 	ld	(hl), a
                                   1518 ;src\mytestrom.c:1085: object[t].frame = t;
      000910 21 05 00         [10] 1519 	ld	hl, #0x0005
      000913 19               [11] 1520 	add	hl, de
      000914 DD 7E FF         [19] 1521 	ld	a, -1 (ix)
      000917 77               [ 7] 1522 	ld	(hl), a
                                   1523 ;src\mytestrom.c:1086: object[t].status = 255;		// 0 is for inactive
      000918 21 06 00         [10] 1524 	ld	hl, #0x0006
      00091B 19               [11] 1525 	add	hl, de
      00091C 36 FF            [10] 1526 	ld	(hl), #0xff
                                   1527 ;src\mytestrom.c:1081: for (t=0;t<MaxObjNum;t++)
      00091E DD 34 FF         [23] 1528 	inc	-1 (ix)
      000921 DD 7E FF         [19] 1529 	ld	a, -1 (ix)
      000924 D6 08            [ 7] 1530 	sub	a, #0x08
      000926 DAr9Ar08         [10] 1531 	jp	C, 00102$
                                   1532 ;src\mytestrom.c:1088: }
      000929 DD F9            [10] 1533 	ld	sp, ix
      00092B DD E1            [14] 1534 	pop	ix
      00092D C9               [10] 1535 	ret
                                   1536 ;src\mytestrom.c:1096: void ObjectstoVRAM(int MapX) __sdcccall(1)
                                   1537 ;	---------------------------------
                                   1538 ; Function ObjectstoVRAM
                                   1539 ; ---------------------------------
      00092E                       1540 _ObjectstoVRAM::
      00092E DD E5            [15] 1541 	push	ix
      000930 DD 21 00 00      [14] 1542 	ld	ix,#0
      000934 DD 39            [15] 1543 	add	ix,sp
      000936 F5               [11] 1544 	push	af
      000937 F5               [11] 1545 	push	af
      000938 3B               [ 6] 1546 	dec	sp
      000939 DD 75 FD         [19] 1547 	ld	-3 (ix), l
      00093C DD 74 FE         [19] 1548 	ld	-2 (ix), h
                                   1549 ;src\mytestrom.c:1105: if (cursat==0) {
      00093F 3Ar2Cr00         [13] 1550 	ld	a, (_cursat+0)
      000942 B7               [ 4] 1551 	or	a, a
      000943 20 0D            [12] 1552 	jr	NZ, 00102$
                                   1553 ;src\mytestrom.c:1106: SetVramW(0,0xFA00);	// sat 0
      000945 11 00 FA         [10] 1554 	ld	de, #0xfa00
      000948 AF               [ 4] 1555 	xor	a, a
      000949 CDr92r0B         [17] 1556 	call	_SetVramW
                                   1557 ;src\mytestrom.c:1107: q = &object[MaxObjNum-1];
      00094C 11r60r0B         [10] 1558 	ld	de, #_object+49
      00094F C3r5Dr09         [10] 1559 	jp	00122$
      000952                       1560 00102$:
                                   1561 ;src\mytestrom.c:1110: SetVramW(1,0xFA00);	// sat 1		
      000952 11 00 FA         [10] 1562 	ld	de, #0xfa00
      000955 3E 01            [ 7] 1563 	ld	a, #0x01
      000957 CDr92r0B         [17] 1564 	call	_SetVramW
                                   1565 ;src\mytestrom.c:1111: q = &object[0];		
      00095A 11r2Fr0B         [10] 1566 	ld	de, #_object
                                   1567 ;src\mytestrom.c:1115: for (t=0; t<MaxObjNum; t++) 
      00095D                       1568 00122$:
      00095D DD 36 FF 00      [19] 1569 	ld	-1 (ix), #0x00
      000961                       1570 00113$:
                                   1571 ;src\mytestrom.c:1118: u = q->x-(((unsigned int) MapX) & 0xFFF0);
      000961 6B               [ 4] 1572 	ld	l, e
      000962 62               [ 4] 1573 	ld	h, d
      000963 4E               [ 7] 1574 	ld	c, (hl)
      000964 23               [ 6] 1575 	inc	hl
      000965 46               [ 7] 1576 	ld	b, (hl)
      000966 DD 7E FD         [19] 1577 	ld	a, -3 (ix)
      000969 DD 6E FE         [19] 1578 	ld	l, -2 (ix)
                                   1579 ;	spillPairReg hl
                                   1580 ;	spillPairReg hl
      00096C E6 F0            [ 7] 1581 	and	a, #0xf0
      00096E DD 77 FB         [19] 1582 	ld	-5 (ix), a
      000971 DD 75 FC         [19] 1583 	ld	-4 (ix), l
      000974 21r67r0B         [10] 1584 	ld	hl, #_u
      000977 79               [ 4] 1585 	ld	a, c
      000978 DD 96 FB         [19] 1586 	sub	a, -5 (ix)
      00097B 77               [ 7] 1587 	ld	(hl), a
      00097C 78               [ 4] 1588 	ld	a, b
      00097D DD 9E FC         [19] 1589 	sbc	a, -4 (ix)
      000980 23               [ 6] 1590 	inc	hl
      000981 77               [ 7] 1591 	ld	(hl), a
                                   1592 ;src\mytestrom.c:1119: y = q->y;
      000982 4B               [ 4] 1593 	ld	c, e
      000983 42               [ 4] 1594 	ld	b, d
      000984 03               [ 6] 1595 	inc	bc
      000985 03               [ 6] 1596 	inc	bc
      000986 0A               [ 7] 1597 	ld	a, (bc)
      000987 32r69r0B         [13] 1598 	ld	(_y+0), a
                                   1599 ;src\mytestrom.c:1120: x = u;
      00098A 3Ar67r0B         [13] 1600 	ld	a, (_u+0)
      00098D 32r6Ar0B         [13] 1601 	ld	(_x+0), a
                                   1602 ;src\mytestrom.c:1121: v = q->frame<<4;
      000990 D5               [11] 1603 	push	de
      000991 FD E1            [14] 1604 	pop	iy
      000993 FD 7E 05         [19] 1605 	ld	a, 5 (iy)
      000996 87               [ 4] 1606 	add	a, a
      000997 87               [ 4] 1607 	add	a, a
      000998 87               [ 4] 1608 	add	a, a
      000999 87               [ 4] 1609 	add	a, a
      00099A 32r6Br0B         [13] 1610 	ld	(_v+0), a
                                   1611 ;src\mytestrom.c:1123: if (q->status && (q->x - MapX >= 0) && (q->x - MapX < WindowW-16)) 
      00099D D5               [11] 1612 	push	de
      00099E FD E1            [14] 1613 	pop	iy
      0009A0 FD 7E 06         [19] 1614 	ld	a, 6 (iy)
      0009A3 B7               [ 4] 1615 	or	a, a
      0009A4 CAr12r0A         [10] 1616 	jp	Z, 00105$
      0009A7 6B               [ 4] 1617 	ld	l, e
      0009A8 62               [ 4] 1618 	ld	h, d
      0009A9 4E               [ 7] 1619 	ld	c, (hl)
      0009AA 23               [ 6] 1620 	inc	hl
      0009AB 46               [ 7] 1621 	ld	b, (hl)
      0009AC 79               [ 4] 1622 	ld	a, c
      0009AD DD 96 FD         [19] 1623 	sub	a, -3 (ix)
      0009B0 4F               [ 4] 1624 	ld	c, a
      0009B1 78               [ 4] 1625 	ld	a, b
      0009B2 DD 9E FE         [19] 1626 	sbc	a, -2 (ix)
      0009B5 47               [ 4] 1627 	ld	b, a
      0009B6 CB 78            [ 8] 1628 	bit	7, b
      0009B8 C2r12r0A         [10] 1629 	jp	NZ, 00105$
      0009BB 79               [ 4] 1630 	ld	a, c
      0009BC D6 E0            [ 7] 1631 	sub	a, #0xe0
      0009BE 78               [ 4] 1632 	ld	a, b
      0009BF DE 00            [ 7] 1633 	sbc	a, #0x00
      0009C1 D2r12r0A         [10] 1634 	jp	NC, 00105$
                                   1635 ;src\mytestrom.c:1155: __endasm;
      0009C4 0E 98            [ 7] 1636 	ld	c,#0x98
                                   1637 	.rept	2
                                   1638 	ld	hl,#_y
                                   1639 	outi
                                   1640 	outi
                                   1641 	outi
                                   1642 	ld	a, (_v)
                                   1643 	out	(#0x98),a
                                   1644 	add	a, #4
                                   1645 	ld	(_v),a
                                   1646 	.endm
      0009C6 21r69r0B         [10]    1 	ld	hl,#_y
      0009C9 ED A3            [16]    2 	outi
      0009CB ED A3            [16]    3 	outi
      0009CD ED A3            [16]    4 	outi
      0009CF 3Ar6Br0B         [13]    5 	ld	a, (_v)
      0009D2 D3 98            [11]    6 	out	(#0x98),a
      0009D4 C6 04            [ 7]    7 	add	a, #4
      0009D6 32r6Br0B         [13]    8 	ld	(_v),a
      0009D9 21r69r0B         [10]    1 	ld	hl,#_y
      0009DC ED A3            [16]    2 	outi
      0009DE ED A3            [16]    3 	outi
      0009E0 ED A3            [16]    4 	outi
      0009E2 3Ar6Br0B         [13]    5 	ld	a, (_v)
      0009E5 D3 98            [11]    6 	out	(#0x98),a
      0009E7 C6 04            [ 7]    7 	add	a, #4
      0009E9 32r6Br0B         [13]    8 	ld	(_v),a
      0009EC 21r69r0B         [10] 1647 	ld	hl,#_y
      0009EF 3E 10            [ 7] 1648 	ld	a,#16
      0009F1 86               [ 7] 1649 	add	a,(hl)
      0009F2 77               [ 7] 1650 	ld	(hl),a
      0009F3 ED A3            [16] 1651 	outi
      0009F5 ED A3            [16] 1652 	outi
      0009F7 ED A3            [16] 1653 	outi
      0009F9 3Ar6Br0B         [13] 1654 	ld	a,(_v)
      0009FC D3 98            [11] 1655 	out	(#0x98),a
      0009FE C6 04            [ 7] 1656 	add	a, #4
      000A00 32r6Br0B         [13] 1657 	ld	(_v),a
      000A03 21r69r0B         [10] 1658 	ld	hl,#_y
      000A06 ED A3            [16] 1659 	outi
      000A08 ED A3            [16] 1660 	outi
      000A0A ED A3            [16] 1661 	outi
      000A0C 00               [ 4] 1662 	nop
      000A0D D3 98            [11] 1663 	out	(#0x98),a
      000A0F C3r44r0A         [10] 1664 	jp	00106$
      000A12                       1665 00105$:
                                   1666 ;src\mytestrom.c:1164: __endasm;
      000A12 3E D9            [ 7] 1667 	ld	a,#217
                                   1668 	.rept	16
                                   1669 	out	(#0x98),a
                                   1670 	nop
                                   1671 	.endm
      000A14 D3 98            [11]    1 	out	(#0x98),a
      000A16 00               [ 4]    2 	nop
      000A17 D3 98            [11]    1 	out	(#0x98),a
      000A19 00               [ 4]    2 	nop
      000A1A D3 98            [11]    1 	out	(#0x98),a
      000A1C 00               [ 4]    2 	nop
      000A1D D3 98            [11]    1 	out	(#0x98),a
      000A1F 00               [ 4]    2 	nop
      000A20 D3 98            [11]    1 	out	(#0x98),a
      000A22 00               [ 4]    2 	nop
      000A23 D3 98            [11]    1 	out	(#0x98),a
      000A25 00               [ 4]    2 	nop
      000A26 D3 98            [11]    1 	out	(#0x98),a
      000A28 00               [ 4]    2 	nop
      000A29 D3 98            [11]    1 	out	(#0x98),a
      000A2B 00               [ 4]    2 	nop
      000A2C D3 98            [11]    1 	out	(#0x98),a
      000A2E 00               [ 4]    2 	nop
      000A2F D3 98            [11]    1 	out	(#0x98),a
      000A31 00               [ 4]    2 	nop
      000A32 D3 98            [11]    1 	out	(#0x98),a
      000A34 00               [ 4]    2 	nop
      000A35 D3 98            [11]    1 	out	(#0x98),a
      000A37 00               [ 4]    2 	nop
      000A38 D3 98            [11]    1 	out	(#0x98),a
      000A3A 00               [ 4]    2 	nop
      000A3B D3 98            [11]    1 	out	(#0x98),a
      000A3D 00               [ 4]    2 	nop
      000A3E D3 98            [11]    1 	out	(#0x98),a
      000A40 00               [ 4]    2 	nop
      000A41 D3 98            [11]    1 	out	(#0x98),a
      000A43 00               [ 4]    2 	nop
      000A44                       1672 00106$:
                                   1673 ;src\mytestrom.c:1166: if (cursat==0) {
      000A44 3Ar2Cr00         [13] 1674 	ld	a, (_cursat+0)
      000A47 B7               [ 4] 1675 	or	a, a
      000A48 20 0B            [12] 1676 	jr	NZ, 00110$
                                   1677 ;src\mytestrom.c:1167: q--;
      000A4A 7B               [ 4] 1678 	ld	a, e
      000A4B C6 F9            [ 7] 1679 	add	a, #0xf9
      000A4D 5F               [ 4] 1680 	ld	e, a
      000A4E 7A               [ 4] 1681 	ld	a, d
      000A4F CE FF            [ 7] 1682 	adc	a, #0xff
      000A51 57               [ 4] 1683 	ld	d, a
      000A52 C3r5Ar0A         [10] 1684 	jp	00114$
      000A55                       1685 00110$:
                                   1686 ;src\mytestrom.c:1170: q++;
      000A55 21 07 00         [10] 1687 	ld	hl, #0x0007
      000A58 19               [11] 1688 	add	hl, de
      000A59 EB               [ 4] 1689 	ex	de, hl
      000A5A                       1690 00114$:
                                   1691 ;src\mytestrom.c:1115: for (t=0; t<MaxObjNum; t++) 
      000A5A DD 34 FF         [23] 1692 	inc	-1 (ix)
      000A5D DD 7E FF         [19] 1693 	ld	a, -1 (ix)
      000A60 D6 08            [ 7] 1694 	sub	a, #0x08
      000A62 DAr61r09         [10] 1695 	jp	C, 00113$
                                   1696 ;src\mytestrom.c:1176: }
      000A65 DD F9            [10] 1697 	ld	sp, ix
      000A67 DD E1            [14] 1698 	pop	ix
      000A69 C9               [10] 1699 	ret
                                   1700 ;src\mytestrom.c:1235: void UpdateColor(char plane,char frame,char nsat) __sdcccall(1){
                                   1701 ;	---------------------------------
                                   1702 ; Function UpdateColor
                                   1703 ; ---------------------------------
      000A6A                       1704 _UpdateColor::
      000A6A DD E5            [15] 1705 	push	ix
      000A6C DD 21 00 00      [14] 1706 	ld	ix,#0
      000A70 DD 39            [15] 1707 	add	ix,sp
      000A72 5F               [ 4] 1708 	ld	e, a
                                   1709 ;src\mytestrom.c:1238: SetVramW(1,0xF800+plane*16);
      000A73 16 00            [ 7] 1710 	ld	d, #0x00
      000A75 EB               [ 4] 1711 	ex	de, hl
      000A76 29               [11] 1712 	add	hl, hl
      000A77 29               [11] 1713 	add	hl, hl
      000A78 29               [11] 1714 	add	hl, hl
      000A79 29               [11] 1715 	add	hl, hl
      000A7A EB               [ 4] 1716 	ex	de, hl
      000A7B 7A               [ 4] 1717 	ld	a, d
      000A7C C6 F8            [ 7] 1718 	add	a, #0xf8
      000A7E 57               [ 4] 1719 	ld	d, a
                                   1720 ;src\mytestrom.c:1237: if (nsat)
      000A7F DD 7E 04         [19] 1721 	ld	a, 4 (ix)
      000A82 B7               [ 4] 1722 	or	a, a
      000A83 28 0A            [12] 1723 	jr	Z, 00102$
                                   1724 ;src\mytestrom.c:1238: SetVramW(1,0xF800+plane*16);
      000A85 E5               [11] 1725 	push	hl
      000A86 3E 01            [ 7] 1726 	ld	a, #0x01
      000A88 CDr92r0B         [17] 1727 	call	_SetVramW
      000A8B E1               [10] 1728 	pop	hl
      000A8C C3r95r0A         [10] 1729 	jp	00103$
      000A8F                       1730 00102$:
                                   1731 ;src\mytestrom.c:1240: SetVramW(0,0xF800+plane*16);
      000A8F E5               [11] 1732 	push	hl
      000A90 AF               [ 4] 1733 	xor	a, a
      000A91 CDr92r0B         [17] 1734 	call	_SetVramW
      000A94 E1               [10] 1735 	pop	hl
      000A95                       1736 00103$:
                                   1737 ;src\mytestrom.c:1242: VramWrite(((unsigned int) &sprite_colors) + frame*64,64);
      000A95 01r8Cr17         [10] 1738 	ld	bc, #_sprite_colors
      000A98 26 00            [ 7] 1739 	ld	h, #0x00
                                   1740 ;	spillPairReg hl
                                   1741 ;	spillPairReg hl
      000A9A 29               [11] 1742 	add	hl, hl
      000A9B 29               [11] 1743 	add	hl, hl
      000A9C 29               [11] 1744 	add	hl, hl
      000A9D 29               [11] 1745 	add	hl, hl
      000A9E 29               [11] 1746 	add	hl, hl
      000A9F 29               [11] 1747 	add	hl, hl
      000AA0 09               [11] 1748 	add	hl, bc
      000AA1 11 40 00         [10] 1749 	ld	de, #0x0040
      000AA4 CDr88r0B         [17] 1750 	call	_VramWrite
                                   1751 ;src\mytestrom.c:1243: }
      000AA7 DD E1            [14] 1752 	pop	ix
      000AA9 E1               [10] 1753 	pop	hl
      000AAA 33               [ 6] 1754 	inc	sp
      000AAB E9               [ 4] 1755 	jp	(hl)
                                   1756 ;src\mytestrom.c:1245: void UpdateFrame(char plane,char frame,char nsat) __sdcccall(1){
                                   1757 ;	---------------------------------
                                   1758 ; Function UpdateFrame
                                   1759 ; ---------------------------------
      000AAC                       1760 _UpdateFrame::
      000AAC DD E5            [15] 1761 	push	ix
      000AAE DD 21 00 00      [14] 1762 	ld	ix,#0
      000AB2 DD 39            [15] 1763 	add	ix,sp
      000AB4 5F               [ 4] 1764 	ld	e, a
                                   1765 ;src\mytestrom.c:1248: SetVramW(0,0xF000+plane*32);
      000AB5 16 00            [ 7] 1766 	ld	d, #0x00
      000AB7 EB               [ 4] 1767 	ex	de, hl
      000AB8 29               [11] 1768 	add	hl, hl
      000AB9 29               [11] 1769 	add	hl, hl
      000ABA 29               [11] 1770 	add	hl, hl
      000ABB 29               [11] 1771 	add	hl, hl
      000ABC 29               [11] 1772 	add	hl, hl
      000ABD EB               [ 4] 1773 	ex	de, hl
                                   1774 ;src\mytestrom.c:1247: if (nsat)
      000ABE DD 7E 04         [19] 1775 	ld	a, 4 (ix)
      000AC1 B7               [ 4] 1776 	or	a, a
      000AC2 28 0D            [12] 1777 	jr	Z, 00102$
                                   1778 ;src\mytestrom.c:1248: SetVramW(0,0xF000+plane*32);
      000AC4 7A               [ 4] 1779 	ld	a, d
      000AC5 C6 F0            [ 7] 1780 	add	a, #0xf0
      000AC7 57               [ 4] 1781 	ld	d, a
      000AC8 E5               [11] 1782 	push	hl
      000AC9 AF               [ 4] 1783 	xor	a, a
      000ACA CDr92r0B         [17] 1784 	call	_SetVramW
      000ACD E1               [10] 1785 	pop	hl
      000ACE C3rDBr0A         [10] 1786 	jp	00103$
      000AD1                       1787 00102$:
                                   1788 ;src\mytestrom.c:1250: SetVramW(0,0xF000+32*32+plane*32);
      000AD1 7A               [ 4] 1789 	ld	a, d
      000AD2 C6 F4            [ 7] 1790 	add	a, #0xf4
      000AD4 57               [ 4] 1791 	ld	d, a
      000AD5 E5               [11] 1792 	push	hl
      000AD6 AF               [ 4] 1793 	xor	a, a
      000AD7 CDr92r0B         [17] 1794 	call	_SetVramW
      000ADA E1               [10] 1795 	pop	hl
      000ADB                       1796 00103$:
                                   1797 ;src\mytestrom.c:1252: VramWrite(((unsigned int) &sprite_patterns) + frame*128,128);
      000ADB 01r8Cr0C         [10] 1798 	ld	bc, #_sprite_patterns
      000ADE AF               [ 4] 1799 	xor	a, a
      000ADF CB 1F            [ 8] 1800 	rr	a
      000AE1 65               [ 4] 1801 	ld	h, l
      000AE2 CB 1C            [ 8] 1802 	rr	h
      000AE4 1F               [ 4] 1803 	rra
      000AE5 6F               [ 4] 1804 	ld	l, a
      000AE6 09               [11] 1805 	add	hl, bc
      000AE7 11 80 00         [10] 1806 	ld	de, #0x0080
      000AEA CDr88r0B         [17] 1807 	call	_VramWrite
                                   1808 ;src\mytestrom.c:1253: }
      000AED DD E1            [14] 1809 	pop	ix
      000AEF E1               [10] 1810 	pop	hl
      000AF0 33               [ 6] 1811 	inc	sp
      000AF1 E9               [ 4] 1812 	jp	(hl)
                                   1813 ;src\mytestrom.c:1308: void SprtInit(void) __sdcccall(1) 
                                   1814 ;	---------------------------------
                                   1815 ; Function SprtInit
                                   1816 ; ---------------------------------
      000AF2                       1817 _SprtInit::
                                   1818 ;src\mytestrom.c:1312: RG1SAV |= 2;
      000AF2 3A E0 F3         [13] 1819 	ld	a, (_RG1SAV+0)
      000AF5 F6 02            [ 7] 1820 	or	a, #0x02
      000AF7 32 E0 F3         [13] 1821 	ld	(_RG1SAV+0), a
                                   1822 ;src\mytestrom.c:1313: myVDPwrite(RG1SAV,1);
      000AFA 2E 01            [ 7] 1823 	ld	l, #0x01
                                   1824 ;	spillPairReg hl
                                   1825 ;	spillPairReg hl
      000AFC 3A E0 F3         [13] 1826 	ld	a, (_RG1SAV+0)
      000AFF CDrC9r06         [17] 1827 	call	_myVDPwrite
                                   1828 ;src\mytestrom.c:1314: RG8SAV |= 32;
      000B02 3A E7 FF         [13] 1829 	ld	a, (_RG8SAV+0)
      000B05 F6 20            [ 7] 1830 	or	a, #0x20
      000B07 32 E7 FF         [13] 1831 	ld	(_RG8SAV+0), a
                                   1832 ;src\mytestrom.c:1315: myVDPwrite(RG8SAV,8);
      000B0A 2E 08            [ 7] 1833 	ld	l, #0x08
                                   1834 ;	spillPairReg hl
                                   1835 ;	spillPairReg hl
      000B0C 3A E7 FF         [13] 1836 	ld	a, (_RG8SAV+0)
      000B0F CDrC9r06         [17] 1837 	call	_myVDPwrite
                                   1838 ;src\mytestrom.c:1317: SetVramW(0,0xF800);					// sat 0
      000B12 11 00 F8         [10] 1839 	ld	de, #0xf800
      000B15 AF               [ 4] 1840 	xor	a, a
      000B16 CDr92r0B         [17] 1841 	call	_SetVramW
                                   1842 ;src\mytestrom.c:1318: for (t=0; t<MaxObjNum; t++) {
      000B19 0E 00            [ 7] 1843 	ld	c, #0x00
      000B1B                       1844 00104$:
                                   1845 ;src\mytestrom.c:1319: VramWrite(((unsigned int) &sprite_colors) + (MaxObjNum-1-t)*64,64);
      000B1B 11r8Cr17         [10] 1846 	ld	de, #_sprite_colors
      000B1E 69               [ 4] 1847 	ld	l, c
                                   1848 ;	spillPairReg hl
                                   1849 ;	spillPairReg hl
      000B1F 26 00            [ 7] 1850 	ld	h, #0x00
                                   1851 ;	spillPairReg hl
                                   1852 ;	spillPairReg hl
      000B21 3E 07            [ 7] 1853 	ld	a, #0x07
      000B23 95               [ 4] 1854 	sub	a, l
      000B24 6F               [ 4] 1855 	ld	l, a
                                   1856 ;	spillPairReg hl
                                   1857 ;	spillPairReg hl
      000B25 9F               [ 4] 1858 	sbc	a, a
      000B26 94               [ 4] 1859 	sub	a, h
      000B27 67               [ 4] 1860 	ld	h, a
      000B28 29               [11] 1861 	add	hl, hl
      000B29 29               [11] 1862 	add	hl, hl
      000B2A 29               [11] 1863 	add	hl, hl
      000B2B 29               [11] 1864 	add	hl, hl
      000B2C 29               [11] 1865 	add	hl, hl
      000B2D 29               [11] 1866 	add	hl, hl
      000B2E 19               [11] 1867 	add	hl, de
      000B2F C5               [11] 1868 	push	bc
      000B30 11 40 00         [10] 1869 	ld	de, #0x0040
      000B33 CDr88r0B         [17] 1870 	call	_VramWrite
      000B36 C1               [10] 1871 	pop	bc
                                   1872 ;src\mytestrom.c:1318: for (t=0; t<MaxObjNum; t++) {
      000B37 0C               [ 4] 1873 	inc	c
      000B38 79               [ 4] 1874 	ld	a, c
      000B39 D6 08            [ 7] 1875 	sub	a, #0x08
      000B3B 38 DE            [12] 1876 	jr	C, 00104$
                                   1877 ;src\mytestrom.c:1322: SetVramW(1,0xF800);					// sat 1
      000B3D 11 00 F8         [10] 1878 	ld	de, #0xf800
      000B40 3E 01            [ 7] 1879 	ld	a, #0x01
      000B42 CDr92r0B         [17] 1880 	call	_SetVramW
                                   1881 ;src\mytestrom.c:1323: for (t=0; t<MaxObjNum; t++) {
      000B45 0E 00            [ 7] 1882 	ld	c, #0x00
      000B47                       1883 00106$:
                                   1884 ;src\mytestrom.c:1324: VramWrite(((unsigned int) &sprite_colors) + t*64,64);
      000B47 11r8Cr17         [10] 1885 	ld	de, #_sprite_colors
      000B4A 69               [ 4] 1886 	ld	l, c
                                   1887 ;	spillPairReg hl
                                   1888 ;	spillPairReg hl
      000B4B 26 00            [ 7] 1889 	ld	h, #0x00
                                   1890 ;	spillPairReg hl
                                   1891 ;	spillPairReg hl
      000B4D 29               [11] 1892 	add	hl, hl
      000B4E 29               [11] 1893 	add	hl, hl
      000B4F 29               [11] 1894 	add	hl, hl
      000B50 29               [11] 1895 	add	hl, hl
      000B51 29               [11] 1896 	add	hl, hl
      000B52 29               [11] 1897 	add	hl, hl
      000B53 19               [11] 1898 	add	hl, de
      000B54 C5               [11] 1899 	push	bc
      000B55 11 40 00         [10] 1900 	ld	de, #0x0040
      000B58 CDr88r0B         [17] 1901 	call	_VramWrite
      000B5B C1               [10] 1902 	pop	bc
                                   1903 ;src\mytestrom.c:1323: for (t=0; t<MaxObjNum; t++) {
      000B5C 0C               [ 4] 1904 	inc	c
      000B5D 79               [ 4] 1905 	ld	a, c
      000B5E D6 08            [ 7] 1906 	sub	a, #0x08
      000B60 38 E5            [12] 1907 	jr	C, 00106$
                                   1908 ;src\mytestrom.c:1327: SetVramW(0,0xF000);					// sprite patterns	
      000B62 11 00 F0         [10] 1909 	ld	de, #0xf000
      000B65 AF               [ 4] 1910 	xor	a, a
      000B66 CDr92r0B         [17] 1911 	call	_SetVramW
                                   1912 ;src\mytestrom.c:1328: for (t=0; t<MaxObjNum; t++) {	
      000B69 0E 00            [ 7] 1913 	ld	c, #0x00
      000B6B                       1914 00108$:
                                   1915 ;src\mytestrom.c:1329: VramWrite(((unsigned int) &sprite_patterns) + t*128,128);
      000B6B 11r8Cr0C         [10] 1916 	ld	de, #_sprite_patterns
      000B6E 69               [ 4] 1917 	ld	l, c
                                   1918 ;	spillPairReg hl
                                   1919 ;	spillPairReg hl
                                   1920 ;	spillPairReg hl
                                   1921 ;	spillPairReg hl
      000B6F AF               [ 4] 1922 	xor	a, a
      000B70 67               [ 4] 1923 	ld	h, a
      000B71 CB 1C            [ 8] 1924 	rr	h
      000B73 65               [ 4] 1925 	ld	h, l
      000B74 CB 1C            [ 8] 1926 	rr	h
      000B76 1F               [ 4] 1927 	rra
      000B77 6F               [ 4] 1928 	ld	l, a
                                   1929 ;	spillPairReg hl
                                   1930 ;	spillPairReg hl
      000B78 19               [11] 1931 	add	hl, de
      000B79 C5               [11] 1932 	push	bc
      000B7A 11 80 00         [10] 1933 	ld	de, #0x0080
      000B7D CDr88r0B         [17] 1934 	call	_VramWrite
      000B80 C1               [10] 1935 	pop	bc
                                   1936 ;src\mytestrom.c:1328: for (t=0; t<MaxObjNum; t++) {	
      000B81 0C               [ 4] 1937 	inc	c
      000B82 79               [ 4] 1938 	ld	a, c
      000B83 D6 08            [ 7] 1939 	sub	a, #0x08
      000B85 38 E4            [12] 1940 	jr	C, 00108$
                                   1941 ;src\mytestrom.c:1331: }
      000B87 C9               [10] 1942 	ret
                                   1943 ;src\mytestrom.c:1333: void VramWrite(unsigned int addr, unsigned int len) __sdcccall(1) __naked
                                   1944 ;	---------------------------------
                                   1945 ; Function VramWrite
                                   1946 ; ---------------------------------
      000B88                       1947 _VramWrite::
                                   1948 ;src\mytestrom.c:1346: __endasm;		
      000B88 0E 98            [ 7] 1949 	ld	c,#0x98
      000B8A                       1950 	095$:
      000B8A ED A3            [16] 1951 	outi
      000B8C 1B               [ 6] 1952 	dec	de
      000B8D 7A               [ 4] 1953 	ld	a,d
      000B8E B3               [ 4] 1954 	or	a,e
      000B8F 20 F9            [12] 1955 	jr	nz,095$
      000B91 C9               [10] 1956 	ret
                                   1957 ;src\mytestrom.c:1347: }
                                   1958 ;src\mytestrom.c:1349: void SetVramW(char page, unsigned int addr) __sdcccall(1) __naked {
                                   1959 ;	---------------------------------
                                   1960 ; Function SetVramW
                                   1961 ; ---------------------------------
      000B92                       1962 _SetVramW::
                                   1963 ;src\mytestrom.c:1374: __endasm;		
                                   1964 ;	Set VDP address counter to write from address ADE (17-bit)
                                   1965 ;	Enables the interrupts
      000B92 EB               [ 4] 1966 	ex	de,hl
      000B93 CB 04            [ 8] 1967 	rlc	h
      000B95 17               [ 4] 1968 	rla
      000B96 CB 04            [ 8] 1969 	rlc	h
      000B98 17               [ 4] 1970 	rla
      000B99 CB 3C            [ 8] 1971 	srl	h
      000B9B CB 3C            [ 8] 1972 	srl	h
      000B9D F3               [ 4] 1973 	di
      000B9E D3 99            [11] 1974 	out	(#0x99),a
      000BA0 3E 8E            [ 7] 1975 	ld	a,#0x8E
      000BA2 D3 99            [11] 1976 	out	(#0x99),a
      000BA4 7D               [ 4] 1977 	ld	a,l
      000BA5 D3 99            [11] 1978 	out	(#0x99),a
      000BA7 7C               [ 4] 1979 	ld	a,h
      000BA8 F6 40            [ 7] 1980 	or	a,#0x40
      000BAA FB               [ 4] 1981 	ei
      000BAB D3 99            [11] 1982 	out	(#0x99),a
      000BAD EB               [ 4] 1983 	ex	de,hl
      000BAE C9               [10] 1984 	ret
                                   1985 ;src\mytestrom.c:1375: }
                                   1986 ;src\mytestrom.c:1378: void chgmod(char c) __sdcccall(1) __naked {
                                   1987 ;	---------------------------------
                                   1988 ; Function chgmod
                                   1989 ; ---------------------------------
      000BAF                       1990 _chgmod::
                                   1991 ;src\mytestrom.c:1382: __endasm;
      000BAF C3 5F 00         [10] 1992 	jp	0x005f
                                   1993 ;src\mytestrom.c:1383: }
                                   1994 ;src\mytestrom.c:1385: void putch(char c) __sdcccall(1) __naked {
                                   1995 ;	---------------------------------
                                   1996 ; Function putch
                                   1997 ; ---------------------------------
      000BB2                       1998 _putch::
                                   1999 ;src\mytestrom.c:1389: __endasm;
      000BB2 C3 A2 00         [10] 2000 	jp	0x00a2
                                   2001 ;src\mytestrom.c:1390: }
                                   2002 ;src\mytestrom.c:1393: void	myHMMV( unsigned int DX, unsigned int DY, unsigned int NX, unsigned int NY, char COL) __sdcccall(0) __naked
                                   2003 ;	---------------------------------
                                   2004 ; Function myHMMV
                                   2005 ; ---------------------------------
      000BB5                       2006 _myHMMV::
                                   2007 ;src\mytestrom.c:1456: __endasm;
                                   2008 ;****************************************************************
                                   2009 ;	HMMV painting the rectangle in high speed Eric
                                   2010 ;	void HMMV( unsigned int XS, unsigned int YS, unsigned int DX, unsigned int DY, char COL);
                                   2011 ;
                                   2012 ;****************************************************************
      000BB5 DD E5            [15] 2013 	push	ix
      000BB7 DD 21 00 00      [14] 2014 	ld	ix,#0
      000BBB DD 39            [15] 2015 	add	ix,sp
      000BBD F3               [ 4] 2016 	di
      000BBE CDr75r0C         [17] 2017 	call	_myVDPready
      000BC1 3E 24            [ 7] 2018 	ld	a,#36
      000BC3 D3 99            [11] 2019 	out	(#0x99),a
      000BC5 3E 91            [ 7] 2020 	ld	a,#128+#17
      000BC7 D3 99            [11] 2021 	out	(#0x99),a ;R#17 := 36
      000BC9 0E 9B            [ 7] 2022 	ld	c,#0x9b
      000BCB DD 7E 04         [19] 2023 	ld	a,4(ix) ;
      000BCE ED 79            [12] 2024 	out	(c),a ; R36 DX low byte
      000BD0 DD 7E 05         [19] 2025 	ld	a,5(ix) ;
      000BD3 ED 79            [12] 2026 	out	(c),a ; R37 DX high byte
      000BD5 DD 7E 06         [19] 2027 	ld	a,6(ix) ;
      000BD8 ED 79            [12] 2028 	out	(c),a ; R38 DY low byte
      000BDA DD 7E 07         [19] 2029 	ld	a,7(ix) ;
      000BDD ED 79            [12] 2030 	out	(c),a ; R39 DY high byte
      000BDF DD 7E 08         [19] 2031 	ld	a,8(ix) ;
      000BE2 ED 79            [12] 2032 	out	(c),a ; R40 NX low byte
      000BE4 DD 7E 09         [19] 2033 	ld	a,9(ix) ;
      000BE7 ED 79            [12] 2034 	out	(c),a ; R41 NX high byte
      000BE9 DD 7E 0A         [19] 2035 	ld	a,10(ix) ;
      000BEC ED 79            [12] 2036 	out	(c),a ; R42 NY low byte
      000BEE DD 7E 0B         [19] 2037 	ld	a,11(ix) ;
      000BF1 ED 79            [12] 2038 	out	(c),a ; R43 NY high byte
      000BF3 DD 7E 0C         [19] 2039 	ld	a,12(ix) ;
      000BF6 ED 79            [12] 2040 	out	(c),a ; R44 COL low byte
      000BF8 AF               [ 4] 2041 	xor	a ;
      000BF9 ED 79            [12] 2042 	out	(c),a ; R45 DIX and DIY ! DX and DY express in incremental direction ! internal VRAM
      000BFB F6 C0            [ 7] 2043 	or	#0b11000000 ;HMMV command
      000BFD ED 79            [12] 2044 	out	(c),a ;do it
      000BFF FB               [ 4] 2045 	ei
      000C00 DD E1            [14] 2046 	pop	ix
      000C02 C9               [10] 2047 	ret
                                   2048 ;src\mytestrom.c:1457: }
                                   2049 ;src\mytestrom.c:1460: void SetDisplayPage(char n) __z88dk_fastcall
                                   2050 ;	---------------------------------
                                   2051 ; Function SetDisplayPage
                                   2052 ; ---------------------------------
      000C03                       2053 _SetDisplayPage::
                                   2054 ;src\mytestrom.c:1487: __endasm;
                                   2055 ;----------------------------
                                   2056 ;	void SetDisplayPage(char n)
                                   2057 ;	MSX2 Show the specified VRAM Page at Screen
                                   2058 ;
      000C03 7D               [ 4] 2059 	ld	a,l
      000C04 17               [ 4] 2060 	rla
      000C05 17               [ 4] 2061 	rla
      000C06 17               [ 4] 2062 	rla
      000C07 17               [ 4] 2063 	rla
      000C08 17               [ 4] 2064 	rla
      000C09 E6 7F            [ 7] 2065 	and	#0x7F
      000C0B F6 1F            [ 7] 2066 	or	#0x1F
      000C0D 47               [ 4] 2067 	ld	b,a
      000C0E 3E 02            [ 7] 2068 	ld	a,#2
      000C10 F6 80            [ 7] 2069 	or	#0x80
      000C12 0E 99            [ 7] 2070 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C14 F3               [ 4] 2071 	di
      000C15 ED 41            [12] 2072 	out	(c), b ;; out data
      000C17 ED 79            [12] 2073 	out	(c), a ;; out VDP register number
      000C19 FB               [ 4] 2074 	ei
      000C1A 32 F5 FA         [13] 2075 	ld	(#0xFAF5),a ;; DPPAGE
                                   2076 ;src\mytestrom.c:1488: }
      000C1D C9               [10] 2077 	ret
                                   2078 ;src\mytestrom.c:1493: void VDPlineSwitch(void) 
                                   2079 ;	---------------------------------
                                   2080 ; Function VDPlineSwitch
                                   2081 ; ---------------------------------
      000C1E                       2082 _VDPlineSwitch::
                                   2083 ;src\mytestrom.c:1504: __endasm;
      000C1E 3A E8 FF         [13] 2084 	ld	a,(#_RG9SAV)
      000C21 EE 80            [ 7] 2085 	xor	a,#0b10000000
      000C23 32 E8 FF         [13] 2086 	ld	(#_RG9SAV),a
      000C26 47               [ 4] 2087 	ld	b,a
      000C27 3E 89            [ 7] 2088 	ld	a,#0x89
      000C29 0E 99            [ 7] 2089 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C2B ED 41            [12] 2090 	out	(c), b ;; out data
      000C2D ED 79            [12] 2091 	out	(c), a ;; out VDP register number
                                   2092 ;src\mytestrom.c:1505: }
      000C2F C9               [10] 2093 	ret
                                   2094 ;src\mytestrom.c:1507: void VDP60Hz(void)
                                   2095 ;	---------------------------------
                                   2096 ; Function VDP60Hz
                                   2097 ; ---------------------------------
      000C30                       2098 _VDP60Hz::
                                   2099 ;src\mytestrom.c:1518: __endasm;
      000C30 3A E8 FF         [13] 2100 	ld	a,(#_RG9SAV)
      000C33 E6 FD            [ 7] 2101 	and	#0b11111101
      000C35 32 E8 FF         [13] 2102 	ld	(#_RG9SAV),a
      000C38 47               [ 4] 2103 	ld	b,a
      000C39 3E 89            [ 7] 2104 	ld	a,#0x89
      000C3B 0E 99            [ 7] 2105 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C3D ED 41            [12] 2106 	out	(c), b ;; out data
      000C3F ED 79            [12] 2107 	out	(c), a ;; out VDP register number
                                   2108 ;src\mytestrom.c:1519: }
      000C41 C9               [10] 2109 	ret
                                   2110 ;src\mytestrom.c:1521: void PrintChar(char c) 
                                   2111 ;	---------------------------------
                                   2112 ; Function PrintChar
                                   2113 ; ---------------------------------
      000C42                       2114 _PrintChar::
                                   2115 ;src\mytestrom.c:1532: __endasm;
      000C42 DD E5            [15] 2116 	push	ix
      000C44 DD 21 00 00      [14] 2117 	ld	ix,#0
      000C48 DD 39            [15] 2118 	add	ix,sp
      000C4A DD 7E 04         [19] 2119 	ld	a,4(ix)
      000C4D CD A2 00         [17] 2120 	call	#0xA2 ; Bios CHPUT
      000C50 FB               [ 4] 2121 	ei
      000C51 DD E1            [14] 2122 	pop	ix
                                   2123 ;src\mytestrom.c:1533: }
      000C53 C9               [10] 2124 	ret
                                   2125 ;src\mytestrom.c:1562: void Print(char* text)
                                   2126 ;	---------------------------------
                                   2127 ; Function Print
                                   2128 ; ---------------------------------
      000C54                       2129 _Print::
                                   2130 ;src\mytestrom.c:1566: while(*(text)) 
      000C54                       2131 00104$:
      000C54 7E               [ 7] 2132 	ld	a, (hl)
      000C55 B7               [ 4] 2133 	or	a, a
      000C56 C8               [11] 2134 	ret	Z
                                   2135 ;src\mytestrom.c:1568: character=*(text++);
      000C57 23               [ 6] 2136 	inc	hl
                                   2137 ;src\mytestrom.c:1569: if (character=='\n')
      000C58 4F               [ 4] 2138 	ld	c, a
      000C59 D6 0A            [ 7] 2139 	sub	a, #0x0a
      000C5B 20 0F            [12] 2140 	jr	NZ, 00102$
                                   2141 ;src\mytestrom.c:1571: PrintChar(10); //LF (Line Feed)
      000C5D E5               [11] 2142 	push	hl
      000C5E 3E 0A            [ 7] 2143 	ld	a, #0x0a
      000C60 CDr42r0C         [17] 2144 	call	_PrintChar
      000C63 3E 0D            [ 7] 2145 	ld	a, #0x0d
      000C65 CDr42r0C         [17] 2146 	call	_PrintChar
      000C68 E1               [10] 2147 	pop	hl
      000C69 C3r54r0C         [10] 2148 	jp	00104$
      000C6C                       2149 00102$:
                                   2150 ;src\mytestrom.c:1574: PrintChar(character);
      000C6C E5               [11] 2151 	push	hl
      000C6D 79               [ 4] 2152 	ld	a, c
      000C6E CDr42r0C         [17] 2153 	call	_PrintChar
      000C71 E1               [10] 2154 	pop	hl
                                   2155 ;src\mytestrom.c:1577: }
      000C72 C3r54r0C         [10] 2156 	jp	00104$
                                   2157 ;src\mytestrom.c:1580: void     myVDPready(void) __naked															// Check if MSX2 VDP is ready (Internal Use)
                                   2158 ;	---------------------------------
                                   2159 ; Function myVDPready
                                   2160 ; ---------------------------------
      000C75                       2161 _myVDPready::
                                   2162 ;src\mytestrom.c:1596: __endasm; 
      000C75                       2163 	    checkIfReady:
      000C75 3E 02            [ 7] 2164 	ld	a,#2
      000C77 D3 99            [11] 2165 	out	(#0x99),a ; wait till previous VDP execution is over (CE)
      000C79 3E 8F            [ 7] 2166 	ld	a,#128+#15
      000C7B D3 99            [11] 2167 	out	(#0x99),a
      000C7D DB 99            [11] 2168 	in	a,(#0x99)
      000C7F 1F               [ 4] 2169 	rra	; check CE (bit#0)
      000C80 3E 00            [ 7] 2170 	ld	a, #0
      000C82 D3 99            [11] 2171 	out	(#0x99),a
      000C84 3E 8F            [ 7] 2172 	ld	a,#128+#15
      000C86 D3 99            [11] 2173 	out	(#0x99),a
      000C88 DAr75r0C         [10] 2174 	jp	c, checkIfReady
      000C8B C9               [10] 2175 	ret
                                   2176 ;src\mytestrom.c:1597: }
                                   2177 ;src\mytestrom.c:1600: void sprite_patterns(void) __naked
                                   2178 ;	---------------------------------
                                   2179 ; Function sprite_patterns
                                   2180 ; ---------------------------------
      000C8C                       2181 _sprite_patterns::
                                   2182 ;src\mytestrom.c:1604: __endasm;	
      000C8C 00 00 00 00 00 0B 1F  2183 	.incbin	"data\knight_frm.bin"
             3E 6E F7 FB FF FF F9
             FE BF 00 00 00 00 00
             B8 1C BE 1B 3F FF BF
             BF AC 1C 3E 00 00 00
             01 03 00 08 09 35 7A
             7D 3B 07 27 61 40 00
             00 00 F8 F0 40 E8 48
             E6 D6 36 F6 F0 F0 E8
             C0 FF 7F 3F 00 DF EF
             EF FF CF 07 03 00 00
             00 00 00 FF DF BF 00
             F0 F0 78 08 F8 FC FC
             FC 64 5C 7E 00 38 3C
             00 FF 38 58 5C 4C 04
             00 00 00 00 00 00 00
             0E 2E 40 F0 00 00 80
             F0 00 78 78 78 38 20
             1C 7E
                                   2184 ;src\mytestrom.c:1605: }
                                   2185 ;src\mytestrom.c:1607: void sprite_colors(void) __naked
                                   2186 ;	---------------------------------
                                   2187 ; Function sprite_colors
                                   2188 ; ---------------------------------
      00178C                       2189 _sprite_colors::
                                   2190 ;src\mytestrom.c:1611: __endasm;	
      00178C 00 00 00 00 00 01 01  2191 	.incbin	"data\knight_clr.bin"
             01 01 01 01 01 01 01
             01 01 01 01 01 01 01
             08 48 48 48 48 48 48
             48 48 48 08 01 01 01
             00 01 01 01 01 01 01
             01 01 01 01 01 00 48
             48 08 01 48 48 48 48
             48 48 48 48 48 08 48
             01 00 00 00 00 01 01
             01 01 01 01 01 01 01
             01 01 01 01 01 01 01
             08 48 48 48 48 48 48
             48 48 48 08 48 01 01
             00 00 00 00 01 01 01
             01 01 01 01 01 01 00
             48 08 01 01 01 01 08
             08 48 48 48 48 48 08
             48 01
                                   2192 ;src\mytestrom.c:1612: }
                                   2193 ;src\mytestrom.c:1614: void DataLevelMap(void) __naked {
                                   2194 ;	---------------------------------
                                   2195 ; Function DataLevelMap
                                   2196 ; ---------------------------------
      001D0C                       2197 _DataLevelMap::
                                   2198 ;src\mytestrom.c:1617: __endasm;
      001D0C 64 0B 44 73 68 6B 6B  2199 	.incbin	"data\datamap.bin"
             6B 6B 6B 6B 6B 6B 2F
             5D 4D 51 51 51 51 51
             51 51 51 07 17 1D 27
             2E 41 4B 76 62 73 6B
             07 16 20 22 25 4B 41
             71 3B 5D 51 0A 0E 1B
             12 1C 3E 5C 65 32 31
             4A 06 0B 23 1A 18 37
             74 69 34 40 4E 07 17
             1D 27 2E 30 47 6E 29
             45 53 07 16 20 22 25
             4B 42 6D 24 35 3D 0A
             0E 1B 12 1C 41 3F 65
             32 31 4A 06 0B 23 1A
             18 4B 4B 69 34 40 4E
             0F 17 1D 27 2E 41 41
             6E 29 45 53 26 16 20
             22 25
                                   2200 ;src\mytestrom.c:1618: }
                                   2201 	.area _BANK0
                                   2202 	.area _INITIALIZER
                                   2203 	.area _CABS (ABS)
