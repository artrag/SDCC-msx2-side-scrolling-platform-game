                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13049 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module mytestrom
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _PrintChar
                                     12 	.globl _PlotOneColumnTileAndMask
                                     13 	.globl _PlotOneColumnTile
                                     14 	.globl _main
                                     15 	.globl _v
                                     16 	.globl _x
                                     17 	.globl _y
                                     18 	.globl _u
                                     19 	.globl _object
                                     20 	.globl _RG18SA
                                     21 	.globl _RG17SA
                                     22 	.globl _RG16SA
                                     23 	.globl _RG15SA
                                     24 	.globl _RG14SA
                                     25 	.globl _RG13SA
                                     26 	.globl _RG12SA
                                     27 	.globl _RG11SA
                                     28 	.globl _RG10SA
                                     29 	.globl _RG9SAV
                                     30 	.globl _RG8SAV
                                     31 	.globl _RG1SAV
                                     32 	.globl _RG0SAV
                                     33 	.globl _LevelMap
                                     34 	.globl _cursat
                                     35 	.globl _OldIsr
                                     36 	.globl _page
                                     37 	.globl _newx
                                     38 	.globl _WLevelDY
                                     39 	.globl _WLevelDX
                                     40 	.globl _LevelH
                                     41 	.globl _LevelW
                                     42 	.globl _WLevely
                                     43 	.globl _WLevelx
                                     44 	.globl _ScrollRight
                                     45 	.globl _ScrollLeft
                                     46 	.globl _BorderLinesL
                                     47 	.globl _BorderLinesR
                                     48 	.globl _NewLine
                                     49 	.globl _PatchPlotOneTile
                                     50 	.globl _myVDPwrite
                                     51 	.globl _myInPort
                                     52 	.globl _myOutPort
                                     53 	.globl _myfVDP
                                     54 	.globl _mySetAdjust
                                     55 	.globl _myFT_wait
                                     56 	.globl _WaitLineInt
                                     57 	.globl _FT_errorHandler
                                     58 	.globl _MyLoadMap
                                     59 	.globl _myISR
                                     60 	.globl _myInstISR
                                     61 	.globl _myISRrestore
                                     62 	.globl _myCheckkbd
                                     63 	.globl _ObjectsInit
                                     64 	.globl _ObjectstoVRAM
                                     65 	.globl _UpdateColor
                                     66 	.globl _UpdateFrame
                                     67 	.globl _SprtInit
                                     68 	.globl _VramWrite
                                     69 	.globl _SetVramW
                                     70 	.globl _chgmod
                                     71 	.globl _putch
                                     72 	.globl _myHMMV
                                     73 	.globl _SetDisplayPage
                                     74 	.globl _VDPlineSwitch
                                     75 	.globl _VDP60Hz
                                     76 	.globl _Print
                                     77 	.globl _sprite_patterns
                                     78 	.globl _sprite_colors
                                     79 	.globl _DataLevelMap
                                     80 ;--------------------------------------------------------
                                     81 ; special function registers
                                     82 ;--------------------------------------------------------
                                     83 ;--------------------------------------------------------
                                     84 ; ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area _DATA
      000000                         87 _MyCommand:
      000000                         88 	.ds 15
      00000F                         89 _MyBorder:
      00000F                         90 	.ds 15
      00001E                         91 _WLevelx::
      00001E                         92 	.ds 2
      000020                         93 _WLevely::
      000020                         94 	.ds 1
      000021                         95 _LevelW::
      000021                         96 	.ds 1
      000022                         97 _LevelH::
      000022                         98 	.ds 1
      000023                         99 _WLevelDX::
      000023                        100 	.ds 2
      000025                        101 _WLevelDY::
      000025                        102 	.ds 2
      000027                        103 _newx::
      000027                        104 	.ds 1
      000028                        105 _page::
      000028                        106 	.ds 1
      000029                        107 _OldIsr::
      000029                        108 	.ds 3
      00002C                        109 _cursat::
      00002C                        110 	.ds 1
      00002D                        111 _LevelMap::
      00002D                        112 	.ds 2816
      000B2D                        113 _p:
      000B2D                        114 	.ds 2
                           00F3DF   115 _RG0SAV	=	0xf3df
                           00F3E0   116 _RG1SAV	=	0xf3e0
                           00FFE7   117 _RG8SAV	=	0xffe7
                           00FFE8   118 _RG9SAV	=	0xffe8
                           00FFE9   119 _RG10SA	=	0xffe9
                           00FFEA   120 _RG11SA	=	0xffea
                           00FFEB   121 _RG12SA	=	0xffeb
                           00FFEC   122 _RG13SA	=	0xffec
                           00FFED   123 _RG14SA	=	0xffed
                           00FFEE   124 _RG15SA	=	0xffee
                           00FFEF   125 _RG16SA	=	0xffef
                           00FFF0   126 _RG17SA	=	0xfff0
                           00FFF1   127 _RG18SA	=	0xfff1
      000B2F                        128 _object::
      000B2F                        129 	.ds 56
      000B67                        130 _u::
      000B67                        131 	.ds 2
      000B69                        132 _y::
      000B69                        133 	.ds 1
      000B6A                        134 _x::
      000B6A                        135 	.ds 1
      000B6B                        136 _v::
      000B6B                        137 	.ds 1
                                    138 ;--------------------------------------------------------
                                    139 ; ram data
                                    140 ;--------------------------------------------------------
                                    141 	.area _INITIALIZED
                                    142 ;--------------------------------------------------------
                                    143 ; absolute external ram data
                                    144 ;--------------------------------------------------------
                                    145 	.area _DABS (ABS)
                                    146 ;--------------------------------------------------------
                                    147 ; global & static initialisations
                                    148 ;--------------------------------------------------------
                                    149 	.area _HOME
                                    150 	.area _GSINIT
                                    151 	.area _GSFINAL
                                    152 	.area _GSINIT
                                    153 ;--------------------------------------------------------
                                    154 ; Home
                                    155 ;--------------------------------------------------------
                                    156 	.area _HOME
                                    157 	.area _HOME
                                    158 ;--------------------------------------------------------
                                    159 ; code
                                    160 ;--------------------------------------------------------
                                    161 	.area _BANK0
                                    162 ;src\/vdp_graph2.h:185: static void     VDPready() __naked															// Check if MSX2 VDP is ready (Internal Use)
                                    163 ;	---------------------------------
                                    164 ; Function VDPready
                                    165 ; ---------------------------------
      000000                        166 _VDPready:
                                    167 ;src\/vdp_graph2.h:201: __endasm; 
      000000                        168 	    checkIfReady:
      000000 3E 02            [ 7]  169 	ld	a,#2
      000002 D3 99            [11]  170 	out	(#0x99),a ; wait till previous VDP execution is over (CE)
      000004 3E 8F            [ 7]  171 	ld	a,#128+#15
      000006 D3 99            [11]  172 	out	(#0x99),a
      000008 DB 99            [11]  173 	in	a,(#0x99)
      00000A 1F               [ 4]  174 	rra	; check CE (bit#0)
      00000B 3E 00            [ 7]  175 	ld	a, #0
      00000D D3 99            [11]  176 	out	(#0x99),a
      00000F 3E 8F            [ 7]  177 	ld	a,#128+#15
      000011 D3 99            [11]  178 	out	(#0x99),a
      000013 DAr00r00         [10]  179 	jp	c, checkIfReady
      000016 C9               [10]  180 	ret
                                    181 ;src\/vdp_graph2.h:202: }
                                    182 ;src\mytestrom.c:64: void main(void) 
                                    183 ;	---------------------------------
                                    184 ; Function main
                                    185 ; ---------------------------------
      000017                        186 _main::
                                    187 ;src\mytestrom.c:68: rd = ReadMSXtype();					  	// Read MSX Type
      000017 3A 2D 00         [13]  188 	ld	a, (#0x002d)
                                    189 ;src\mytestrom.c:70: if (rd==0) FT_errorHandler(3,"msx 1 ");	// If MSX1 got to Error !
      00001A B7               [ 4]  190 	or	a, a
      00001B 20 08            [12]  191 	jr	NZ, 00102$
      00001D 11rA8r01         [10]  192 	ld	de, #___str_0
      000020 3E 03            [ 7]  193 	ld	a, #0x03
      000022 CDr6Dr07         [17]  194 	call	_FT_errorHandler
      000025                        195 00102$:
                                    196 ;src\mytestrom.c:72: MyLoadMap(0,LevelMap);					// load level map 256x11 arranged by columns
      000025 11r2Dr00         [10]  197 	ld	de, #_LevelMap
      000028 AF               [ 4]  198 	xor	a, a
      000029 CDr2Ar08         [17]  199 	call	_MyLoadMap
                                    200 ;src\mytestrom.c:74: chgmod(8);						  		// Init Screen 8
      00002C 3E 08            [ 7]  201 	ld	a, #0x08
      00002E CDrCEr0B         [17]  202 	call	_chgmod
                                    203 ;src\mytestrom.c:75: myVDPwrite(0,7);						// borders	
      000031 2E 07            [ 7]  204 	ld	l, #0x07
                                    205 ;	spillPairReg hl
                                    206 ;	spillPairReg hl
      000033 AF               [ 4]  207 	xor	a, a
      000034 CDrE0r06         [17]  208 	call	_myVDPwrite
                                    209 ;src\mytestrom.c:76: VDPlineSwitch();						// 192 lines
      000037 CDr3Dr0C         [17]  210 	call	_VDPlineSwitch
                                    211 ;src\mytestrom.c:78: VDP60Hz();
      00003A CDr4Fr0C         [17]  212 	call	_VDP60Hz
                                    213 ;src\mytestrom.c:80: myHMMV(0,0,256,512, 0);					// Clear all VRAM  by Byte 0 (Black)
      00003D AF               [ 4]  214 	xor	a, a
      00003E F5               [11]  215 	push	af
      00003F 33               [ 6]  216 	inc	sp
      000040 21 00 02         [10]  217 	ld	hl, #0x0200
      000043 E5               [11]  218 	push	hl
      000044 26 01            [ 7]  219 	ld	h, #0x01
      000046 E5               [11]  220 	push	hl
      000047 65               [ 4]  221 	ld	h, l
      000048 E5               [11]  222 	push	hl
      000049 E5               [11]  223 	push	hl
      00004A CDrD4r0B         [17]  224 	call	_myHMMV
      00004D 21 09 00         [10]  225 	ld	hl, #9
      000050 39               [11]  226 	add	hl, sp
      000051 F9               [ 6]  227 	ld	sp, hl
                                    228 ;src\/myheader.h:13: __endasm; 
      000052 F3               [ 4]  229 	di
                                    230 ;src\mytestrom.c:82: VDPready();								// wait for command completion
      000053 CDr00r00         [17]  231 	call	_VDPready
                                    232 ;src\/myheader.h:7: __endasm; 
      000056 FB               [ 4]  233 	ei
                                    234 ;src\mytestrom.c:85: ObjectsInit();							// initialize logical object 
      000057 CDrABr08         [17]  235 	call	_ObjectsInit
                                    236 ;src\mytestrom.c:86: SprtInit();								// initialize sprites in VRAM 
      00005A CDr11r0B         [17]  237 	call	_SprtInit
                                    238 ;src\mytestrom.c:88: myInstISR();							// install a fake ISR to cut the overhead
      00005D CDr5Fr08         [17]  239 	call	_myInstISR
                                    240 ;src\mytestrom.c:90: page = 0;
      000060 21r28r00         [10]  241 	ld	hl, #_page
      000063 36 00            [10]  242 	ld	(hl), #0x00
                                    243 ;src\mytestrom.c:91: mySetAdjust(0,8);						// same as myVDPwrite((0-8) & 15,18);	
      000065 2E 08            [ 7]  244 	ld	l, #0x08
                                    245 ;	spillPairReg hl
                                    246 ;	spillPairReg hl
      000067 AF               [ 4]  247 	xor	a, a
      000068 CDr32r07         [17]  248 	call	_mySetAdjust
                                    249 ;src\mytestrom.c:93: for (WLevelx = 0;WLevelx<0+WindowW;) {
      00006B 21 00 00         [10]  250 	ld	hl, #0x0000
      00006E 22r1Er00         [16]  251 	ld	(_WLevelx), hl
      000071                        252 00117$:
                                    253 ;src\mytestrom.c:94: myFT_wait(1);		
      000071 3E 01            [ 7]  254 	ld	a, #0x01
      000073 CDr4Fr07         [17]  255 	call	_myFT_wait
                                    256 ;src\mytestrom.c:95: NewLine(WLevelx,0,WLevelx);WLevelx++;
      000076 3Ar1Er00         [13]  257 	ld	a, (_WLevelx+0)
      000079 4F               [ 4]  258 	ld	c, a
      00007A 2Ar1Er00         [16]  259 	ld	hl, (_WLevelx)
      00007D E5               [11]  260 	push	hl
      00007E 2E 00            [ 7]  261 	ld	l, #0x00
                                    262 ;	spillPairReg hl
                                    263 ;	spillPairReg hl
      000080 79               [ 4]  264 	ld	a, c
      000081 CDr10r06         [17]  265 	call	_NewLine
      000084 2Ar1Er00         [16]  266 	ld	hl, (_WLevelx)
      000087 23               [ 6]  267 	inc	hl
                                    268 ;src\mytestrom.c:96: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      000088 22r1Er00         [16]  269 	ld	(_WLevelx), hl
      00008B 3E F0            [ 7]  270 	ld	a, #0xf0
      00008D 95               [ 4]  271 	sub	a, l
      00008E 5F               [ 4]  272 	ld	e, a
      00008F 9F               [ 4]  273 	sbc	a, a
      000090 94               [ 4]  274 	sub	a, h
      000091 57               [ 4]  275 	ld	d, a
      000092 3Ar1Er00         [13]  276 	ld	a, (_WLevelx+0)
      000095 4F               [ 4]  277 	ld	c, a
      000096 3E F0            [ 7]  278 	ld	a, #0xf0
      000098 91               [ 4]  279 	sub	a, c
      000099 4F               [ 4]  280 	ld	c, a
      00009A D5               [11]  281 	push	de
      00009B 2E 00            [ 7]  282 	ld	l, #0x00
                                    283 ;	spillPairReg hl
                                    284 ;	spillPairReg hl
      00009D 79               [ 4]  285 	ld	a, c
      00009E CDr10r06         [17]  286 	call	_NewLine
      0000A1 2Ar1Er00         [16]  287 	ld	hl, (_WLevelx)
      0000A4 23               [ 6]  288 	inc	hl
      0000A5 22r1Er00         [16]  289 	ld	(_WLevelx), hl
                                    290 ;src\mytestrom.c:97: NewLine(WLevelx,0,WLevelx);WLevelx++;
      0000A8 3Ar1Er00         [13]  291 	ld	a, (_WLevelx+0)
      0000AB 4F               [ 4]  292 	ld	c, a
      0000AC 2Ar1Er00         [16]  293 	ld	hl, (_WLevelx)
      0000AF E5               [11]  294 	push	hl
      0000B0 2E 00            [ 7]  295 	ld	l, #0x00
                                    296 ;	spillPairReg hl
                                    297 ;	spillPairReg hl
      0000B2 79               [ 4]  298 	ld	a, c
      0000B3 CDr10r06         [17]  299 	call	_NewLine
      0000B6 2Ar1Er00         [16]  300 	ld	hl, (_WLevelx)
      0000B9 23               [ 6]  301 	inc	hl
                                    302 ;src\mytestrom.c:98: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      0000BA 22r1Er00         [16]  303 	ld	(_WLevelx), hl
      0000BD 3E F0            [ 7]  304 	ld	a, #0xf0
      0000BF 95               [ 4]  305 	sub	a, l
      0000C0 5F               [ 4]  306 	ld	e, a
      0000C1 9F               [ 4]  307 	sbc	a, a
      0000C2 94               [ 4]  308 	sub	a, h
      0000C3 57               [ 4]  309 	ld	d, a
      0000C4 3Ar1Er00         [13]  310 	ld	a, (_WLevelx+0)
      0000C7 4F               [ 4]  311 	ld	c, a
      0000C8 3E F0            [ 7]  312 	ld	a, #0xf0
      0000CA 91               [ 4]  313 	sub	a, c
      0000CB 4F               [ 4]  314 	ld	c, a
      0000CC D5               [11]  315 	push	de
      0000CD 2E 00            [ 7]  316 	ld	l, #0x00
                                    317 ;	spillPairReg hl
                                    318 ;	spillPairReg hl
      0000CF 79               [ 4]  319 	ld	a, c
      0000D0 CDr10r06         [17]  320 	call	_NewLine
      0000D3 2Ar1Er00         [16]  321 	ld	hl, (_WLevelx)
      0000D6 23               [ 6]  322 	inc	hl
                                    323 ;src\mytestrom.c:93: for (WLevelx = 0;WLevelx<0+WindowW;) {
      0000D7 22r1Er00         [16]  324 	ld	(_WLevelx), hl
      0000DA 11 F0 00         [10]  325 	ld	de, #0x00f0
      0000DD BF               [ 4]  326 	cp	a, a
      0000DE ED 52            [15]  327 	sbc	hl, de
      0000E0 38 8F            [12]  328 	jr	C, 00117$
                                    329 ;src\mytestrom.c:101: WLevelx = 0;	
      0000E2 21 00 00         [10]  330 	ld	hl, #0x0000
      0000E5 22r1Er00         [16]  331 	ld	(_WLevelx), hl
                                    332 ;src\mytestrom.c:103: MyBorder.ny = WindowH;
      0000E8 2E B0            [ 7]  333 	ld	l, #0xb0
      0000EA 22r19r00         [16]  334 	ld	((_MyBorder + 10)), hl
                                    335 ;src\mytestrom.c:104: MyBorder.col = 0;
      0000ED 21r1Br00         [10]  336 	ld	hl, #(_MyBorder + 12)
      0000F0 36 00            [10]  337 	ld	(hl), #0x00
                                    338 ;src\mytestrom.c:105: MyBorder.param = 0;
      0000F2 21r1Cr00         [10]  339 	ld	hl, #(_MyBorder + 13)
      0000F5 36 00            [10]  340 	ld	(hl), #0x00
                                    341 ;src\mytestrom.c:106: MyBorder.cmd = opHMMV;
      0000F7 21r1Dr00         [10]  342 	ld	hl, #(_MyBorder + 14)
      0000FA 36 C0            [10]  343 	ld	(hl), #0xc0
                                    344 ;src\mytestrom.c:108: MyCommand.ny = WindowH;
      0000FC 21 B0 00         [10]  345 	ld	hl, #0x00b0
      0000FF 22r0Ar00         [16]  346 	ld	((_MyCommand + 10)), hl
                                    347 ;src\mytestrom.c:109: MyCommand.col = 0;
      000102 21r0Cr00         [10]  348 	ld	hl, #(_MyCommand + 12)
      000105 36 00            [10]  349 	ld	(hl), #0x00
                                    350 ;src\mytestrom.c:110: MyCommand.param = 0;
      000107 21r0Dr00         [10]  351 	ld	hl, #(_MyCommand + 13)
      00010A 36 00            [10]  352 	ld	(hl), #0x00
                                    353 ;src\mytestrom.c:111: MyCommand.cmd = opHMMM;
      00010C 21r0Er00         [10]  354 	ld	hl, #(_MyCommand + 14)
      00010F 36 D0            [10]  355 	ld	(hl), #0xd0
                                    356 ;src\mytestrom.c:114: while (myCheckkbd(7)==0xFF)
      000111                        357 00112$:
      000111 3E 07            [ 7]  358 	ld	a, #0x07
      000113 CDr9Dr08         [17]  359 	call	_myCheckkbd
      000116 3C               [ 4]  360 	inc	a
      000117 C2r9Fr01         [10]  361 	jp	NZ,00114$
                                    362 ;src\mytestrom.c:116: WaitLineInt();			// wait for line 176-16
      00011A CDr56r07         [17]  363 	call	_WaitLineInt
                                    364 ;src\mytestrom.c:117: cursat^=1;				// swap sat 0 and sat 1
      00011D 3Ar2Cr00         [13]  365 	ld	a, (_cursat+0)
      000120 EE 01            [ 7]  366 	xor	a, #0x01
      000122 32r2Cr00         [13]  367 	ld	(_cursat+0), a
                                    368 ;src\mytestrom.c:119: if ((myCheckkbd(8)==0x7F) && (WLevelx<16*(LevelW-15)))  { 
      000125 3E 08            [ 7]  369 	ld	a, #0x08
      000127 CDr9Dr08         [17]  370 	call	_myCheckkbd
      00012A D6 7F            [ 7]  371 	sub	a, #0x7f
      00012C 20 37            [12]  372 	jr	NZ, 00109$
      00012E 3Ar21r00         [13]  373 	ld	a, (_LevelW+0)
      000131 0E 00            [ 7]  374 	ld	c, #0x00
      000133 C6 F1            [ 7]  375 	add	a, #0xf1
      000135 5F               [ 4]  376 	ld	e, a
      000136 79               [ 4]  377 	ld	a, c
      000137 CE FF            [ 7]  378 	adc	a, #0xff
      000139 57               [ 4]  379 	ld	d, a
      00013A EB               [ 4]  380 	ex	de, hl
      00013B 29               [11]  381 	add	hl, hl
      00013C 29               [11]  382 	add	hl, hl
      00013D 29               [11]  383 	add	hl, hl
      00013E 29               [11]  384 	add	hl, hl
      00013F EB               [ 4]  385 	ex	de, hl
      000140 3Ar1Er00         [13]  386 	ld	a, (_WLevelx+0)
      000143 93               [ 4]  387 	sub	a, e
      000144 3Ar1Fr00         [13]  388 	ld	a, (_WLevelx+1)
      000147 9A               [ 4]  389 	sbc	a, d
      000148 E2r4Dr01         [10]  390 	jp	PO, 00170$
      00014B EE 80            [ 7]  391 	xor	a, #0x80
      00014D                        392 00170$:
      00014D F2r65r01         [10]  393 	jp	P, 00109$
                                    394 ;src\mytestrom.c:120: WLevelx++;
      000150 2Ar1Er00         [16]  395 	ld	hl, (_WLevelx)
      000153 23               [ 6]  396 	inc	hl
                                    397 ;src\mytestrom.c:121: ObjectstoVRAM(WLevelx);			
      000154 22r1Er00         [16]  398 	ld	(_WLevelx), hl
      000157 CDr4Dr09         [17]  399 	call	_ObjectstoVRAM
                                    400 ;src\mytestrom.c:122: ScrollRight(WLevelx & 15);
      00015A 3Ar1Er00         [13]  401 	ld	a, (_WLevelx+0)
      00015D E6 0F            [ 7]  402 	and	a, #0x0f
      00015F CDrAFr01         [17]  403 	call	_ScrollRight
      000162 C3r11r01         [10]  404 	jp	00112$
      000165                        405 00109$:
                                    406 ;src\mytestrom.c:124: else if ((myCheckkbd(8)==0xEF) && (WLevelx>0)) { 
      000165 3E 08            [ 7]  407 	ld	a, #0x08
      000167 CDr9Dr08         [17]  408 	call	_myCheckkbd
      00016A D6 EF            [ 7]  409 	sub	a, #0xef
      00016C 20 28            [12]  410 	jr	NZ, 00105$
      00016E AF               [ 4]  411 	xor	a, a
      00016F FD 21r1Er00      [14]  412 	ld	iy, #_WLevelx
      000173 FD BE 00         [19]  413 	cp	a, 0 (iy)
      000176 FD 9E 01         [19]  414 	sbc	a, 1 (iy)
      000179 E2r7Er01         [10]  415 	jp	PO, 00173$
      00017C EE 80            [ 7]  416 	xor	a, #0x80
      00017E                        417 00173$:
      00017E F2r96r01         [10]  418 	jp	P, 00105$
                                    419 ;src\mytestrom.c:125: WLevelx--;
      000181 2Ar1Er00         [16]  420 	ld	hl, (_WLevelx)
      000184 2B               [ 6]  421 	dec	hl
                                    422 ;src\mytestrom.c:126: ObjectstoVRAM(WLevelx);			
      000185 22r1Er00         [16]  423 	ld	(_WLevelx), hl
      000188 CDr4Dr09         [17]  424 	call	_ObjectstoVRAM
                                    425 ;src\mytestrom.c:127: ScrollLeft(WLevelx & 15);
      00018B 3Ar1Er00         [13]  426 	ld	a, (_WLevelx+0)
      00018E E6 0F            [ 7]  427 	and	a, #0x0f
      000190 CDr78r02         [17]  428 	call	_ScrollLeft
      000193 C3r11r01         [10]  429 	jp	00112$
      000196                        430 00105$:
                                    431 ;src\mytestrom.c:130: ObjectstoVRAM(WLevelx);						
      000196 2Ar1Er00         [16]  432 	ld	hl, (_WLevelx)
      000199 CDr4Dr09         [17]  433 	call	_ObjectstoVRAM
      00019C C3r11r01         [10]  434 	jp	00112$
      00019F                        435 00114$:
                                    436 ;src\mytestrom.c:134: myISRrestore();
      00019F CDr7Fr08         [17]  437 	call	_myISRrestore
                                    438 ;src\mytestrom.c:135: chgmod(0);
      0001A2 AF               [ 4]  439 	xor	a, a
      0001A3 CDrCEr0B         [17]  440 	call	_chgmod
                                    441 ;src\mytestrom.c:136: Reboot(0);
      0001A6 C7               [11]  442 	rst	#0
                                    443 ;src\mytestrom.c:137: }
      0001A7 C9               [10]  444 	ret
      0001A8                        445 ___str_0:
      0001A8 6D 73 78 20 31 20      446 	.ascii "msx 1 "
      0001AE 00                     447 	.db 0x00
                                    448 ;src\mytestrom.c:139: void ScrollRight(char step) __sdcccall(1) 
                                    449 ;	---------------------------------
                                    450 ; Function ScrollRight
                                    451 ; ---------------------------------
      0001AF                        452 _ScrollRight::
      0001AF 4F               [ 4]  453 	ld	c, a
                                    454 ;src\mytestrom.c:142: myVDPwrite((step-8) & 15,18);			
      0001B0 41               [ 4]  455 	ld	b, c
      0001B1 78               [ 4]  456 	ld	a, b
      0001B2 C6 F8            [ 7]  457 	add	a, #0xf8
      0001B4 E6 0F            [ 7]  458 	and	a, #0x0f
      0001B6 5F               [ 4]  459 	ld	e, a
      0001B7 C5               [11]  460 	push	bc
      0001B8 2E 12            [ 7]  461 	ld	l, #0x12
                                    462 ;	spillPairReg hl
                                    463 ;	spillPairReg hl
      0001BA 7B               [ 4]  464 	ld	a, e
      0001BB CDrE0r06         [17]  465 	call	_myVDPwrite
      0001BE C1               [10]  466 	pop	bc
                                    467 ;src\mytestrom.c:143: switch (step) {
      0001BF 79               [ 4]  468 	ld	a, c
      0001C0 B7               [ 4]  469 	or	a, a
      0001C1 20 44            [12]  470 	jr	NZ, 00102$
                                    471 ;src\mytestrom.c:145: page ^=1;							// case 0
      0001C3 3Ar28r00         [13]  472 	ld	a, (_page+0)
      0001C6 EE 01            [ 7]  473 	xor	a, #0x01
      0001C8 32r28r00         [13]  474 	ld	(_page+0), a
                                    475 ;src\mytestrom.c:146: SetDisplayPage(page);
      0001CB C5               [11]  476 	push	bc
      0001CC 3Ar28r00         [13]  477 	ld	a, (_page+0)
      0001CF 6F               [ 4]  478 	ld	l, a
                                    479 ;	spillPairReg hl
                                    480 ;	spillPairReg hl
      0001D0 CDr22r0C         [17]  481 	call	_SetDisplayPage
      0001D3 C1               [10]  482 	pop	bc
                                    483 ;src\mytestrom.c:147: MyBorder.dx = 240;
      0001D4 21 F0 00         [10]  484 	ld	hl, #0x00f0
      0001D7 22r13r00         [16]  485 	ld	((_MyBorder + 4)), hl
                                    486 ;src\mytestrom.c:148: MyBorder.nx = 15;
      0001DA 2E 0F            [ 7]  487 	ld	l, #0x0f
      0001DC 22r17r00         [16]  488 	ld	((_MyBorder + 8)), hl
                                    489 ;src\mytestrom.c:149: MyBorder.dy = 256*page;
      0001DF 3Ar28r00         [13]  490 	ld	a, (_page+0)
      0001E2 57               [ 4]  491 	ld	d, a
      0001E3 1E 00            [ 7]  492 	ld	e, #0x00
      0001E5 ED 53r15r00      [20]  493 	ld	((_MyBorder + 6)), de
                                    494 ;src\mytestrom.c:150: myfVDP(&MyBorder);
      0001E9 C5               [11]  495 	push	bc
      0001EA 21r0Fr00         [10]  496 	ld	hl, #_MyBorder
      0001ED CDrF2r06         [17]  497 	call	_myfVDP
      0001F0 C1               [10]  498 	pop	bc
                                    499 ;src\mytestrom.c:151: BorderLinesR(WindowW-1,page, WLevelx+WindowW-1);		
      0001F1 2Ar1Er00         [16]  500 	ld	hl, (_WLevelx)
      0001F4 11 EF 00         [10]  501 	ld	de, #0x00ef
      0001F7 19               [11]  502 	add	hl, de
      0001F8 C5               [11]  503 	push	bc
      0001F9 E5               [11]  504 	push	hl
      0001FA 3Ar28r00         [13]  505 	ld	a, (_page+0)
      0001FD 6F               [ 4]  506 	ld	l, a
                                    507 ;	spillPairReg hl
                                    508 ;	spillPairReg hl
      0001FE 3E EF            [ 7]  509 	ld	a, #0xef
      000200 CDr87r05         [17]  510 	call	_BorderLinesR
      000203 C1               [10]  511 	pop	bc
                                    512 ;src\mytestrom.c:152: break;
      000204 C3r5Cr02         [10]  513 	jp	00103$
                                    514 ;src\mytestrom.c:153: default:								// case 1-15
      000207                        515 00102$:
                                    516 ;src\mytestrom.c:154: MyCommand.sx = 16*step;
      000207 59               [ 4]  517 	ld	e, c
      000208 16 00            [ 7]  518 	ld	d, #0x00
      00020A EB               [ 4]  519 	ex	de, hl
      00020B 29               [11]  520 	add	hl, hl
      00020C 29               [11]  521 	add	hl, hl
      00020D 29               [11]  522 	add	hl, hl
      00020E 29               [11]  523 	add	hl, hl
      00020F EB               [ 4]  524 	ex	de, hl
      000210 ED 53r00r00      [20]  525 	ld	(_MyCommand), de
                                    526 ;src\mytestrom.c:155: MyCommand.dx = MyCommand.sx - 16;;
      000214 2Ar00r00         [16]  527 	ld	hl, (#_MyCommand + 0)
      000217 11 F0 FF         [10]  528 	ld	de, #0xfff0
      00021A 19               [11]  529 	add	hl, de
      00021B 5D               [ 4]  530 	ld	e, l
      00021C 7C               [ 4]  531 	ld	a,h
      00021D 57               [ 4]  532 	ld	d,a
      00021E ED 53r04r00      [20]  533 	ld	((_MyCommand + 4)), de
                                    534 ;src\mytestrom.c:156: MyCommand.sy = 256*page;
      000222 3Ar28r00         [13]  535 	ld	a, (_page+0)
      000225 57               [ 4]  536 	ld	d, a
      000226 1E 00            [ 7]  537 	ld	e, #0x00
      000228 ED 53r02r00      [20]  538 	ld	((_MyCommand + 2)), de
                                    539 ;src\mytestrom.c:157: MyCommand.dy = MyCommand.sy ^ 256;
      00022C ED 5Br02r00      [20]  540 	ld	de, (#(_MyCommand + 2) + 0)
      000230 7A               [ 4]  541 	ld	a, d
      000231 EE 01            [ 7]  542 	xor	a, #0x01
      000233 57               [ 4]  543 	ld	d, a
      000234 ED 53r06r00      [20]  544 	ld	((_MyCommand + 6)), de
                                    545 ;src\mytestrom.c:158: MyCommand.nx = 16;
      000238 21 10 00         [10]  546 	ld	hl, #0x0010
      00023B 22r08r00         [16]  547 	ld	((_MyCommand + 8)), hl
                                    548 ;src\mytestrom.c:159: myfVDP(&MyCommand);		
      00023E C5               [11]  549 	push	bc
      00023F 21r00r00         [10]  550 	ld	hl, #_MyCommand
      000242 CDrF2r06         [17]  551 	call	_myfVDP
      000245 C1               [10]  552 	pop	bc
                                    553 ;src\mytestrom.c:160: BorderLinesR(step+WindowW-1,page,WLevelx+WindowW-1);
      000246 2Ar1Er00         [16]  554 	ld	hl, (_WLevelx)
      000249 11 EF 00         [10]  555 	ld	de, #0x00ef
      00024C 19               [11]  556 	add	hl, de
      00024D 78               [ 4]  557 	ld	a, b
      00024E C6 EF            [ 7]  558 	add	a, #0xef
      000250 5F               [ 4]  559 	ld	e, a
      000251 C5               [11]  560 	push	bc
      000252 E5               [11]  561 	push	hl
      000253 3Ar28r00         [13]  562 	ld	a, (_page+0)
      000256 6F               [ 4]  563 	ld	l, a
                                    564 ;	spillPairReg hl
                                    565 ;	spillPairReg hl
      000257 7B               [ 4]  566 	ld	a, e
      000258 CDr87r05         [17]  567 	call	_BorderLinesR
      00025B C1               [10]  568 	pop	bc
                                    569 ;src\mytestrom.c:162: }
      00025C                        570 00103$:
                                    571 ;src\mytestrom.c:163: if (step==15) PatchPlotOneTile(step+WindowW-1-16,page^1,WLevelx+WindowW-1);		
      00025C 79               [ 4]  572 	ld	a, c
      00025D D6 0F            [ 7]  573 	sub	a, #0x0f
      00025F C0               [11]  574 	ret	NZ
      000260 2Ar1Er00         [16]  575 	ld	hl, (_WLevelx)
      000263 11 EF 00         [10]  576 	ld	de, #0x00ef
      000266 19               [11]  577 	add	hl, de
      000267 3Ar28r00         [13]  578 	ld	a, (_page+0)
      00026A EE 01            [ 7]  579 	xor	a, #0x01
      00026C 4F               [ 4]  580 	ld	c, a
      00026D 78               [ 4]  581 	ld	a, b
      00026E C6 DF            [ 7]  582 	add	a, #0xdf
      000270 47               [ 4]  583 	ld	b, a
      000271 E5               [11]  584 	push	hl
      000272 69               [ 4]  585 	ld	l, c
                                    586 ;	spillPairReg hl
                                    587 ;	spillPairReg hl
      000273 78               [ 4]  588 	ld	a, b
      000274 CDr96r06         [17]  589 	call	_PatchPlotOneTile
                                    590 ;src\mytestrom.c:164: }
      000277 C9               [10]  591 	ret
                                    592 ;src\mytestrom.c:166: void ScrollLeft(char step) __sdcccall(1)
                                    593 ;	---------------------------------
                                    594 ; Function ScrollLeft
                                    595 ; ---------------------------------
      000278                        596 _ScrollLeft::
                                    597 ;src\mytestrom.c:169: myVDPwrite((step-8) & 15,18);	
      000278 4F               [ 4]  598 	ld	c, a
      000279 C6 F8            [ 7]  599 	add	a, #0xf8
      00027B E6 0F            [ 7]  600 	and	a, #0x0f
      00027D 47               [ 4]  601 	ld	b, a
      00027E C5               [11]  602 	push	bc
      00027F 2E 12            [ 7]  603 	ld	l, #0x12
                                    604 ;	spillPairReg hl
                                    605 ;	spillPairReg hl
      000281 78               [ 4]  606 	ld	a, b
      000282 CDrE0r06         [17]  607 	call	_myVDPwrite
      000285 C1               [10]  608 	pop	bc
                                    609 ;src\mytestrom.c:170: switch (step) {
      000286 79               [ 4]  610 	ld	a, c
      000287 D6 0F            [ 7]  611 	sub	a, #0x0f
      000289 20 41            [12]  612 	jr	NZ, 00102$
                                    613 ;src\mytestrom.c:172: page ^=1;					
      00028B 3Ar28r00         [13]  614 	ld	a, (_page+0)
      00028E EE 01            [ 7]  615 	xor	a, #0x01
      000290 32r28r00         [13]  616 	ld	(_page+0), a
                                    617 ;src\mytestrom.c:173: SetDisplayPage(page);				// case 15
      000293 C5               [11]  618 	push	bc
      000294 3Ar28r00         [13]  619 	ld	a, (_page+0)
      000297 6F               [ 4]  620 	ld	l, a
                                    621 ;	spillPairReg hl
                                    622 ;	spillPairReg hl
      000298 CDr22r0C         [17]  623 	call	_SetDisplayPage
      00029B C1               [10]  624 	pop	bc
                                    625 ;src\mytestrom.c:174: MyBorder.dx = 0;	
      00029C 21 00 00         [10]  626 	ld	hl, #0x0000
      00029F 22r13r00         [16]  627 	ld	((_MyBorder + 4)), hl
                                    628 ;src\mytestrom.c:175: MyBorder.nx = 15;
      0002A2 2E 0F            [ 7]  629 	ld	l, #0x0f
      0002A4 22r17r00         [16]  630 	ld	((_MyBorder + 8)), hl
                                    631 ;src\mytestrom.c:176: MyBorder.dy = 256*page;
      0002A7 3Ar28r00         [13]  632 	ld	a, (_page+0)
      0002AA 06 00            [ 7]  633 	ld	b, #0x00
      0002AC 57               [ 4]  634 	ld	d, a
      0002AD 1E 00            [ 7]  635 	ld	e, #0x00
      0002AF ED 53r15r00      [20]  636 	ld	((_MyBorder + 6)), de
                                    637 ;src\mytestrom.c:177: myfVDP(&MyBorder);
      0002B3 C5               [11]  638 	push	bc
      0002B4 21r0Fr00         [10]  639 	ld	hl, #_MyBorder
      0002B7 CDrF2r06         [17]  640 	call	_myfVDP
      0002BA C1               [10]  641 	pop	bc
                                    642 ;src\mytestrom.c:178: BorderLinesL(step,page,WLevelx);		
      0002BB C5               [11]  643 	push	bc
      0002BC 2Ar1Er00         [16]  644 	ld	hl, (_WLevelx)
      0002BF E5               [11]  645 	push	hl
      0002C0 3Ar28r00         [13]  646 	ld	a, (_page+0)
      0002C3 6F               [ 4]  647 	ld	l, a
                                    648 ;	spillPairReg hl
                                    649 ;	spillPairReg hl
      0002C4 79               [ 4]  650 	ld	a, c
      0002C5 CDrFEr04         [17]  651 	call	_BorderLinesL
      0002C8 C1               [10]  652 	pop	bc
                                    653 ;src\mytestrom.c:179: break;				
      0002C9 C3r1Ar03         [10]  654 	jp	00103$
                                    655 ;src\mytestrom.c:180: default:								// case 14-0
      0002CC                        656 00102$:
                                    657 ;src\mytestrom.c:181: MyCommand.sx = 16*step;
      0002CC 59               [ 4]  658 	ld	e, c
      0002CD 16 00            [ 7]  659 	ld	d, #0x00
      0002CF EB               [ 4]  660 	ex	de, hl
      0002D0 29               [11]  661 	add	hl, hl
      0002D1 29               [11]  662 	add	hl, hl
      0002D2 29               [11]  663 	add	hl, hl
      0002D3 29               [11]  664 	add	hl, hl
      0002D4 EB               [ 4]  665 	ex	de, hl
      0002D5 ED 53r00r00      [20]  666 	ld	(_MyCommand), de
                                    667 ;src\mytestrom.c:182: MyCommand.dx = MyCommand.sx + 16;
      0002D9 ED 5Br00r00      [20]  668 	ld	de, (#_MyCommand + 0)
      0002DD 21 10 00         [10]  669 	ld	hl, #0x0010
      0002E0 19               [11]  670 	add	hl, de
      0002E1 EB               [ 4]  671 	ex	de, hl
      0002E2 ED 53r04r00      [20]  672 	ld	((_MyCommand + 4)), de
                                    673 ;src\mytestrom.c:183: MyCommand.sy = 256*page;
      0002E6 3Ar28r00         [13]  674 	ld	a, (_page+0)
      0002E9 06 00            [ 7]  675 	ld	b, #0x00
      0002EB 57               [ 4]  676 	ld	d, a
      0002EC 1E 00            [ 7]  677 	ld	e, #0x00
      0002EE ED 53r02r00      [20]  678 	ld	((_MyCommand + 2)), de
                                    679 ;src\mytestrom.c:184: MyCommand.dy = MyCommand.sy ^ 256;		
      0002F2 ED 5Br02r00      [20]  680 	ld	de, (#(_MyCommand + 2) + 0)
      0002F6 7A               [ 4]  681 	ld	a, d
      0002F7 EE 01            [ 7]  682 	xor	a, #0x01
      0002F9 57               [ 4]  683 	ld	d, a
      0002FA ED 53r06r00      [20]  684 	ld	((_MyCommand + 6)), de
                                    685 ;src\mytestrom.c:185: MyCommand.nx = 16;						
      0002FE 21 10 00         [10]  686 	ld	hl, #0x0010
      000301 22r08r00         [16]  687 	ld	((_MyCommand + 8)), hl
                                    688 ;src\mytestrom.c:186: myfVDP(&MyCommand);					
      000304 C5               [11]  689 	push	bc
      000305 21r00r00         [10]  690 	ld	hl, #_MyCommand
      000308 CDrF2r06         [17]  691 	call	_myfVDP
      00030B C1               [10]  692 	pop	bc
                                    693 ;src\mytestrom.c:187: BorderLinesL(step,page,WLevelx);			
      00030C C5               [11]  694 	push	bc
      00030D 2Ar1Er00         [16]  695 	ld	hl, (_WLevelx)
      000310 E5               [11]  696 	push	hl
      000311 3Ar28r00         [13]  697 	ld	a, (_page+0)
      000314 6F               [ 4]  698 	ld	l, a
                                    699 ;	spillPairReg hl
                                    700 ;	spillPairReg hl
      000315 79               [ 4]  701 	ld	a, c
      000316 CDrFEr04         [17]  702 	call	_BorderLinesL
      000319 C1               [10]  703 	pop	bc
                                    704 ;src\mytestrom.c:189: }
      00031A                        705 00103$:
                                    706 ;src\mytestrom.c:190: if (step==0) PatchPlotOneTile(16,page^1,WLevelx);				
      00031A 79               [ 4]  707 	ld	a, c
      00031B B7               [ 4]  708 	or	a, a
      00031C C0               [11]  709 	ret	NZ
      00031D 3Ar28r00         [13]  710 	ld	a, (_page+0)
      000320 EE 01            [ 7]  711 	xor	a, #0x01
      000322 4F               [ 4]  712 	ld	c, a
      000323 2Ar1Er00         [16]  713 	ld	hl, (_WLevelx)
      000326 E5               [11]  714 	push	hl
      000327 69               [ 4]  715 	ld	l, c
                                    716 ;	spillPairReg hl
                                    717 ;	spillPairReg hl
      000328 3E 10            [ 7]  718 	ld	a, #0x10
      00032A CDr96r06         [17]  719 	call	_PatchPlotOneTile
                                    720 ;src\mytestrom.c:191: }
      00032D C9               [10]  721 	ret
                                    722 ;src\mytestrom.c:211: void PlotOneColumnTile(void) __sdcccall(1) 
                                    723 ;	---------------------------------
                                    724 ; Function PlotOneColumnTile
                                    725 ; ---------------------------------
      00032E                        726 _PlotOneColumnTile::
                                    727 ;src\mytestrom.c:243: __endasm;
      00032E D9               [ 4]  728 	exx
      00032F 2Ar2Dr0B         [16]  729 	ld	hl,(_p)
      000332 7E               [ 7]  730 	ld	a,(hl)
      000333 07               [ 4]  731 	rlca
      000334 07               [ 4]  732 	rlca
      000335 E6 03            [ 7]  733 	and	a,#3
      000337 87               [ 4]  734 	add	a,a
      000338 C6r00            [ 7]  735 	add	a,#b_data0
      00033A 32 00 90         [13]  736 	ld	(#0x9000),a
      00033D 3C               [ 4]  737 	inc	a
      00033E 32 00 B0         [13]  738 	ld	(#0xb000),a
      000341 7E               [ 7]  739 	ld	a,(hl)
      000342 23               [ 6]  740 	inc	hl
      000343 22r2Dr0B         [16]  741 	ld	(_p),hl ; save next tile
      000346 E6 3F            [ 7]  742 	and	a,#0x3F ; tile number
      000348 C6 80            [ 7]  743 	add	a,#0x80 ; address of the segment
      00034A 67               [ 4]  744 	ld	h,a ; address of the tile in the segment
      00034B 6A               [ 4]  745 	ld	l,d
      00034C D9               [ 4]  746 	exx
                                    747 	.rept	#16
                                    748 	out	(c),e ; set vram address in 14 bits
                                    749 	out	(c),d
                                    750 	inc	d ; new line
                                    751 	exx
                                    752 	outi	; write data
                                    753 	exx
                                    754 	.endm
      00034D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00034F ED 51            [12]    2 	out	(c),d
      000351 14               [ 4]    3 	inc	d ; new line
      000352 D9               [ 4]    4 	exx
      000353 ED A3            [16]    5 	outi	; write data
      000355 D9               [ 4]    6 	exx
      000356 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000358 ED 51            [12]    2 	out	(c),d
      00035A 14               [ 4]    3 	inc	d ; new line
      00035B D9               [ 4]    4 	exx
      00035C ED A3            [16]    5 	outi	; write data
      00035E D9               [ 4]    6 	exx
      00035F ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000361 ED 51            [12]    2 	out	(c),d
      000363 14               [ 4]    3 	inc	d ; new line
      000364 D9               [ 4]    4 	exx
      000365 ED A3            [16]    5 	outi	; write data
      000367 D9               [ 4]    6 	exx
      000368 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00036A ED 51            [12]    2 	out	(c),d
      00036C 14               [ 4]    3 	inc	d ; new line
      00036D D9               [ 4]    4 	exx
      00036E ED A3            [16]    5 	outi	; write data
      000370 D9               [ 4]    6 	exx
      000371 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000373 ED 51            [12]    2 	out	(c),d
      000375 14               [ 4]    3 	inc	d ; new line
      000376 D9               [ 4]    4 	exx
      000377 ED A3            [16]    5 	outi	; write data
      000379 D9               [ 4]    6 	exx
      00037A ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00037C ED 51            [12]    2 	out	(c),d
      00037E 14               [ 4]    3 	inc	d ; new line
      00037F D9               [ 4]    4 	exx
      000380 ED A3            [16]    5 	outi	; write data
      000382 D9               [ 4]    6 	exx
      000383 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000385 ED 51            [12]    2 	out	(c),d
      000387 14               [ 4]    3 	inc	d ; new line
      000388 D9               [ 4]    4 	exx
      000389 ED A3            [16]    5 	outi	; write data
      00038B D9               [ 4]    6 	exx
      00038C ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00038E ED 51            [12]    2 	out	(c),d
      000390 14               [ 4]    3 	inc	d ; new line
      000391 D9               [ 4]    4 	exx
      000392 ED A3            [16]    5 	outi	; write data
      000394 D9               [ 4]    6 	exx
      000395 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000397 ED 51            [12]    2 	out	(c),d
      000399 14               [ 4]    3 	inc	d ; new line
      00039A D9               [ 4]    4 	exx
      00039B ED A3            [16]    5 	outi	; write data
      00039D D9               [ 4]    6 	exx
      00039E ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003A0 ED 51            [12]    2 	out	(c),d
      0003A2 14               [ 4]    3 	inc	d ; new line
      0003A3 D9               [ 4]    4 	exx
      0003A4 ED A3            [16]    5 	outi	; write data
      0003A6 D9               [ 4]    6 	exx
      0003A7 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003A9 ED 51            [12]    2 	out	(c),d
      0003AB 14               [ 4]    3 	inc	d ; new line
      0003AC D9               [ 4]    4 	exx
      0003AD ED A3            [16]    5 	outi	; write data
      0003AF D9               [ 4]    6 	exx
      0003B0 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003B2 ED 51            [12]    2 	out	(c),d
      0003B4 14               [ 4]    3 	inc	d ; new line
      0003B5 D9               [ 4]    4 	exx
      0003B6 ED A3            [16]    5 	outi	; write data
      0003B8 D9               [ 4]    6 	exx
      0003B9 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003BB ED 51            [12]    2 	out	(c),d
      0003BD 14               [ 4]    3 	inc	d ; new line
      0003BE D9               [ 4]    4 	exx
      0003BF ED A3            [16]    5 	outi	; write data
      0003C1 D9               [ 4]    6 	exx
      0003C2 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003C4 ED 51            [12]    2 	out	(c),d
      0003C6 14               [ 4]    3 	inc	d ; new line
      0003C7 D9               [ 4]    4 	exx
      0003C8 ED A3            [16]    5 	outi	; write data
      0003CA D9               [ 4]    6 	exx
      0003CB ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003CD ED 51            [12]    2 	out	(c),d
      0003CF 14               [ 4]    3 	inc	d ; new line
      0003D0 D9               [ 4]    4 	exx
      0003D1 ED A3            [16]    5 	outi	; write data
      0003D3 D9               [ 4]    6 	exx
      0003D4 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003D6 ED 51            [12]    2 	out	(c),d
      0003D8 14               [ 4]    3 	inc	d ; new line
      0003D9 D9               [ 4]    4 	exx
      0003DA ED A3            [16]    5 	outi	; write data
      0003DC D9               [ 4]    6 	exx
                                    755 ;src\mytestrom.c:244: }
      0003DD C9               [10]  756 	ret
                                    757 ;src\mytestrom.c:246: void PlotOneColumnTileAndMask(void) __sdcccall(1) 
                                    758 ;	---------------------------------
                                    759 ; Function PlotOneColumnTileAndMask
                                    760 ; ---------------------------------
      0003DE                        761 _PlotOneColumnTileAndMask::
                                    762 ;src\mytestrom.c:282: __endasm;
      0003DE D9               [ 4]  763 	exx
      0003DF 2Ar2Dr0B         [16]  764 	ld	hl,(_p)
      0003E2 7E               [ 7]  765 	ld	a,(hl)
      0003E3 07               [ 4]  766 	rlca
      0003E4 07               [ 4]  767 	rlca
      0003E5 E6 03            [ 7]  768 	and	a,#3
      0003E7 87               [ 4]  769 	add	a,a
      0003E8 C6r00            [ 7]  770 	add	a,#b_data0
      0003EA 32 00 90         [13]  771 	ld	(#0x9000),a
      0003ED 3C               [ 4]  772 	inc	a
      0003EE 32 00 B0         [13]  773 	ld	(#0xb000),a
      0003F1 7E               [ 7]  774 	ld	a,(hl)
      0003F2 23               [ 6]  775 	inc	hl
      0003F3 22r2Dr0B         [16]  776 	ld	(_p),hl ; save next tile
      0003F6 E6 3F            [ 7]  777 	and	a,#0x3F ; tile number
      0003F8 C6 80            [ 7]  778 	add	a,#0x80 ; address of the segment
      0003FA 67               [ 4]  779 	ld	h,a ; address of the tile in the segment
      0003FB 6A               [ 4]  780 	ld	l,d
      0003FC D9               [ 4]  781 	exx
                                    782 	.rept	#16
                                    783 	out	(c),e ; set vram address in 14 bits
                                    784 	out	(c),d
                                    785 	exx
                                    786 	outi	; write data
                                    787 	exx
                                    788 	out	(c),l ; set vram address in 14 bits for border
                                    789 	out	(c),d
                                    790 	inc	d ; new line
                                    791 	xor	a,a ; write border
                                    792 	out	(#0x98),a
                                    793 	.endm
      0003FD ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003FF ED 51            [12]    2 	out	(c),d
      000401 D9               [ 4]    3 	exx
      000402 ED A3            [16]    4 	outi	; write data
      000404 D9               [ 4]    5 	exx
      000405 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000407 ED 51            [12]    7 	out	(c),d
      000409 14               [ 4]    8 	inc	d ; new line
      00040A AF               [ 4]    9 	xor	a,a ; write border
      00040B D3 98            [11]   10 	out	(#0x98),a
      00040D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00040F ED 51            [12]    2 	out	(c),d
      000411 D9               [ 4]    3 	exx
      000412 ED A3            [16]    4 	outi	; write data
      000414 D9               [ 4]    5 	exx
      000415 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000417 ED 51            [12]    7 	out	(c),d
      000419 14               [ 4]    8 	inc	d ; new line
      00041A AF               [ 4]    9 	xor	a,a ; write border
      00041B D3 98            [11]   10 	out	(#0x98),a
      00041D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00041F ED 51            [12]    2 	out	(c),d
      000421 D9               [ 4]    3 	exx
      000422 ED A3            [16]    4 	outi	; write data
      000424 D9               [ 4]    5 	exx
      000425 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000427 ED 51            [12]    7 	out	(c),d
      000429 14               [ 4]    8 	inc	d ; new line
      00042A AF               [ 4]    9 	xor	a,a ; write border
      00042B D3 98            [11]   10 	out	(#0x98),a
      00042D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00042F ED 51            [12]    2 	out	(c),d
      000431 D9               [ 4]    3 	exx
      000432 ED A3            [16]    4 	outi	; write data
      000434 D9               [ 4]    5 	exx
      000435 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000437 ED 51            [12]    7 	out	(c),d
      000439 14               [ 4]    8 	inc	d ; new line
      00043A AF               [ 4]    9 	xor	a,a ; write border
      00043B D3 98            [11]   10 	out	(#0x98),a
      00043D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00043F ED 51            [12]    2 	out	(c),d
      000441 D9               [ 4]    3 	exx
      000442 ED A3            [16]    4 	outi	; write data
      000444 D9               [ 4]    5 	exx
      000445 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000447 ED 51            [12]    7 	out	(c),d
      000449 14               [ 4]    8 	inc	d ; new line
      00044A AF               [ 4]    9 	xor	a,a ; write border
      00044B D3 98            [11]   10 	out	(#0x98),a
      00044D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00044F ED 51            [12]    2 	out	(c),d
      000451 D9               [ 4]    3 	exx
      000452 ED A3            [16]    4 	outi	; write data
      000454 D9               [ 4]    5 	exx
      000455 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000457 ED 51            [12]    7 	out	(c),d
      000459 14               [ 4]    8 	inc	d ; new line
      00045A AF               [ 4]    9 	xor	a,a ; write border
      00045B D3 98            [11]   10 	out	(#0x98),a
      00045D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00045F ED 51            [12]    2 	out	(c),d
      000461 D9               [ 4]    3 	exx
      000462 ED A3            [16]    4 	outi	; write data
      000464 D9               [ 4]    5 	exx
      000465 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000467 ED 51            [12]    7 	out	(c),d
      000469 14               [ 4]    8 	inc	d ; new line
      00046A AF               [ 4]    9 	xor	a,a ; write border
      00046B D3 98            [11]   10 	out	(#0x98),a
      00046D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00046F ED 51            [12]    2 	out	(c),d
      000471 D9               [ 4]    3 	exx
      000472 ED A3            [16]    4 	outi	; write data
      000474 D9               [ 4]    5 	exx
      000475 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000477 ED 51            [12]    7 	out	(c),d
      000479 14               [ 4]    8 	inc	d ; new line
      00047A AF               [ 4]    9 	xor	a,a ; write border
      00047B D3 98            [11]   10 	out	(#0x98),a
      00047D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00047F ED 51            [12]    2 	out	(c),d
      000481 D9               [ 4]    3 	exx
      000482 ED A3            [16]    4 	outi	; write data
      000484 D9               [ 4]    5 	exx
      000485 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000487 ED 51            [12]    7 	out	(c),d
      000489 14               [ 4]    8 	inc	d ; new line
      00048A AF               [ 4]    9 	xor	a,a ; write border
      00048B D3 98            [11]   10 	out	(#0x98),a
      00048D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00048F ED 51            [12]    2 	out	(c),d
      000491 D9               [ 4]    3 	exx
      000492 ED A3            [16]    4 	outi	; write data
      000494 D9               [ 4]    5 	exx
      000495 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000497 ED 51            [12]    7 	out	(c),d
      000499 14               [ 4]    8 	inc	d ; new line
      00049A AF               [ 4]    9 	xor	a,a ; write border
      00049B D3 98            [11]   10 	out	(#0x98),a
      00049D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00049F ED 51            [12]    2 	out	(c),d
      0004A1 D9               [ 4]    3 	exx
      0004A2 ED A3            [16]    4 	outi	; write data
      0004A4 D9               [ 4]    5 	exx
      0004A5 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004A7 ED 51            [12]    7 	out	(c),d
      0004A9 14               [ 4]    8 	inc	d ; new line
      0004AA AF               [ 4]    9 	xor	a,a ; write border
      0004AB D3 98            [11]   10 	out	(#0x98),a
      0004AD ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004AF ED 51            [12]    2 	out	(c),d
      0004B1 D9               [ 4]    3 	exx
      0004B2 ED A3            [16]    4 	outi	; write data
      0004B4 D9               [ 4]    5 	exx
      0004B5 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004B7 ED 51            [12]    7 	out	(c),d
      0004B9 14               [ 4]    8 	inc	d ; new line
      0004BA AF               [ 4]    9 	xor	a,a ; write border
      0004BB D3 98            [11]   10 	out	(#0x98),a
      0004BD ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004BF ED 51            [12]    2 	out	(c),d
      0004C1 D9               [ 4]    3 	exx
      0004C2 ED A3            [16]    4 	outi	; write data
      0004C4 D9               [ 4]    5 	exx
      0004C5 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004C7 ED 51            [12]    7 	out	(c),d
      0004C9 14               [ 4]    8 	inc	d ; new line
      0004CA AF               [ 4]    9 	xor	a,a ; write border
      0004CB D3 98            [11]   10 	out	(#0x98),a
      0004CD ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004CF ED 51            [12]    2 	out	(c),d
      0004D1 D9               [ 4]    3 	exx
      0004D2 ED A3            [16]    4 	outi	; write data
      0004D4 D9               [ 4]    5 	exx
      0004D5 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004D7 ED 51            [12]    7 	out	(c),d
      0004D9 14               [ 4]    8 	inc	d ; new line
      0004DA AF               [ 4]    9 	xor	a,a ; write border
      0004DB D3 98            [11]   10 	out	(#0x98),a
      0004DD ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004DF ED 51            [12]    2 	out	(c),d
      0004E1 D9               [ 4]    3 	exx
      0004E2 ED A3            [16]    4 	outi	; write data
      0004E4 D9               [ 4]    5 	exx
      0004E5 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004E7 ED 51            [12]    7 	out	(c),d
      0004E9 14               [ 4]    8 	inc	d ; new line
      0004EA AF               [ 4]    9 	xor	a,a ; write border
      0004EB D3 98            [11]   10 	out	(#0x98),a
      0004ED ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004EF ED 51            [12]    2 	out	(c),d
      0004F1 D9               [ 4]    3 	exx
      0004F2 ED A3            [16]    4 	outi	; write data
      0004F4 D9               [ 4]    5 	exx
      0004F5 ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004F7 ED 51            [12]    7 	out	(c),d
      0004F9 14               [ 4]    8 	inc	d ; new line
      0004FA AF               [ 4]    9 	xor	a,a ; write border
      0004FB D3 98            [11]   10 	out	(#0x98),a
                                    794 ;src\mytestrom.c:283: }
      0004FD C9               [10]  795 	ret
                                    796 ;src\mytestrom.c:285: void BorderLinesL(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    797 ;	---------------------------------
                                    798 ; Function BorderLinesL
                                    799 ; ---------------------------------
      0004FE                        800 _BorderLinesL::
                                    801 ;src\mytestrom.c:389: __endasm;
      0004FE C1               [10]  802 	pop	bc ; get ret address
      0004FF D1               [10]  803 	pop	de ; de = MapX
      000500 C5               [11]  804 	push	bc ; save ret address
      000501 08               [ 4]  805 	ex	af,af'			; a' = ScrnX
      000502 7D               [ 4]  806 	ld	a,l ; l = page
      000503 87               [ 4]  807 	add	a,a
      000504 87               [ 4]  808 	add	a,a
      000505 32 ED FF         [13]  809 	ld	(_RG14SA),a
      000508 4B               [ 4]  810 	ld	c,e ; C = low(mapx)
      000509 CB 2A            [ 8]  811 	sra	d ; DE/16
      00050B CB 1B            [ 8]  812 	rr	e
      00050D CB 2A            [ 8]  813 	sra	d
      00050F CB 1B            [ 8]  814 	rr	e
      000511 CB 2A            [ 8]  815 	sra	d
      000513 CB 1B            [ 8]  816 	rr	e
      000515 CB 2A            [ 8]  817 	sra	d
      000517 CB 1B            [ 8]  818 	rr	e
      000519 6B               [ 4]  819 	ld	l,e
      00051A 62               [ 4]  820 	ld	h,d
      00051B 29               [11]  821 	add	hl,hl
      00051C 29               [11]  822 	add	hl,hl
      00051D 19               [11]  823 	add	hl,de
      00051E 29               [11]  824 	add	hl,hl
      00051F 19               [11]  825 	add	hl,de ; DE/16 * 11
      000520 11r2Dr00         [10]  826 	ld	de,#_LevelMap
      000523 19               [11]  827 	add	hl,de
      000524 22r2Dr0B         [16]  828 	ld	(_p), hl
      000527 08               [ 4]  829 	ex	af,af'				; a' = ScrnX
      000528 5F               [ 4]  830 	ld	e,a ; DE vramm address for new border data
      000529 C6 F0            [ 7]  831 	add	a,#240 ; L = E +/- 240U according to the scroll direction
      00052B 6F               [ 4]  832 	ld	l,a ; DL hold vramm address for blank border
      00052C 79               [ 4]  833 	ld	a,c ; C = low(MapX)
      00052D E6 0F            [ 7]  834 	and	a,#15
      00052F 87               [ 4]  835 	add	a,a
      000530 87               [ 4]  836 	add	a,a
      000531 87               [ 4]  837 	add	a,a
      000532 87               [ 4]  838 	add	a,a
      000533 D9               [ 4]  839 	exx
      000534 57               [ 4]  840 	ld	d,a ; common offeset of the address in the tile
      000535 0E 98            [ 7]  841 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      000537 D9               [ 4]  842 	exx
      000538 F3               [ 4]  843 	di
      000539 3A ED FF         [13]  844 	ld	a,(_RG14SA) ; set address in vdp(14)
      00053C D3 99            [11]  845 	out	(#0x99), a
      00053E 3C               [ 4]  846 	inc	a
      00053F 32 ED FF         [13]  847 	ld	(_RG14SA),a ; save next block
      000542 3E 8E            [ 7]  848 	ld	a,#0x8E
      000544 D3 99            [11]  849 	out	(#0x99), a
      000546 0E 99            [ 7]  850 	ld	c,#0x99
      000548 16 40            [ 7]  851 	ld	d,#0x40
      00054A CDrDEr03         [17]  852 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      00054D CDrDEr03         [17]  853 	call	_PlotOneColumnTileAndMask
      000550 CDrDEr03         [17]  854 	call	_PlotOneColumnTileAndMask
      000553 CDrDEr03         [17]  855 	call	_PlotOneColumnTileAndMask
      000556 3A ED FF         [13]  856 	ld	a,(_RG14SA) ; set address in vdp(14)
      000559 D3 99            [11]  857 	out	(#0x99), a
      00055B 3C               [ 4]  858 	inc	a
      00055C 32 ED FF         [13]  859 	ld	(_RG14SA),a ; save next block
      00055F 3E 8E            [ 7]  860 	ld	a,#0x8E
      000561 D3 99            [11]  861 	out	(#0x99), a
      000563 16 40            [ 7]  862 	ld	d,#0x40
      000565 CDrDEr03         [17]  863 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000568 CDrDEr03         [17]  864 	call	_PlotOneColumnTileAndMask
      00056B CDrDEr03         [17]  865 	call	_PlotOneColumnTileAndMask
      00056E CDrDEr03         [17]  866 	call	_PlotOneColumnTileAndMask
      000571 3A ED FF         [13]  867 	ld	a,(_RG14SA) ; set address in vdp(14)
      000574 D3 99            [11]  868 	out	(#0x99), a
      000576 3E 8E            [ 7]  869 	ld	a,#0x8E
      000578 D3 99            [11]  870 	out	(#0x99), a
      00057A 16 40            [ 7]  871 	ld	d,#0x40
      00057C CDrDEr03         [17]  872 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      00057F CDrDEr03         [17]  873 	call	_PlotOneColumnTileAndMask
      000582 CDrDEr03         [17]  874 	call	_PlotOneColumnTileAndMask
      000585 FB               [ 4]  875 	ei
      000586 C9               [10]  876 	ret
                                    877 ;src\mytestrom.c:390: }
                                    878 ;src\mytestrom.c:392: void BorderLinesR(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    879 ;	---------------------------------
                                    880 ; Function BorderLinesR
                                    881 ; ---------------------------------
      000587                        882 _BorderLinesR::
                                    883 ;src\mytestrom.c:496: __endasm;
      000587 C1               [10]  884 	pop	bc ; get ret address
      000588 D1               [10]  885 	pop	de ; DE = MapX+240U
      000589 C5               [11]  886 	push	bc ; save ret address
      00058A 08               [ 4]  887 	ex	af,af'			; a' = ScrnX
      00058B 7D               [ 4]  888 	ld	a,l ; l = page
      00058C 87               [ 4]  889 	add	a,a
      00058D 87               [ 4]  890 	add	a,a
      00058E 32 ED FF         [13]  891 	ld	(_RG14SA),a
      000591 4B               [ 4]  892 	ld	c,e ; C = low(mapx)
      000592 CB 2A            [ 8]  893 	sra	d ; DE/16
      000594 CB 1B            [ 8]  894 	rr	e
      000596 CB 2A            [ 8]  895 	sra	d
      000598 CB 1B            [ 8]  896 	rr	e
      00059A CB 2A            [ 8]  897 	sra	d
      00059C CB 1B            [ 8]  898 	rr	e
      00059E CB 2A            [ 8]  899 	sra	d
      0005A0 CB 1B            [ 8]  900 	rr	e
      0005A2 6B               [ 4]  901 	ld	l,e
      0005A3 62               [ 4]  902 	ld	h,d
      0005A4 29               [11]  903 	add	hl,hl
      0005A5 29               [11]  904 	add	hl,hl
      0005A6 19               [11]  905 	add	hl,de
      0005A7 29               [11]  906 	add	hl,hl
      0005A8 19               [11]  907 	add	hl,de ; DE/16 * 11
      0005A9 11r2Dr00         [10]  908 	ld	de,#_LevelMap
      0005AC 19               [11]  909 	add	hl,de
      0005AD 22r2Dr0B         [16]  910 	ld	(_p), hl
      0005B0 08               [ 4]  911 	ex	af,af'				; a' = ScrnX
      0005B1 5F               [ 4]  912 	ld	e,a ; DE vramm address for new border data
      0005B2 D6 F0            [ 7]  913 	sub	a,#240 ; L = E +/- 240U according to the scroll direction
      0005B4 6F               [ 4]  914 	ld	l,a ; DL hold vramm address for blank border
      0005B5 79               [ 4]  915 	ld	a,c ; C = low(MapX)
      0005B6 E6 0F            [ 7]  916 	and	a,#15
      0005B8 87               [ 4]  917 	add	a,a
      0005B9 87               [ 4]  918 	add	a,a
      0005BA 87               [ 4]  919 	add	a,a
      0005BB 87               [ 4]  920 	add	a,a
      0005BC D9               [ 4]  921 	exx
      0005BD 57               [ 4]  922 	ld	d,a ; common offeset of the address in the tile
      0005BE 0E 98            [ 7]  923 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      0005C0 D9               [ 4]  924 	exx
      0005C1 F3               [ 4]  925 	di
      0005C2 3A ED FF         [13]  926 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005C5 D3 99            [11]  927 	out	(#0x99), a
      0005C7 3C               [ 4]  928 	inc	a
      0005C8 32 ED FF         [13]  929 	ld	(_RG14SA),a ; save next block
      0005CB 3E 8E            [ 7]  930 	ld	a,#0x8E
      0005CD D3 99            [11]  931 	out	(#0x99), a
      0005CF 0E 99            [ 7]  932 	ld	c,#0x99
      0005D1 16 40            [ 7]  933 	ld	d,#0x40
      0005D3 CDrDEr03         [17]  934 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005D6 CDrDEr03         [17]  935 	call	_PlotOneColumnTileAndMask
      0005D9 CDrDEr03         [17]  936 	call	_PlotOneColumnTileAndMask
      0005DC CDrDEr03         [17]  937 	call	_PlotOneColumnTileAndMask
      0005DF 3A ED FF         [13]  938 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005E2 D3 99            [11]  939 	out	(#0x99), a
      0005E4 3C               [ 4]  940 	inc	a
      0005E5 32 ED FF         [13]  941 	ld	(_RG14SA),a ; save next block
      0005E8 3E 8E            [ 7]  942 	ld	a,#0x8E
      0005EA D3 99            [11]  943 	out	(#0x99), a
      0005EC 16 40            [ 7]  944 	ld	d,#0x40
      0005EE CDrDEr03         [17]  945 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005F1 CDrDEr03         [17]  946 	call	_PlotOneColumnTileAndMask
      0005F4 CDrDEr03         [17]  947 	call	_PlotOneColumnTileAndMask
      0005F7 CDrDEr03         [17]  948 	call	_PlotOneColumnTileAndMask
      0005FA 3A ED FF         [13]  949 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005FD D3 99            [11]  950 	out	(#0x99), a
      0005FF 3E 8E            [ 7]  951 	ld	a,#0x8E
      000601 D3 99            [11]  952 	out	(#0x99), a
      000603 16 40            [ 7]  953 	ld	d,#0x40
      000605 CDrDEr03         [17]  954 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      000608 CDrDEr03         [17]  955 	call	_PlotOneColumnTileAndMask
      00060B CDrDEr03         [17]  956 	call	_PlotOneColumnTileAndMask
      00060E FB               [ 4]  957 	ei
      00060F C9               [10]  958 	ret
                                    959 ;src\mytestrom.c:497: }
                                    960 ;src\mytestrom.c:499: void NewLine(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    961 ;	---------------------------------
                                    962 ; Function NewLine
                                    963 ; ---------------------------------
      000610                        964 _NewLine::
                                    965 ;src\mytestrom.c:608: __endasm;
      000610 C1               [10]  966 	pop	bc ; get ret address
      000611 D1               [10]  967 	pop	de ; de = MapX
      000612 C5               [11]  968 	push	bc ; save ret address
      000613 08               [ 4]  969 	ex	af,af'			; a' = ScrnX
      000614 7D               [ 4]  970 	ld	a,l ; l = page
      000615 87               [ 4]  971 	add	a,a
      000616 87               [ 4]  972 	add	a,a
      000617 32 ED FF         [13]  973 	ld	(_RG14SA),a
      00061A 4B               [ 4]  974 	ld	c,e ; C = low(mapx)
      00061B CB 2A            [ 8]  975 	sra	d ; DE/16
      00061D CB 1B            [ 8]  976 	rr	e
      00061F CB 2A            [ 8]  977 	sra	d
      000621 CB 1B            [ 8]  978 	rr	e
      000623 CB 2A            [ 8]  979 	sra	d
      000625 CB 1B            [ 8]  980 	rr	e
      000627 CB 2A            [ 8]  981 	sra	d
      000629 CB 1B            [ 8]  982 	rr	e
      00062B 6B               [ 4]  983 	ld	l,e
      00062C 62               [ 4]  984 	ld	h,d
      00062D 29               [11]  985 	add	hl,hl
      00062E 29               [11]  986 	add	hl,hl
      00062F 19               [11]  987 	add	hl,de
      000630 29               [11]  988 	add	hl,hl
      000631 19               [11]  989 	add	hl,de ; DE/16 * 11
      000632 11r2Dr00         [10]  990 	ld	de,#_LevelMap
      000635 19               [11]  991 	add	hl,de
      000636 22r2Dr0B         [16]  992 	ld	(_p), hl
      000639 08               [ 4]  993 	ex	af,af'			; a' = ScrnX
      00063A 5F               [ 4]  994 	ld	e,a ; DE vramm address for new border data
      00063B 79               [ 4]  995 	ld	a,c ; C = low(MapX)
      00063C E6 0F            [ 7]  996 	and	a,#15
      00063E 87               [ 4]  997 	add	a,a
      00063F 87               [ 4]  998 	add	a,a
      000640 87               [ 4]  999 	add	a,a
      000641 87               [ 4] 1000 	add	a,a
      000642 D9               [ 4] 1001 	exx
      000643 57               [ 4] 1002 	ld	d,a ; common offeset of the address in the tile
      000644 0E 98            [ 7] 1003 	ld	c,#0x98 ; used by _PlotOneColumnTile
      000646 D9               [ 4] 1004 	exx
      000647 F3               [ 4] 1005 	di
      000648 3A ED FF         [13] 1006 	ld	a,(_RG14SA) ; set address in vdp(14)
      00064B D3 99            [11] 1007 	out	(#0x99), a
      00064D 3C               [ 4] 1008 	inc	a
      00064E 32 ED FF         [13] 1009 	ld	(_RG14SA),a ; save next block
      000651 3E 8E            [ 7] 1010 	ld	a,#0x8E
      000653 D3 99            [11] 1011 	out	(#0x99), a
      000655 0E 99            [ 7] 1012 	ld	c,#0x99
      000657 16 40            [ 7] 1013 	ld	d,#0x40
      000659 CDr2Er03         [17] 1014 	call	_PlotOneColumnTile ; 4 tiles
      00065C CDr2Er03         [17] 1015 	call	_PlotOneColumnTile
      00065F CDr2Er03         [17] 1016 	call	_PlotOneColumnTile
      000662 CDr2Er03         [17] 1017 	call	_PlotOneColumnTile
      000665 3A ED FF         [13] 1018 	ld	a,(_RG14SA) ; set address in vdp(14)
      000668 D3 99            [11] 1019 	out	(#0x99), a
      00066A 3C               [ 4] 1020 	inc	a
      00066B 32 ED FF         [13] 1021 	ld	(_RG14SA),a ; save next block
      00066E 3E 8E            [ 7] 1022 	ld	a,#0x8E
      000670 D3 99            [11] 1023 	out	(#0x99), a
      000672 16 40            [ 7] 1024 	ld	d,#0x40
      000674 CDr2Er03         [17] 1025 	call	_PlotOneColumnTile ; 4 tiles
      000677 CDr2Er03         [17] 1026 	call	_PlotOneColumnTile
      00067A CDr2Er03         [17] 1027 	call	_PlotOneColumnTile
      00067D CDr2Er03         [17] 1028 	call	_PlotOneColumnTile
      000680 3A ED FF         [13] 1029 	ld	a,(_RG14SA) ; set address in vdp(14)
      000683 D3 99            [11] 1030 	out	(#0x99), a
      000685 3E 8E            [ 7] 1031 	ld	a,#0x8E
      000687 D3 99            [11] 1032 	out	(#0x99), a
      000689 16 40            [ 7] 1033 	ld	d,#0x40
      00068B CDr2Er03         [17] 1034 	call	_PlotOneColumnTile ; 3 tiles
      00068E CDr2Er03         [17] 1035 	call	_PlotOneColumnTile
      000691 CDr2Er03         [17] 1036 	call	_PlotOneColumnTile
      000694 FB               [ 4] 1037 	ei
      000695 C9               [10] 1038 	ret
                                   1039 ;src\mytestrom.c:609: }
                                   1040 ;src\mytestrom.c:611: void PatchPlotOneTile(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                   1041 ;	---------------------------------
                                   1042 ; Function PatchPlotOneTile
                                   1043 ; ---------------------------------
      000696                       1044 _PatchPlotOneTile::
                                   1045 ;src\mytestrom.c:694: __endasm;
      000696 C1               [10] 1046 	pop	bc ; get ret address
      000697 D1               [10] 1047 	pop	de ; DE = MapX
      000698 C5               [11] 1048 	push	bc ; save ret address
      000699 08               [ 4] 1049 	ex	af,af'			; a' = ScrnX
      00069A 7D               [ 4] 1050 	ld	a,l ; l = page
      00069B 87               [ 4] 1051 	add	a,a
      00069C 87               [ 4] 1052 	add	a,a
      00069D 32 ED FF         [13] 1053 	ld	(_RG14SA),a
      0006A0 4B               [ 4] 1054 	ld	c,e ; C = low(mapx)
      0006A1 CB 2A            [ 8] 1055 	sra	d ; DE/16
      0006A3 CB 1B            [ 8] 1056 	rr	e
      0006A5 CB 2A            [ 8] 1057 	sra	d
      0006A7 CB 1B            [ 8] 1058 	rr	e
      0006A9 CB 2A            [ 8] 1059 	sra	d
      0006AB CB 1B            [ 8] 1060 	rr	e
      0006AD CB 2A            [ 8] 1061 	sra	d
      0006AF CB 1B            [ 8] 1062 	rr	e
      0006B1 6B               [ 4] 1063 	ld	l,e
      0006B2 62               [ 4] 1064 	ld	h,d
      0006B3 29               [11] 1065 	add	hl,hl
      0006B4 29               [11] 1066 	add	hl,hl
      0006B5 19               [11] 1067 	add	hl,de
      0006B6 29               [11] 1068 	add	hl,hl
      0006B7 19               [11] 1069 	add	hl,de ; DE/16 * 11
      0006B8 11r2Dr00         [10] 1070 	ld	de,#_LevelMap
      0006BB 19               [11] 1071 	add	hl,de
      0006BC 22r2Dr0B         [16] 1072 	ld	(_p), hl
      0006BF 08               [ 4] 1073 	ex	af,af'				; a' = ScrnX
      0006C0 5F               [ 4] 1074 	ld	e,a ; DE vramm address for new border data
      0006C1 79               [ 4] 1075 	ld	a,c ; C = low(MapX)
      0006C2 E6 0F            [ 7] 1076 	and	a,#15
      0006C4 87               [ 4] 1077 	add	a,a
      0006C5 87               [ 4] 1078 	add	a,a
      0006C6 87               [ 4] 1079 	add	a,a
      0006C7 87               [ 4] 1080 	add	a,a
      0006C8 D9               [ 4] 1081 	exx
      0006C9 57               [ 4] 1082 	ld	d,a ; common offeset of the address in the tile
      0006CA 0E 98            [ 7] 1083 	ld	c,#0x98 ; used by _PlotOneColumnTile
      0006CC D9               [ 4] 1084 	exx
      0006CD F3               [ 4] 1085 	di
      0006CE 3A ED FF         [13] 1086 	ld	a,(_RG14SA) ; set address in vdp(14)
      0006D1 D3 99            [11] 1087 	out	(#0x99), a
      0006D3 3E 8E            [ 7] 1088 	ld	a,#0x8E
      0006D5 D3 99            [11] 1089 	out	(#0x99), a
      0006D7 16 40            [ 7] 1090 	ld	d,#0x40
      0006D9 0E 99            [ 7] 1091 	ld	c,#0x99
      0006DB CDr2Er03         [17] 1092 	call	_PlotOneColumnTile ; 1 tile
      0006DE FB               [ 4] 1093 	ei
      0006DF C9               [10] 1094 	ret
                                   1095 ;src\mytestrom.c:695: }
                                   1096 ;src\mytestrom.c:697: void 	myVDPwrite(char data, char vdpreg) __sdcccall(1) __naked
                                   1097 ;	---------------------------------
                                   1098 ; Function myVDPwrite
                                   1099 ; ---------------------------------
      0006E0                       1100 _myVDPwrite::
                                   1101 ;src\mytestrom.c:709: __endasm;
      0006E0 F3               [ 4] 1102 	di
      0006E1 D3 99            [11] 1103 	out	(#0x99),a
      0006E3 3E 80            [ 7] 1104 	ld	a,#128
      0006E5 B5               [ 4] 1105 	or	a,l
      0006E6 D3 99            [11] 1106 	out	(#0x99),a ;R#A := L
      0006E8 FB               [ 4] 1107 	ei
      0006E9 C9               [10] 1108 	ret
                                   1109 ;src\mytestrom.c:711: }	
                                   1110 ;src\mytestrom.c:713: unsigned char myInPort(unsigned char port) __sdcccall(1) __naked __preserves_regs(b,h,l,d,e,iyl,iyh)
                                   1111 ;	---------------------------------
                                   1112 ; Function myInPort
                                   1113 ; ---------------------------------
      0006EA                       1114 _myInPort::
                                   1115 ;src\mytestrom.c:720: __endasm;
      0006EA 4F               [ 4] 1116 	ld	c, a ; port
      0006EB ED 78            [12] 1117 	in	a, (c) ; return value in A
      0006ED C9               [10] 1118 	ret
                                   1119 ;src\mytestrom.c:721: }
                                   1120 ;src\mytestrom.c:723: void myOutPort(unsigned char port,unsigned char data) __sdcccall(1) __naked __preserves_regs(a,b,h,l,d,e,iyl,iyh)
                                   1121 ;	---------------------------------
                                   1122 ; Function myOutPort
                                   1123 ; ---------------------------------
      0006EE                       1124 _myOutPort::
                                   1125 ;src\mytestrom.c:731: __endasm;
      0006EE 4F               [ 4] 1126 	ld	c, a ; port in A
      0006EF ED 69            [12] 1127 	out	(c),l ; value in L
      0006F1 C9               [10] 1128 	ret
                                   1129 ;src\mytestrom.c:732: }
                                   1130 ;src\mytestrom.c:734: void  	myfVDP(void *Address)  __sdcccall(1)  __naked
                                   1131 ;	---------------------------------
                                   1132 ; Function myfVDP
                                   1133 ; ---------------------------------
      0006F2                       1134 _myfVDP::
                                   1135 ;src\mytestrom.c:766: __endasm;
      0006F2 F3               [ 4] 1136 	di
      0006F3 3E 20            [ 7] 1137 	ld	a,#32 ; Start with Reg 32
      0006F5 D3 99            [11] 1138 	out	(#0x99),a
      0006F7 3E 91            [ 7] 1139 	ld	a,#128+#17
      0006F9 D3 99            [11] 1140 	out	(#0x99),a ;R#17 := 32
      0006FB 0E 9B            [ 7] 1141 	ld	c,#0x9b ; c=#0x9b
      0006FD                       1142 	fvdpWait:
      0006FD 3E 02            [ 7] 1143 	ld	a,#2
      0006FF D3 99            [11] 1144 	out	(#0x99),a
      000701 3E 8F            [ 7] 1145 	ld	a,#128+#15
      000703 D3 99            [11] 1146 	out	(#0x99),a
      000705 DB 99            [11] 1147 	in	a,(#0x99)
      000707 0F               [ 4] 1148 	rrca
      000708 DArFDr06         [10] 1149 	jp	c, fvdpWait ; wait CE
                                   1150 	.rept	#15
                                   1151 	OUTI
                                   1152 	.endm
      00070B ED A3            [16]    1 	OUTI
      00070D ED A3            [16]    1 	OUTI
      00070F ED A3            [16]    1 	OUTI
      000711 ED A3            [16]    1 	OUTI
      000713 ED A3            [16]    1 	OUTI
      000715 ED A3            [16]    1 	OUTI
      000717 ED A3            [16]    1 	OUTI
      000719 ED A3            [16]    1 	OUTI
      00071B ED A3            [16]    1 	OUTI
      00071D ED A3            [16]    1 	OUTI
      00071F ED A3            [16]    1 	OUTI
      000721 ED A3            [16]    1 	OUTI
      000723 ED A3            [16]    1 	OUTI
      000725 ED A3            [16]    1 	OUTI
      000727 ED A3            [16]    1 	OUTI
      000729 AF               [ 4] 1153 	xor	a,a ; set Status Register #0 for reading
      00072A D3 99            [11] 1154 	out	(#0x99),a
      00072C 3E 8F            [ 7] 1155 	ld	a,#0x8f
      00072E D3 99            [11] 1156 	out	(#0x99),a
      000730 FB               [ 4] 1157 	ei
      000731 C9               [10] 1158 	ret
                                   1159 ;src\mytestrom.c:767: }
                                   1160 ;src\mytestrom.c:819: void mySetAdjust(signed char x, signed char y) __sdcccall(1)
                                   1161 ;	---------------------------------
                                   1162 ; Function mySetAdjust
                                   1163 ; ---------------------------------
      000732                       1164 _mySetAdjust::
                                   1165 ;src\mytestrom.c:821: unsigned char value = ((x-8) & 15) | (((y-8) & 15)<<4);
      000732 C6 F8            [ 7] 1166 	add	a, #0xf8
      000734 E6 0F            [ 7] 1167 	and	a, #0x0f
      000736 4F               [ 4] 1168 	ld	c, a
      000737 7D               [ 4] 1169 	ld	a, l
      000738 C6 F8            [ 7] 1170 	add	a, #0xf8
      00073A E6 0F            [ 7] 1171 	and	a, #0x0f
      00073C 87               [ 4] 1172 	add	a, a
      00073D 87               [ 4] 1173 	add	a, a
      00073E 87               [ 4] 1174 	add	a, a
      00073F 87               [ 4] 1175 	add	a, a
      000740 B1               [ 4] 1176 	or	a, c
      000741 4F               [ 4] 1177 	ld	c, a
                                   1178 ;src\mytestrom.c:822: RG18SA = value;			// Reg18 Save
      000742 FD 21 F1 FF      [14] 1179 	ld	iy, #_RG18SA
      000746 FD 71 00         [19] 1180 	ld	0 (iy), c
                                   1181 ;src\mytestrom.c:823: myVDPwrite(value,18);
      000749 2E 12            [ 7] 1182 	ld	l, #0x12
                                   1183 ;	spillPairReg hl
                                   1184 ;	spillPairReg hl
      00074B 79               [ 4] 1185 	ld	a, c
                                   1186 ;src\mytestrom.c:824: }
      00074C C3rE0r06         [10] 1187 	jp	_myVDPwrite
                                   1188 ;src\mytestrom.c:831: void myFT_wait(unsigned char cicles) __sdcccall(1) __naked {
                                   1189 ;	---------------------------------
                                   1190 ; Function myFT_wait
                                   1191 ; ---------------------------------
      00074F                       1192 _myFT_wait::
                                   1193 ;src\mytestrom.c:854: __endasm;
      00074F B7               [ 4] 1194 	or	a, a
      000750                       1195 	00004$:
      000750 C8               [11] 1196 	ret	Z
      000751 76               [ 4] 1197 	halt
      000752 3D               [ 4] 1198 	dec	a
      000753 C3r50r07         [10] 1199 	jp	00004$
                                   1200 ;src\mytestrom.c:855: }
                                   1201 ;src\mytestrom.c:857: void WaitLineInt(void) __sdcccall(1) __naked {
                                   1202 ;	---------------------------------
                                   1203 ; Function WaitLineInt
                                   1204 ; ---------------------------------
      000756                       1205 _WaitLineInt::
                                   1206 ;src\mytestrom.c:887: __endasm;
      000756 F3               [ 4] 1207 	di
      000757 3E 01            [ 7] 1208 	ld	a,#1 ; set Status Register #1 for reading
      000759 D3 99            [11] 1209 	out	(#0x99),a
      00075B 3E 8F            [ 7] 1210 	ld	a,#0x8f
      00075D D3 99            [11] 1211 	out	(#0x99),a
      00075F                       1212 	WaitLI:
      00075F DB 99            [11] 1213 	in	a,(#0x99)
      000761 0F               [ 4] 1214 	rrca
      000762 30 FB            [12] 1215 	jr	nc,WaitLI
      000764 AF               [ 4] 1216 	xor	a,a ; set Status Register #0 for reading
      000765 D3 99            [11] 1217 	out	(#0x99),a
      000767 3E 8F            [ 7] 1218 	ld	a,#0x8f
      000769 D3 99            [11] 1219 	out	(#0x99),a
      00076B FB               [ 4] 1220 	ei
      00076C C9               [10] 1221 	ret
                                   1222 ;src\mytestrom.c:888: }
                                   1223 ;src\mytestrom.c:920: void FT_errorHandler(char n, char *name) __sdcccall(1) 
                                   1224 ;	---------------------------------
                                   1225 ; Function FT_errorHandler
                                   1226 ; ---------------------------------
      00076D                       1227 _FT_errorHandler::
      00076D 4F               [ 4] 1228 	ld	c, a
                                   1229 ;src\mytestrom.c:927: chgmod(0);
      00076E C5               [11] 1230 	push	bc
      00076F D5               [11] 1231 	push	de
      000770 AF               [ 4] 1232 	xor	a, a
      000771 CDrCEr0B         [17] 1233 	call	_chgmod
      000774 D1               [10] 1234 	pop	de
      000775 C1               [10] 1235 	pop	bc
                                   1236 ;src\mytestrom.c:929: switch (n)
      000776 79               [ 4] 1237 	ld	a, c
      000777 3D               [ 4] 1238 	dec	a
      000778 28 12            [12] 1239 	jr	Z, 00101$
      00077A 79               [ 4] 1240 	ld	a, c
      00077B D6 02            [ 7] 1241 	sub	a, #0x02
      00077D 28 1C            [12] 1242 	jr	Z, 00102$
      00077F 79               [ 4] 1243 	ld	a, c
      000780 D6 03            [ 7] 1244 	sub	a, #0x03
      000782 28 26            [12] 1245 	jr	Z, 00103$
      000784 79               [ 4] 1246 	ld	a, c
      000785 D6 04            [ 7] 1247 	sub	a, #0x04
      000787 28 2A            [12] 1248 	jr	Z, 00104$
      000789 C3rBFr07         [10] 1249 	jp	00105$
                                   1250 ;src\mytestrom.c:931: case 1:
      00078C                       1251 00101$:
                                   1252 ;src\mytestrom.c:932: Print("\n\rFAILED: fcb_open(): ");
      00078C D5               [11] 1253 	push	de
      00078D 21rC1r07         [10] 1254 	ld	hl, #___str_1
      000790 CDr73r0C         [17] 1255 	call	_Print
      000793 D1               [10] 1256 	pop	de
                                   1257 ;src\mytestrom.c:933: Print(name);
      000794 EB               [ 4] 1258 	ex	de, hl
      000795 CDr73r0C         [17] 1259 	call	_Print
                                   1260 ;src\mytestrom.c:934: break;
      000798 C3rBFr07         [10] 1261 	jp	00105$
                                   1262 ;src\mytestrom.c:936: case 2:
      00079B                       1263 00102$:
                                   1264 ;src\mytestrom.c:937: Print("\n\rFAILED: fcb_close():");
      00079B D5               [11] 1265 	push	de
      00079C 21rD8r07         [10] 1266 	ld	hl, #___str_2
      00079F CDr73r0C         [17] 1267 	call	_Print
      0007A2 D1               [10] 1268 	pop	de
                                   1269 ;src\mytestrom.c:938: Print(name);
      0007A3 EB               [ 4] 1270 	ex	de, hl
      0007A4 CDr73r0C         [17] 1271 	call	_Print
                                   1272 ;src\mytestrom.c:939: break;  
      0007A7 C3rBFr07         [10] 1273 	jp	00105$
                                   1274 ;src\mytestrom.c:941: case 3:
      0007AA                       1275 00103$:
                                   1276 ;src\mytestrom.c:942: Print("\n\rStop Kidding, run me on MSX2 !");
      0007AA 21rEFr07         [10] 1277 	ld	hl, #___str_3
      0007AD CDr73r0C         [17] 1278 	call	_Print
                                   1279 ;src\mytestrom.c:943: break;
      0007B0 C3rBFr07         [10] 1280 	jp	00105$
                                   1281 ;src\mytestrom.c:945: case 4:
      0007B3                       1282 00104$:
                                   1283 ;src\mytestrom.c:946: Print("\n\rUnespected end of file:");
      0007B3 D5               [11] 1284 	push	de
      0007B4 21r10r08         [10] 1285 	ld	hl, #___str_4
      0007B7 CDr73r0C         [17] 1286 	call	_Print
      0007BA D1               [10] 1287 	pop	de
                                   1288 ;src\mytestrom.c:947: Print(name);		  
      0007BB EB               [ 4] 1289 	ex	de, hl
      0007BC CDr73r0C         [17] 1290 	call	_Print
                                   1291 ;src\mytestrom.c:949: }
      0007BF                       1292 00105$:
                                   1293 ;src\mytestrom.c:950: Reboot(0);
      0007BF C7               [11] 1294 	rst	#0
                                   1295 ;src\mytestrom.c:951: }
      0007C0 C9               [10] 1296 	ret
      0007C1                       1297 ___str_1:
      0007C1 0A                    1298 	.db 0x0a
      0007C2 0D                    1299 	.db 0x0d
      0007C3 46 41 49 4C 45 44 3A  1300 	.ascii "FAILED: fcb_open(): "
             20 66 63 62 5F 6F 70
             65 6E 28 29 3A 20
      0007D7 00                    1301 	.db 0x00
      0007D8                       1302 ___str_2:
      0007D8 0A                    1303 	.db 0x0a
      0007D9 0D                    1304 	.db 0x0d
      0007DA 46 41 49 4C 45 44 3A  1305 	.ascii "FAILED: fcb_close():"
             20 66 63 62 5F 63 6C
             6F 73 65 28 29 3A
      0007EE 00                    1306 	.db 0x00
      0007EF                       1307 ___str_3:
      0007EF 0A                    1308 	.db 0x0a
      0007F0 0D                    1309 	.db 0x0d
      0007F1 53 74 6F 70 20 4B 69  1310 	.ascii "Stop Kidding, run me on MSX2 !"
             64 64 69 6E 67 2C 20
             72 75 6E 20 6D 65 20
             6F 6E 20 4D 53 58 32
             20 21
      00080F 00                    1311 	.db 0x00
      000810                       1312 ___str_4:
      000810 0A                    1313 	.db 0x0a
      000811 0D                    1314 	.db 0x0d
      000812 55 6E 65 73 70 65 63  1315 	.ascii "Unespected end of file:"
             74 65 64 20 65 6E 64
             20 6F 66 20 66 69 6C
             65 3A
      000829 00                    1316 	.db 0x00
                                   1317 ;src\mytestrom.c:953: void MyLoadMap(char mapnumber,unsigned char* p ) __sdcccall(1)
                                   1318 ;	---------------------------------
                                   1319 ; Function MyLoadMap
                                   1320 ; ---------------------------------
      00082A                       1321 _MyLoadMap::
                                   1322 ;src\mytestrom.c:957: LevelW = ((char*)DataLevelMap)[0];
      00082A 01r14r1D         [10] 1323 	ld	bc, #_DataLevelMap
      00082D 0A               [ 7] 1324 	ld	a, (bc)
      00082E 32r21r00         [13] 1325 	ld	(_LevelW+0), a
                                   1326 ;src\mytestrom.c:958: LevelH = ((char*)DataLevelMap)[1];
      000831 69               [ 4] 1327 	ld	l, c
                                   1328 ;	spillPairReg hl
                                   1329 ;	spillPairReg hl
      000832 60               [ 4] 1330 	ld	h, b
                                   1331 ;	spillPairReg hl
                                   1332 ;	spillPairReg hl
      000833 23               [ 6] 1333 	inc	hl
      000834 7E               [ 7] 1334 	ld	a, (hl)
      000835 32r22r00         [13] 1335 	ld	(_LevelH+0), a
                                   1336 ;src\mytestrom.c:959: memcpy(p,&((char*)DataLevelMap)[2],MaxLevelW*MaxLevelH);
                                   1337 ;	spillPairReg hl
                                   1338 ;	spillPairReg hl
      000838 69               [ 4] 1339 	ld	l, c
      000839 60               [ 4] 1340 	ld	h, b
      00083A 23               [ 6] 1341 	inc	hl
      00083B 23               [ 6] 1342 	inc	hl
                                   1343 ;	spillPairReg hl
                                   1344 ;	spillPairReg hl
      00083C 01 00 0B         [10] 1345 	ld	bc, #0x0b00
      00083F ED B0            [21] 1346 	ldir
                                   1347 ;src\mytestrom.c:960: }
      000841 C9               [10] 1348 	ret
                                   1349 ;src\mytestrom.c:962: void myISR(void) __sdcccall(1) __naked
                                   1350 ;	---------------------------------
                                   1351 ; Function myISR
                                   1352 ; ---------------------------------
      000842                       1353 _myISR::
                                   1354 ;src\mytestrom.c:1001: __endasm;
      000842 F5               [11] 1355 	push	af
      000843 AF               [ 4] 1356 	xor	a,a ; set Status Register #0 for reading
      000844 D3 99            [11] 1357 	out	(#0x99),a
      000846 3E 8F            [ 7] 1358 	ld	a,#0x8f
      000848 D3 99            [11] 1359 	out	(#0x99),a
      00084A DB 99            [11] 1360 	in	a,(#0x99) ; mimimum ISR
      00084C 3Ar2Cr00         [13] 1361 	ld	a,(#_cursat)
      00084F A7               [ 4] 1362 	and	a,a
      000850 3E 03            [ 7] 1363 	ld	a,#3
      000852 20 02            [12] 1364 	jr	nz,setsat1
      000854 3E 01            [ 7] 1365 	ld	a,#1
      000856                       1366 	setsat1:
      000856 D3 99            [11] 1367 	out	(#0x99),a
      000858 3E 8B            [ 7] 1368 	ld	a,#128+#11
      00085A D3 99            [11] 1369 	out	(#0x99),a
      00085C F1               [10] 1370 	pop	af
      00085D FB               [ 4] 1371 	ei
      00085E C9               [10] 1372 	ret
                                   1373 ;src\mytestrom.c:1002: }
                                   1374 ;src\mytestrom.c:1004: void myInstISR(void) __sdcccall(1) __naked
                                   1375 ;	---------------------------------
                                   1376 ; Function myInstISR
                                   1377 ; ---------------------------------
      00085F                       1378 _myInstISR::
                                   1379 ;src\mytestrom.c:1006: myVDPwrite(WindowH-8,19); // indagare sul glitch !!! xxx
      00085F 2E 13            [ 7] 1380 	ld	l, #0x13
                                   1381 ;	spillPairReg hl
                                   1382 ;	spillPairReg hl
      000861 3E A8            [ 7] 1383 	ld	a, #0xa8
      000863 CDrE0r06         [17] 1384 	call	_myVDPwrite
                                   1385 ;src\mytestrom.c:1022: __endasm;
      000866 21 9A FD         [10] 1386 	ld	hl,#0xFD9A
      000869 11r29r00         [10] 1387 	ld	de,#_OldIsr
      00086C 01 03 00         [10] 1388 	ld	bc,#3
      00086F ED B0            [21] 1389 	ldir
      000871 F3               [ 4] 1390 	di
      000872 3E C3            [ 7] 1391 	ld	a,#0xC3
      000874 32 9A FD         [13] 1392 	ld	(#0xFD9A+#0),a
      000877 21r42r08         [10] 1393 	ld	hl,#_myISR
      00087A 22 9B FD         [16] 1394 	ld	(#0xFD9A+#1),hl
      00087D FB               [ 4] 1395 	ei
      00087E C9               [10] 1396 	ret
                                   1397 ;src\mytestrom.c:1023: }
                                   1398 ;src\mytestrom.c:1025: void myISRrestore(void) __sdcccall(1) __naked
                                   1399 ;	---------------------------------
                                   1400 ; Function myISRrestore
                                   1401 ; ---------------------------------
      00087F                       1402 _myISRrestore::
                                   1403 ;src\mytestrom.c:1027: RG0SAV &= 0xEF;
      00087F 3A DF F3         [13] 1404 	ld	a, (_RG0SAV+0)
      000882 E6 EF            [ 7] 1405 	and	a, #0xef
      000884 32 DF F3         [13] 1406 	ld	(_RG0SAV+0), a
                                   1407 ;src\mytestrom.c:1028: myVDPwrite(RG0SAV,0);
      000887 2E 00            [ 7] 1408 	ld	l, #0x00
                                   1409 ;	spillPairReg hl
                                   1410 ;	spillPairReg hl
      000889 3A DF F3         [13] 1411 	ld	a, (_RG0SAV+0)
      00088C CDrE0r06         [17] 1412 	call	_myVDPwrite
                                   1413 ;src\mytestrom.c:1038: __endasm;
      00088F 21r29r00         [10] 1414 	ld	hl,#_OldIsr
      000892 11 9A FD         [10] 1415 	ld	de,#0xFD9A
      000895 01 03 00         [10] 1416 	ld	bc,#3
      000898 F3               [ 4] 1417 	di
      000899 ED B0            [21] 1418 	ldir
      00089B FB               [ 4] 1419 	ei
      00089C C9               [10] 1420 	ret
                                   1421 ;src\mytestrom.c:1039: }
                                   1422 ;src\mytestrom.c:1043: unsigned char myCheckkbd(unsigned char nrow) __sdcccall(1) __naked
                                   1423 ;	---------------------------------
                                   1424 ; Function myCheckkbd
                                   1425 ; ---------------------------------
      00089D                       1426 _myCheckkbd::
                                   1427 ;src\mytestrom.c:1069: __endasm;
                                   1428 ;
                                   1429 ;
                                   1430 ;
                                   1431 ;
                                   1432 ;
                                   1433 ;
                                   1434 ;
                                   1435 ;
                                   1436 ;
                                   1437 ;
                                   1438 ;	checkkbd:
      00089D 5F               [ 4] 1439 	ld	e,a
      00089E F3               [ 4] 1440 	di
      00089F DB AA            [11] 1441 	in	a,(#0xaa)
      0008A1 E6 F0            [ 7] 1442 	and	a,#0b11110000 ; upper 4 bits contain info to preserve
      0008A3 B3               [ 4] 1443 	or	a,e
      0008A4 D3 AA            [11] 1444 	out	(#0xaa),a
      0008A6 DB A9            [11] 1445 	in	a,(#0xa9)
      0008A8 6F               [ 4] 1446 	ld	l,a
      0008A9 FB               [ 4] 1447 	ei
      0008AA C9               [10] 1448 	ret
                                   1449 ;src\mytestrom.c:1070: }
                                   1450 ;src\mytestrom.c:1081: void ObjectsInit(void) {
                                   1451 ;	---------------------------------
                                   1452 ; Function ObjectsInit
                                   1453 ; ---------------------------------
      0008AB                       1454 _ObjectsInit::
      0008AB DD E5            [15] 1455 	push	ix
      0008AD DD 21 00 00      [14] 1456 	ld	ix,#0
      0008B1 DD 39            [15] 1457 	add	ix,sp
      0008B3 F5               [11] 1458 	push	af
      0008B4 3B               [ 6] 1459 	dec	sp
                                   1460 ;src\mytestrom.c:1083: for (t=0;t<MaxObjNum;t++)
      0008B5 DD 36 FF 00      [19] 1461 	ld	-1 (ix), #0x00
      0008B9                       1462 00102$:
                                   1463 ;src\mytestrom.c:1085: object[t].x = t*LevelW*4/MaxObjNum + WindowW/2;
      0008B9 DD 4E FF         [19] 1464 	ld	c, -1 (ix)
      0008BC 06 00            [ 7] 1465 	ld	b, #0x00
      0008BE 69               [ 4] 1466 	ld	l, c
      0008BF 60               [ 4] 1467 	ld	h, b
      0008C0 29               [11] 1468 	add	hl, hl
      0008C1 09               [11] 1469 	add	hl, bc
      0008C2 29               [11] 1470 	add	hl, hl
      0008C3 09               [11] 1471 	add	hl, bc
      0008C4 EB               [ 4] 1472 	ex	de, hl
      0008C5 21r2Fr0B         [10] 1473 	ld	hl, #_object
      0008C8 19               [11] 1474 	add	hl, de
      0008C9 EB               [ 4] 1475 	ex	de, hl
      0008CA 33               [ 6] 1476 	inc	sp
      0008CB 33               [ 6] 1477 	inc	sp
      0008CC D5               [11] 1478 	push	de
      0008CD D5               [11] 1479 	push	de
      0008CE 3Ar21r00         [13] 1480 	ld	a, (#_LevelW + 0)
      0008D1 5F               [ 4] 1481 	ld	e, a
      0008D2 DD 66 FF         [19] 1482 	ld	h, -1 (ix)
                                   1483 ;	spillPairReg hl
                                   1484 ;	spillPairReg hl
      0008D5 2E 00            [ 7] 1485 	ld	l, #0x00
      0008D7 55               [ 4] 1486 	ld	d, l
      0008D8 06 08            [ 7] 1487 	ld	b, #0x08
      0008DA                       1488 00125$:
      0008DA 29               [11] 1489 	add	hl, hl
      0008DB 30 01            [12] 1490 	jr	NC, 00126$
      0008DD 19               [11] 1491 	add	hl, de
      0008DE                       1492 00126$:
      0008DE 10 FA            [13] 1493 	djnz	00125$
      0008E0 D1               [10] 1494 	pop	de
      0008E1 29               [11] 1495 	add	hl, hl
      0008E2 29               [11] 1496 	add	hl, hl
                                   1497 ;	spillPairReg hl
                                   1498 ;	spillPairReg hl
      0008E3 4D               [ 4] 1499 	ld	c,l
      0008E4 44               [ 4] 1500 	ld	b,h
                                   1501 ;	spillPairReg hl
                                   1502 ;	spillPairReg hl
      0008E5 CB 78            [ 8] 1503 	bit	7, b
      0008E7 28 04            [12] 1504 	jr	Z, 00106$
      0008E9 21 07 00         [10] 1505 	ld	hl, #0x0007
      0008EC 09               [11] 1506 	add	hl, bc
      0008ED                       1507 00106$:
      0008ED CB 2C            [ 8] 1508 	sra	h
      0008EF CB 1D            [ 8] 1509 	rr	l
      0008F1 CB 2C            [ 8] 1510 	sra	h
      0008F3 CB 1D            [ 8] 1511 	rr	l
      0008F5 CB 2C            [ 8] 1512 	sra	h
      0008F7 CB 1D            [ 8] 1513 	rr	l
      0008F9 7D               [ 4] 1514 	ld	a, l
      0008FA 44               [ 4] 1515 	ld	b, h
      0008FB C6 78            [ 7] 1516 	add	a, #0x78
      0008FD 4F               [ 4] 1517 	ld	c, a
      0008FE 30 01            [12] 1518 	jr	NC, 00127$
      000900 04               [ 4] 1519 	inc	b
      000901                       1520 00127$:
      000901 E1               [10] 1521 	pop	hl
      000902 E5               [11] 1522 	push	hl
      000903 71               [ 7] 1523 	ld	(hl), c
      000904 23               [ 6] 1524 	inc	hl
      000905 70               [ 7] 1525 	ld	(hl), b
                                   1526 ;src\mytestrom.c:1086: object[t].y = (t & 1) ? LevelH*16-32 : 0;
      000906 6B               [ 4] 1527 	ld	l, e
                                   1528 ;	spillPairReg hl
                                   1529 ;	spillPairReg hl
      000907 62               [ 4] 1530 	ld	h, d
                                   1531 ;	spillPairReg hl
                                   1532 ;	spillPairReg hl
      000908 23               [ 6] 1533 	inc	hl
      000909 23               [ 6] 1534 	inc	hl
      00090A DD CB FF 46      [20] 1535 	bit	0, -1 (ix)
      00090E 28 1A            [12] 1536 	jr	Z, 00107$
      000910 3Ar22r00         [13] 1537 	ld	a, (_LevelH+0)
      000913 0E 00            [ 7] 1538 	ld	c, #0x00
      000915 87               [ 4] 1539 	add	a, a
      000916 CB 11            [ 8] 1540 	rl	c
      000918 87               [ 4] 1541 	add	a, a
      000919 CB 11            [ 8] 1542 	rl	c
      00091B 87               [ 4] 1543 	add	a, a
      00091C CB 11            [ 8] 1544 	rl	c
      00091E 87               [ 4] 1545 	add	a, a
      00091F CB 11            [ 8] 1546 	rl	c
      000921 C6 E0            [ 7] 1547 	add	a, #0xe0
      000923 47               [ 4] 1548 	ld	b, a
      000924 79               [ 4] 1549 	ld	a, c
      000925 CE FF            [ 7] 1550 	adc	a, #0xff
      000927 C3r2Cr09         [10] 1551 	jp	00108$
      00092A                       1552 00107$:
      00092A AF               [ 4] 1553 	xor	a, a
      00092B 47               [ 4] 1554 	ld	b, a
      00092C                       1555 00108$:
      00092C 70               [ 7] 1556 	ld	(hl), b
      00092D 23               [ 6] 1557 	inc	hl
      00092E 77               [ 7] 1558 	ld	(hl), a
                                   1559 ;src\mytestrom.c:1087: object[t].frame = t;
      00092F 21 05 00         [10] 1560 	ld	hl, #0x0005
      000932 19               [11] 1561 	add	hl, de
      000933 DD 7E FF         [19] 1562 	ld	a, -1 (ix)
      000936 77               [ 7] 1563 	ld	(hl), a
                                   1564 ;src\mytestrom.c:1088: object[t].status = 255;		// 0 is for inactive
      000937 21 06 00         [10] 1565 	ld	hl, #0x0006
      00093A 19               [11] 1566 	add	hl, de
      00093B 36 FF            [10] 1567 	ld	(hl), #0xff
                                   1568 ;src\mytestrom.c:1083: for (t=0;t<MaxObjNum;t++)
      00093D DD 34 FF         [23] 1569 	inc	-1 (ix)
      000940 DD 7E FF         [19] 1570 	ld	a, -1 (ix)
      000943 D6 08            [ 7] 1571 	sub	a, #0x08
      000945 DArB9r08         [10] 1572 	jp	C, 00102$
                                   1573 ;src\mytestrom.c:1090: }
      000948 DD F9            [10] 1574 	ld	sp, ix
      00094A DD E1            [14] 1575 	pop	ix
      00094C C9               [10] 1576 	ret
                                   1577 ;src\mytestrom.c:1098: void ObjectstoVRAM(int MapX) __sdcccall(1)
                                   1578 ;	---------------------------------
                                   1579 ; Function ObjectstoVRAM
                                   1580 ; ---------------------------------
      00094D                       1581 _ObjectstoVRAM::
      00094D DD E5            [15] 1582 	push	ix
      00094F DD 21 00 00      [14] 1583 	ld	ix,#0
      000953 DD 39            [15] 1584 	add	ix,sp
      000955 F5               [11] 1585 	push	af
      000956 F5               [11] 1586 	push	af
      000957 3B               [ 6] 1587 	dec	sp
      000958 DD 75 FD         [19] 1588 	ld	-3 (ix), l
      00095B DD 74 FE         [19] 1589 	ld	-2 (ix), h
                                   1590 ;src\mytestrom.c:1107: if (cursat==0) {
      00095E 3Ar2Cr00         [13] 1591 	ld	a, (_cursat+0)
      000961 B7               [ 4] 1592 	or	a, a
      000962 20 0D            [12] 1593 	jr	NZ, 00102$
                                   1594 ;src\mytestrom.c:1108: SetVramW(0,0xFA00);	// sat 0
      000964 11 00 FA         [10] 1595 	ld	de, #0xfa00
      000967 AF               [ 4] 1596 	xor	a, a
      000968 CDrB1r0B         [17] 1597 	call	_SetVramW
                                   1598 ;src\mytestrom.c:1109: q = &object[MaxObjNum-1];
      00096B 11r60r0B         [10] 1599 	ld	de, #_object+49
      00096E C3r7Cr09         [10] 1600 	jp	00122$
      000971                       1601 00102$:
                                   1602 ;src\mytestrom.c:1112: SetVramW(1,0xFA00);	// sat 1		
      000971 11 00 FA         [10] 1603 	ld	de, #0xfa00
      000974 3E 01            [ 7] 1604 	ld	a, #0x01
      000976 CDrB1r0B         [17] 1605 	call	_SetVramW
                                   1606 ;src\mytestrom.c:1113: q = &object[0];		
      000979 11r2Fr0B         [10] 1607 	ld	de, #_object
                                   1608 ;src\mytestrom.c:1117: for (t=0; t<MaxObjNum; t++) 
      00097C                       1609 00122$:
      00097C DD 36 FF 00      [19] 1610 	ld	-1 (ix), #0x00
      000980                       1611 00113$:
                                   1612 ;src\mytestrom.c:1120: u = q->x-(((unsigned int) MapX) & 0xFFF0);
      000980 6B               [ 4] 1613 	ld	l, e
      000981 62               [ 4] 1614 	ld	h, d
      000982 4E               [ 7] 1615 	ld	c, (hl)
      000983 23               [ 6] 1616 	inc	hl
      000984 46               [ 7] 1617 	ld	b, (hl)
      000985 DD 7E FD         [19] 1618 	ld	a, -3 (ix)
      000988 DD 6E FE         [19] 1619 	ld	l, -2 (ix)
                                   1620 ;	spillPairReg hl
                                   1621 ;	spillPairReg hl
      00098B E6 F0            [ 7] 1622 	and	a, #0xf0
      00098D DD 77 FB         [19] 1623 	ld	-5 (ix), a
      000990 DD 75 FC         [19] 1624 	ld	-4 (ix), l
      000993 21r67r0B         [10] 1625 	ld	hl, #_u
      000996 79               [ 4] 1626 	ld	a, c
      000997 DD 96 FB         [19] 1627 	sub	a, -5 (ix)
      00099A 77               [ 7] 1628 	ld	(hl), a
      00099B 78               [ 4] 1629 	ld	a, b
      00099C DD 9E FC         [19] 1630 	sbc	a, -4 (ix)
      00099F 23               [ 6] 1631 	inc	hl
      0009A0 77               [ 7] 1632 	ld	(hl), a
                                   1633 ;src\mytestrom.c:1121: y = q->y;
      0009A1 4B               [ 4] 1634 	ld	c, e
      0009A2 42               [ 4] 1635 	ld	b, d
      0009A3 03               [ 6] 1636 	inc	bc
      0009A4 03               [ 6] 1637 	inc	bc
      0009A5 0A               [ 7] 1638 	ld	a, (bc)
      0009A6 32r69r0B         [13] 1639 	ld	(_y+0), a
                                   1640 ;src\mytestrom.c:1122: x = u;
      0009A9 3Ar67r0B         [13] 1641 	ld	a, (_u+0)
      0009AC 32r6Ar0B         [13] 1642 	ld	(_x+0), a
                                   1643 ;src\mytestrom.c:1123: v = q->frame<<4;
      0009AF D5               [11] 1644 	push	de
      0009B0 FD E1            [14] 1645 	pop	iy
      0009B2 FD 7E 05         [19] 1646 	ld	a, 5 (iy)
      0009B5 87               [ 4] 1647 	add	a, a
      0009B6 87               [ 4] 1648 	add	a, a
      0009B7 87               [ 4] 1649 	add	a, a
      0009B8 87               [ 4] 1650 	add	a, a
      0009B9 32r6Br0B         [13] 1651 	ld	(_v+0), a
                                   1652 ;src\mytestrom.c:1125: if (q->status && (q->x - MapX >= 0) && (q->x - MapX < WindowW-16)) 
      0009BC D5               [11] 1653 	push	de
      0009BD FD E1            [14] 1654 	pop	iy
      0009BF FD 7E 06         [19] 1655 	ld	a, 6 (iy)
      0009C2 B7               [ 4] 1656 	or	a, a
      0009C3 CAr31r0A         [10] 1657 	jp	Z, 00105$
      0009C6 6B               [ 4] 1658 	ld	l, e
      0009C7 62               [ 4] 1659 	ld	h, d
      0009C8 4E               [ 7] 1660 	ld	c, (hl)
      0009C9 23               [ 6] 1661 	inc	hl
      0009CA 46               [ 7] 1662 	ld	b, (hl)
      0009CB 79               [ 4] 1663 	ld	a, c
      0009CC DD 96 FD         [19] 1664 	sub	a, -3 (ix)
      0009CF 4F               [ 4] 1665 	ld	c, a
      0009D0 78               [ 4] 1666 	ld	a, b
      0009D1 DD 9E FE         [19] 1667 	sbc	a, -2 (ix)
      0009D4 47               [ 4] 1668 	ld	b, a
      0009D5 CB 78            [ 8] 1669 	bit	7, b
      0009D7 C2r31r0A         [10] 1670 	jp	NZ, 00105$
      0009DA 79               [ 4] 1671 	ld	a, c
      0009DB D6 E0            [ 7] 1672 	sub	a, #0xe0
      0009DD 78               [ 4] 1673 	ld	a, b
      0009DE DE 00            [ 7] 1674 	sbc	a, #0x00
      0009E0 D2r31r0A         [10] 1675 	jp	NC, 00105$
                                   1676 ;src\mytestrom.c:1157: __endasm;
      0009E3 0E 98            [ 7] 1677 	ld	c,#0x98
                                   1678 	.rept	2
                                   1679 	ld	hl,#_y
                                   1680 	outi
                                   1681 	outi
                                   1682 	outi
                                   1683 	ld	a, (_v)
                                   1684 	out	(#0x98),a
                                   1685 	add	a, #4
                                   1686 	ld	(_v),a
                                   1687 	.endm
      0009E5 21r69r0B         [10]    1 	ld	hl,#_y
      0009E8 ED A3            [16]    2 	outi
      0009EA ED A3            [16]    3 	outi
      0009EC ED A3            [16]    4 	outi
      0009EE 3Ar6Br0B         [13]    5 	ld	a, (_v)
      0009F1 D3 98            [11]    6 	out	(#0x98),a
      0009F3 C6 04            [ 7]    7 	add	a, #4
      0009F5 32r6Br0B         [13]    8 	ld	(_v),a
      0009F8 21r69r0B         [10]    1 	ld	hl,#_y
      0009FB ED A3            [16]    2 	outi
      0009FD ED A3            [16]    3 	outi
      0009FF ED A3            [16]    4 	outi
      000A01 3Ar6Br0B         [13]    5 	ld	a, (_v)
      000A04 D3 98            [11]    6 	out	(#0x98),a
      000A06 C6 04            [ 7]    7 	add	a, #4
      000A08 32r6Br0B         [13]    8 	ld	(_v),a
      000A0B 21r69r0B         [10] 1688 	ld	hl,#_y
      000A0E 3E 10            [ 7] 1689 	ld	a,#16
      000A10 86               [ 7] 1690 	add	a,(hl)
      000A11 77               [ 7] 1691 	ld	(hl),a
      000A12 ED A3            [16] 1692 	outi
      000A14 ED A3            [16] 1693 	outi
      000A16 ED A3            [16] 1694 	outi
      000A18 3Ar6Br0B         [13] 1695 	ld	a,(_v)
      000A1B D3 98            [11] 1696 	out	(#0x98),a
      000A1D C6 04            [ 7] 1697 	add	a, #4
      000A1F 32r6Br0B         [13] 1698 	ld	(_v),a
      000A22 21r69r0B         [10] 1699 	ld	hl,#_y
      000A25 ED A3            [16] 1700 	outi
      000A27 ED A3            [16] 1701 	outi
      000A29 ED A3            [16] 1702 	outi
      000A2B 00               [ 4] 1703 	nop
      000A2C D3 98            [11] 1704 	out	(#0x98),a
      000A2E C3r63r0A         [10] 1705 	jp	00106$
      000A31                       1706 00105$:
                                   1707 ;src\mytestrom.c:1166: __endasm;
      000A31 3E D9            [ 7] 1708 	ld	a,#217
                                   1709 	.rept	16
                                   1710 	out	(#0x98),a
                                   1711 	nop
                                   1712 	.endm
      000A33 D3 98            [11]    1 	out	(#0x98),a
      000A35 00               [ 4]    2 	nop
      000A36 D3 98            [11]    1 	out	(#0x98),a
      000A38 00               [ 4]    2 	nop
      000A39 D3 98            [11]    1 	out	(#0x98),a
      000A3B 00               [ 4]    2 	nop
      000A3C D3 98            [11]    1 	out	(#0x98),a
      000A3E 00               [ 4]    2 	nop
      000A3F D3 98            [11]    1 	out	(#0x98),a
      000A41 00               [ 4]    2 	nop
      000A42 D3 98            [11]    1 	out	(#0x98),a
      000A44 00               [ 4]    2 	nop
      000A45 D3 98            [11]    1 	out	(#0x98),a
      000A47 00               [ 4]    2 	nop
      000A48 D3 98            [11]    1 	out	(#0x98),a
      000A4A 00               [ 4]    2 	nop
      000A4B D3 98            [11]    1 	out	(#0x98),a
      000A4D 00               [ 4]    2 	nop
      000A4E D3 98            [11]    1 	out	(#0x98),a
      000A50 00               [ 4]    2 	nop
      000A51 D3 98            [11]    1 	out	(#0x98),a
      000A53 00               [ 4]    2 	nop
      000A54 D3 98            [11]    1 	out	(#0x98),a
      000A56 00               [ 4]    2 	nop
      000A57 D3 98            [11]    1 	out	(#0x98),a
      000A59 00               [ 4]    2 	nop
      000A5A D3 98            [11]    1 	out	(#0x98),a
      000A5C 00               [ 4]    2 	nop
      000A5D D3 98            [11]    1 	out	(#0x98),a
      000A5F 00               [ 4]    2 	nop
      000A60 D3 98            [11]    1 	out	(#0x98),a
      000A62 00               [ 4]    2 	nop
      000A63                       1713 00106$:
                                   1714 ;src\mytestrom.c:1168: if (cursat==0) {
      000A63 3Ar2Cr00         [13] 1715 	ld	a, (_cursat+0)
      000A66 B7               [ 4] 1716 	or	a, a
      000A67 20 0B            [12] 1717 	jr	NZ, 00110$
                                   1718 ;src\mytestrom.c:1169: q--;
      000A69 7B               [ 4] 1719 	ld	a, e
      000A6A C6 F9            [ 7] 1720 	add	a, #0xf9
      000A6C 5F               [ 4] 1721 	ld	e, a
      000A6D 7A               [ 4] 1722 	ld	a, d
      000A6E CE FF            [ 7] 1723 	adc	a, #0xff
      000A70 57               [ 4] 1724 	ld	d, a
      000A71 C3r79r0A         [10] 1725 	jp	00114$
      000A74                       1726 00110$:
                                   1727 ;src\mytestrom.c:1172: q++;
      000A74 21 07 00         [10] 1728 	ld	hl, #0x0007
      000A77 19               [11] 1729 	add	hl, de
      000A78 EB               [ 4] 1730 	ex	de, hl
      000A79                       1731 00114$:
                                   1732 ;src\mytestrom.c:1117: for (t=0; t<MaxObjNum; t++) 
      000A79 DD 34 FF         [23] 1733 	inc	-1 (ix)
      000A7C DD 7E FF         [19] 1734 	ld	a, -1 (ix)
      000A7F D6 08            [ 7] 1735 	sub	a, #0x08
      000A81 DAr80r09         [10] 1736 	jp	C, 00113$
                                   1737 ;src\mytestrom.c:1178: }
      000A84 DD F9            [10] 1738 	ld	sp, ix
      000A86 DD E1            [14] 1739 	pop	ix
      000A88 C9               [10] 1740 	ret
                                   1741 ;src\mytestrom.c:1237: void UpdateColor(char plane,char frame,char nsat) __sdcccall(1){
                                   1742 ;	---------------------------------
                                   1743 ; Function UpdateColor
                                   1744 ; ---------------------------------
      000A89                       1745 _UpdateColor::
      000A89 DD E5            [15] 1746 	push	ix
      000A8B DD 21 00 00      [14] 1747 	ld	ix,#0
      000A8F DD 39            [15] 1748 	add	ix,sp
      000A91 5F               [ 4] 1749 	ld	e, a
                                   1750 ;src\mytestrom.c:1240: SetVramW(1,0xF800+plane*16);
      000A92 16 00            [ 7] 1751 	ld	d, #0x00
      000A94 EB               [ 4] 1752 	ex	de, hl
      000A95 29               [11] 1753 	add	hl, hl
      000A96 29               [11] 1754 	add	hl, hl
      000A97 29               [11] 1755 	add	hl, hl
      000A98 29               [11] 1756 	add	hl, hl
      000A99 EB               [ 4] 1757 	ex	de, hl
      000A9A 7A               [ 4] 1758 	ld	a, d
      000A9B C6 F8            [ 7] 1759 	add	a, #0xf8
      000A9D 57               [ 4] 1760 	ld	d, a
                                   1761 ;src\mytestrom.c:1239: if (nsat)
      000A9E DD 7E 04         [19] 1762 	ld	a, 4 (ix)
      000AA1 B7               [ 4] 1763 	or	a, a
      000AA2 28 0A            [12] 1764 	jr	Z, 00102$
                                   1765 ;src\mytestrom.c:1240: SetVramW(1,0xF800+plane*16);
      000AA4 E5               [11] 1766 	push	hl
      000AA5 3E 01            [ 7] 1767 	ld	a, #0x01
      000AA7 CDrB1r0B         [17] 1768 	call	_SetVramW
      000AAA E1               [10] 1769 	pop	hl
      000AAB C3rB4r0A         [10] 1770 	jp	00103$
      000AAE                       1771 00102$:
                                   1772 ;src\mytestrom.c:1242: SetVramW(0,0xF800+plane*16);
      000AAE E5               [11] 1773 	push	hl
      000AAF AF               [ 4] 1774 	xor	a, a
      000AB0 CDrB1r0B         [17] 1775 	call	_SetVramW
      000AB3 E1               [10] 1776 	pop	hl
      000AB4                       1777 00103$:
                                   1778 ;src\mytestrom.c:1244: VramWrite(((unsigned int) &sprite_colors) + frame*64,64);
      000AB4 01r94r17         [10] 1779 	ld	bc, #_sprite_colors
      000AB7 26 00            [ 7] 1780 	ld	h, #0x00
                                   1781 ;	spillPairReg hl
                                   1782 ;	spillPairReg hl
      000AB9 29               [11] 1783 	add	hl, hl
      000ABA 29               [11] 1784 	add	hl, hl
      000ABB 29               [11] 1785 	add	hl, hl
      000ABC 29               [11] 1786 	add	hl, hl
      000ABD 29               [11] 1787 	add	hl, hl
      000ABE 29               [11] 1788 	add	hl, hl
      000ABF 09               [11] 1789 	add	hl, bc
      000AC0 11 40 00         [10] 1790 	ld	de, #0x0040
      000AC3 CDrA7r0B         [17] 1791 	call	_VramWrite
                                   1792 ;src\mytestrom.c:1245: }
      000AC6 DD E1            [14] 1793 	pop	ix
      000AC8 E1               [10] 1794 	pop	hl
      000AC9 33               [ 6] 1795 	inc	sp
      000ACA E9               [ 4] 1796 	jp	(hl)
                                   1797 ;src\mytestrom.c:1247: void UpdateFrame(char plane,char frame,char nsat) __sdcccall(1){
                                   1798 ;	---------------------------------
                                   1799 ; Function UpdateFrame
                                   1800 ; ---------------------------------
      000ACB                       1801 _UpdateFrame::
      000ACB DD E5            [15] 1802 	push	ix
      000ACD DD 21 00 00      [14] 1803 	ld	ix,#0
      000AD1 DD 39            [15] 1804 	add	ix,sp
      000AD3 5F               [ 4] 1805 	ld	e, a
                                   1806 ;src\mytestrom.c:1250: SetVramW(0,0xF000+plane*32);
      000AD4 16 00            [ 7] 1807 	ld	d, #0x00
      000AD6 EB               [ 4] 1808 	ex	de, hl
      000AD7 29               [11] 1809 	add	hl, hl
      000AD8 29               [11] 1810 	add	hl, hl
      000AD9 29               [11] 1811 	add	hl, hl
      000ADA 29               [11] 1812 	add	hl, hl
      000ADB 29               [11] 1813 	add	hl, hl
      000ADC EB               [ 4] 1814 	ex	de, hl
                                   1815 ;src\mytestrom.c:1249: if (nsat)
      000ADD DD 7E 04         [19] 1816 	ld	a, 4 (ix)
      000AE0 B7               [ 4] 1817 	or	a, a
      000AE1 28 0D            [12] 1818 	jr	Z, 00102$
                                   1819 ;src\mytestrom.c:1250: SetVramW(0,0xF000+plane*32);
      000AE3 7A               [ 4] 1820 	ld	a, d
      000AE4 C6 F0            [ 7] 1821 	add	a, #0xf0
      000AE6 57               [ 4] 1822 	ld	d, a
      000AE7 E5               [11] 1823 	push	hl
      000AE8 AF               [ 4] 1824 	xor	a, a
      000AE9 CDrB1r0B         [17] 1825 	call	_SetVramW
      000AEC E1               [10] 1826 	pop	hl
      000AED C3rFAr0A         [10] 1827 	jp	00103$
      000AF0                       1828 00102$:
                                   1829 ;src\mytestrom.c:1252: SetVramW(0,0xF000+32*32+plane*32);
      000AF0 7A               [ 4] 1830 	ld	a, d
      000AF1 C6 F4            [ 7] 1831 	add	a, #0xf4
      000AF3 57               [ 4] 1832 	ld	d, a
      000AF4 E5               [11] 1833 	push	hl
      000AF5 AF               [ 4] 1834 	xor	a, a
      000AF6 CDrB1r0B         [17] 1835 	call	_SetVramW
      000AF9 E1               [10] 1836 	pop	hl
      000AFA                       1837 00103$:
                                   1838 ;src\mytestrom.c:1254: VramWrite(((unsigned int) &sprite_patterns) + frame*128,128);
      000AFA 01r94r0C         [10] 1839 	ld	bc, #_sprite_patterns
      000AFD AF               [ 4] 1840 	xor	a, a
      000AFE CB 1F            [ 8] 1841 	rr	a
      000B00 65               [ 4] 1842 	ld	h, l
      000B01 CB 1C            [ 8] 1843 	rr	h
      000B03 1F               [ 4] 1844 	rra
      000B04 6F               [ 4] 1845 	ld	l, a
      000B05 09               [11] 1846 	add	hl, bc
      000B06 11 80 00         [10] 1847 	ld	de, #0x0080
      000B09 CDrA7r0B         [17] 1848 	call	_VramWrite
                                   1849 ;src\mytestrom.c:1255: }
      000B0C DD E1            [14] 1850 	pop	ix
      000B0E E1               [10] 1851 	pop	hl
      000B0F 33               [ 6] 1852 	inc	sp
      000B10 E9               [ 4] 1853 	jp	(hl)
                                   1854 ;src\mytestrom.c:1310: void SprtInit(void) __sdcccall(1) 
                                   1855 ;	---------------------------------
                                   1856 ; Function SprtInit
                                   1857 ; ---------------------------------
      000B11                       1858 _SprtInit::
                                   1859 ;src\mytestrom.c:1314: RG1SAV |= 2;
      000B11 3A E0 F3         [13] 1860 	ld	a, (_RG1SAV+0)
      000B14 F6 02            [ 7] 1861 	or	a, #0x02
      000B16 32 E0 F3         [13] 1862 	ld	(_RG1SAV+0), a
                                   1863 ;src\mytestrom.c:1315: myVDPwrite(RG1SAV,1);
      000B19 2E 01            [ 7] 1864 	ld	l, #0x01
                                   1865 ;	spillPairReg hl
                                   1866 ;	spillPairReg hl
      000B1B 3A E0 F3         [13] 1867 	ld	a, (_RG1SAV+0)
      000B1E CDrE0r06         [17] 1868 	call	_myVDPwrite
                                   1869 ;src\mytestrom.c:1316: RG8SAV |= 32;
      000B21 3A E7 FF         [13] 1870 	ld	a, (_RG8SAV+0)
      000B24 F6 20            [ 7] 1871 	or	a, #0x20
      000B26 32 E7 FF         [13] 1872 	ld	(_RG8SAV+0), a
                                   1873 ;src\mytestrom.c:1317: myVDPwrite(RG8SAV,8);
      000B29 2E 08            [ 7] 1874 	ld	l, #0x08
                                   1875 ;	spillPairReg hl
                                   1876 ;	spillPairReg hl
      000B2B 3A E7 FF         [13] 1877 	ld	a, (_RG8SAV+0)
      000B2E CDrE0r06         [17] 1878 	call	_myVDPwrite
                                   1879 ;src\mytestrom.c:1319: SetVramW(0,0xF800);					// sat 0
      000B31 11 00 F8         [10] 1880 	ld	de, #0xf800
      000B34 AF               [ 4] 1881 	xor	a, a
      000B35 CDrB1r0B         [17] 1882 	call	_SetVramW
                                   1883 ;src\mytestrom.c:1320: for (t=0; t<MaxObjNum; t++) {
      000B38 0E 00            [ 7] 1884 	ld	c, #0x00
      000B3A                       1885 00104$:
                                   1886 ;src\mytestrom.c:1321: VramWrite(((unsigned int) &sprite_colors) + (MaxObjNum-1-t)*64,64);
      000B3A 11r94r17         [10] 1887 	ld	de, #_sprite_colors
      000B3D 69               [ 4] 1888 	ld	l, c
                                   1889 ;	spillPairReg hl
                                   1890 ;	spillPairReg hl
      000B3E 26 00            [ 7] 1891 	ld	h, #0x00
                                   1892 ;	spillPairReg hl
                                   1893 ;	spillPairReg hl
      000B40 3E 07            [ 7] 1894 	ld	a, #0x07
      000B42 95               [ 4] 1895 	sub	a, l
      000B43 6F               [ 4] 1896 	ld	l, a
                                   1897 ;	spillPairReg hl
                                   1898 ;	spillPairReg hl
      000B44 9F               [ 4] 1899 	sbc	a, a
      000B45 94               [ 4] 1900 	sub	a, h
      000B46 67               [ 4] 1901 	ld	h, a
      000B47 29               [11] 1902 	add	hl, hl
      000B48 29               [11] 1903 	add	hl, hl
      000B49 29               [11] 1904 	add	hl, hl
      000B4A 29               [11] 1905 	add	hl, hl
      000B4B 29               [11] 1906 	add	hl, hl
      000B4C 29               [11] 1907 	add	hl, hl
      000B4D 19               [11] 1908 	add	hl, de
      000B4E C5               [11] 1909 	push	bc
      000B4F 11 40 00         [10] 1910 	ld	de, #0x0040
      000B52 CDrA7r0B         [17] 1911 	call	_VramWrite
      000B55 C1               [10] 1912 	pop	bc
                                   1913 ;src\mytestrom.c:1320: for (t=0; t<MaxObjNum; t++) {
      000B56 0C               [ 4] 1914 	inc	c
      000B57 79               [ 4] 1915 	ld	a, c
      000B58 D6 08            [ 7] 1916 	sub	a, #0x08
      000B5A 38 DE            [12] 1917 	jr	C, 00104$
                                   1918 ;src\mytestrom.c:1324: SetVramW(1,0xF800);					// sat 1
      000B5C 11 00 F8         [10] 1919 	ld	de, #0xf800
      000B5F 3E 01            [ 7] 1920 	ld	a, #0x01
      000B61 CDrB1r0B         [17] 1921 	call	_SetVramW
                                   1922 ;src\mytestrom.c:1325: for (t=0; t<MaxObjNum; t++) {
      000B64 0E 00            [ 7] 1923 	ld	c, #0x00
      000B66                       1924 00106$:
                                   1925 ;src\mytestrom.c:1326: VramWrite(((unsigned int) &sprite_colors) + t*64,64);
      000B66 11r94r17         [10] 1926 	ld	de, #_sprite_colors
      000B69 69               [ 4] 1927 	ld	l, c
                                   1928 ;	spillPairReg hl
                                   1929 ;	spillPairReg hl
      000B6A 26 00            [ 7] 1930 	ld	h, #0x00
                                   1931 ;	spillPairReg hl
                                   1932 ;	spillPairReg hl
      000B6C 29               [11] 1933 	add	hl, hl
      000B6D 29               [11] 1934 	add	hl, hl
      000B6E 29               [11] 1935 	add	hl, hl
      000B6F 29               [11] 1936 	add	hl, hl
      000B70 29               [11] 1937 	add	hl, hl
      000B71 29               [11] 1938 	add	hl, hl
      000B72 19               [11] 1939 	add	hl, de
      000B73 C5               [11] 1940 	push	bc
      000B74 11 40 00         [10] 1941 	ld	de, #0x0040
      000B77 CDrA7r0B         [17] 1942 	call	_VramWrite
      000B7A C1               [10] 1943 	pop	bc
                                   1944 ;src\mytestrom.c:1325: for (t=0; t<MaxObjNum; t++) {
      000B7B 0C               [ 4] 1945 	inc	c
      000B7C 79               [ 4] 1946 	ld	a, c
      000B7D D6 08            [ 7] 1947 	sub	a, #0x08
      000B7F 38 E5            [12] 1948 	jr	C, 00106$
                                   1949 ;src\mytestrom.c:1329: SetVramW(0,0xF000);					// sprite patterns	
      000B81 11 00 F0         [10] 1950 	ld	de, #0xf000
      000B84 AF               [ 4] 1951 	xor	a, a
      000B85 CDrB1r0B         [17] 1952 	call	_SetVramW
                                   1953 ;src\mytestrom.c:1330: for (t=0; t<MaxObjNum; t++) {	
      000B88 0E 00            [ 7] 1954 	ld	c, #0x00
      000B8A                       1955 00108$:
                                   1956 ;src\mytestrom.c:1331: VramWrite(((unsigned int) &sprite_patterns) + t*128,128);
      000B8A 11r94r0C         [10] 1957 	ld	de, #_sprite_patterns
      000B8D 69               [ 4] 1958 	ld	l, c
                                   1959 ;	spillPairReg hl
                                   1960 ;	spillPairReg hl
                                   1961 ;	spillPairReg hl
                                   1962 ;	spillPairReg hl
      000B8E AF               [ 4] 1963 	xor	a, a
      000B8F 67               [ 4] 1964 	ld	h, a
      000B90 CB 1C            [ 8] 1965 	rr	h
      000B92 65               [ 4] 1966 	ld	h, l
      000B93 CB 1C            [ 8] 1967 	rr	h
      000B95 1F               [ 4] 1968 	rra
      000B96 6F               [ 4] 1969 	ld	l, a
                                   1970 ;	spillPairReg hl
                                   1971 ;	spillPairReg hl
      000B97 19               [11] 1972 	add	hl, de
      000B98 C5               [11] 1973 	push	bc
      000B99 11 80 00         [10] 1974 	ld	de, #0x0080
      000B9C CDrA7r0B         [17] 1975 	call	_VramWrite
      000B9F C1               [10] 1976 	pop	bc
                                   1977 ;src\mytestrom.c:1330: for (t=0; t<MaxObjNum; t++) {	
      000BA0 0C               [ 4] 1978 	inc	c
      000BA1 79               [ 4] 1979 	ld	a, c
      000BA2 D6 08            [ 7] 1980 	sub	a, #0x08
      000BA4 38 E4            [12] 1981 	jr	C, 00108$
                                   1982 ;src\mytestrom.c:1333: }
      000BA6 C9               [10] 1983 	ret
                                   1984 ;src\mytestrom.c:1335: void VramWrite(unsigned int addr, unsigned int len) __sdcccall(1) __naked
                                   1985 ;	---------------------------------
                                   1986 ; Function VramWrite
                                   1987 ; ---------------------------------
      000BA7                       1988 _VramWrite::
                                   1989 ;src\mytestrom.c:1348: __endasm;		
      000BA7 0E 98            [ 7] 1990 	ld	c,#0x98
      000BA9                       1991 	095$:
      000BA9 ED A3            [16] 1992 	outi
      000BAB 1B               [ 6] 1993 	dec	de
      000BAC 7A               [ 4] 1994 	ld	a,d
      000BAD B3               [ 4] 1995 	or	a,e
      000BAE 20 F9            [12] 1996 	jr	nz,095$
      000BB0 C9               [10] 1997 	ret
                                   1998 ;src\mytestrom.c:1349: }
                                   1999 ;src\mytestrom.c:1351: void SetVramW(char page, unsigned int addr) __sdcccall(1) __naked {
                                   2000 ;	---------------------------------
                                   2001 ; Function SetVramW
                                   2002 ; ---------------------------------
      000BB1                       2003 _SetVramW::
                                   2004 ;src\mytestrom.c:1376: __endasm;		
                                   2005 ;	Set VDP address counter to write from address ADE (17-bit)
                                   2006 ;	Enables the interrupts
      000BB1 EB               [ 4] 2007 	ex	de,hl
      000BB2 CB 04            [ 8] 2008 	rlc	h
      000BB4 17               [ 4] 2009 	rla
      000BB5 CB 04            [ 8] 2010 	rlc	h
      000BB7 17               [ 4] 2011 	rla
      000BB8 CB 3C            [ 8] 2012 	srl	h
      000BBA CB 3C            [ 8] 2013 	srl	h
      000BBC F3               [ 4] 2014 	di
      000BBD D3 99            [11] 2015 	out	(#0x99),a
      000BBF 3E 8E            [ 7] 2016 	ld	a,#0x8E
      000BC1 D3 99            [11] 2017 	out	(#0x99),a
      000BC3 7D               [ 4] 2018 	ld	a,l
      000BC4 D3 99            [11] 2019 	out	(#0x99),a
      000BC6 7C               [ 4] 2020 	ld	a,h
      000BC7 F6 40            [ 7] 2021 	or	a,#0x40
      000BC9 FB               [ 4] 2022 	ei
      000BCA D3 99            [11] 2023 	out	(#0x99),a
      000BCC EB               [ 4] 2024 	ex	de,hl
      000BCD C9               [10] 2025 	ret
                                   2026 ;src\mytestrom.c:1377: }
                                   2027 ;src\mytestrom.c:1380: void chgmod(char c) __sdcccall(1) __naked {
                                   2028 ;	---------------------------------
                                   2029 ; Function chgmod
                                   2030 ; ---------------------------------
      000BCE                       2031 _chgmod::
                                   2032 ;src\mytestrom.c:1384: __endasm;
      000BCE C3 5F 00         [10] 2033 	jp	0x005f
                                   2034 ;src\mytestrom.c:1385: }
                                   2035 ;src\mytestrom.c:1387: void putch(char c) __sdcccall(1) __naked {
                                   2036 ;	---------------------------------
                                   2037 ; Function putch
                                   2038 ; ---------------------------------
      000BD1                       2039 _putch::
                                   2040 ;src\mytestrom.c:1391: __endasm;
      000BD1 C3 A2 00         [10] 2041 	jp	0x00a2
                                   2042 ;src\mytestrom.c:1392: }
                                   2043 ;src\mytestrom.c:1395: void	myHMMV( unsigned int DX, unsigned int DY, unsigned int NX, unsigned int NY, char COL) __sdcccall(0) __naked
                                   2044 ;	---------------------------------
                                   2045 ; Function myHMMV
                                   2046 ; ---------------------------------
      000BD4                       2047 _myHMMV::
                                   2048 ;src\mytestrom.c:1458: __endasm;
                                   2049 ;****************************************************************
                                   2050 ;	HMMV painting the rectangle in high speed Eric
                                   2051 ;	void HMMV( unsigned int XS, unsigned int YS, unsigned int DX, unsigned int DY, char COL);
                                   2052 ;
                                   2053 ;****************************************************************
      000BD4 DD E5            [15] 2054 	push	ix
      000BD6 DD 21 00 00      [14] 2055 	ld	ix,#0
      000BDA DD 39            [15] 2056 	add	ix,sp
      000BDC F3               [ 4] 2057 	di
      000BDD CDr00r00         [17] 2058 	call	_VDPready
      000BE0 3E 24            [ 7] 2059 	ld	a,#36
      000BE2 D3 99            [11] 2060 	out	(#0x99),a
      000BE4 3E 91            [ 7] 2061 	ld	a,#128+#17
      000BE6 D3 99            [11] 2062 	out	(#0x99),a ;R#17 := 36
      000BE8 0E 9B            [ 7] 2063 	ld	c,#0x9b
      000BEA DD 7E 04         [19] 2064 	ld	a,4(ix) ;
      000BED ED 79            [12] 2065 	out	(c),a ; R36 DX low byte
      000BEF DD 7E 05         [19] 2066 	ld	a,5(ix) ;
      000BF2 ED 79            [12] 2067 	out	(c),a ; R37 DX high byte
      000BF4 DD 7E 06         [19] 2068 	ld	a,6(ix) ;
      000BF7 ED 79            [12] 2069 	out	(c),a ; R38 DY low byte
      000BF9 DD 7E 07         [19] 2070 	ld	a,7(ix) ;
      000BFC ED 79            [12] 2071 	out	(c),a ; R39 DY high byte
      000BFE DD 7E 08         [19] 2072 	ld	a,8(ix) ;
      000C01 ED 79            [12] 2073 	out	(c),a ; R40 NX low byte
      000C03 DD 7E 09         [19] 2074 	ld	a,9(ix) ;
      000C06 ED 79            [12] 2075 	out	(c),a ; R41 NX high byte
      000C08 DD 7E 0A         [19] 2076 	ld	a,10(ix) ;
      000C0B ED 79            [12] 2077 	out	(c),a ; R42 NY low byte
      000C0D DD 7E 0B         [19] 2078 	ld	a,11(ix) ;
      000C10 ED 79            [12] 2079 	out	(c),a ; R43 NY high byte
      000C12 DD 7E 0C         [19] 2080 	ld	a,12(ix) ;
      000C15 ED 79            [12] 2081 	out	(c),a ; R44 COL low byte
      000C17 AF               [ 4] 2082 	xor	a ;
      000C18 ED 79            [12] 2083 	out	(c),a ; R45 DIX and DIY ! DX and DY express in incremental direction ! internal VRAM
      000C1A F6 C0            [ 7] 2084 	or	#0b11000000 ;HMMV command
      000C1C ED 79            [12] 2085 	out	(c),a ;do it
      000C1E FB               [ 4] 2086 	ei
      000C1F DD E1            [14] 2087 	pop	ix
      000C21 C9               [10] 2088 	ret
                                   2089 ;src\mytestrom.c:1459: }
                                   2090 ;src\mytestrom.c:1462: void SetDisplayPage(char n) __z88dk_fastcall
                                   2091 ;	---------------------------------
                                   2092 ; Function SetDisplayPage
                                   2093 ; ---------------------------------
      000C22                       2094 _SetDisplayPage::
                                   2095 ;src\mytestrom.c:1489: __endasm;
                                   2096 ;----------------------------
                                   2097 ;	void SetDisplayPage(char n)
                                   2098 ;	MSX2 Show the specified VRAM Page at Screen
                                   2099 ;
      000C22 7D               [ 4] 2100 	ld	a,l
      000C23 17               [ 4] 2101 	rla
      000C24 17               [ 4] 2102 	rla
      000C25 17               [ 4] 2103 	rla
      000C26 17               [ 4] 2104 	rla
      000C27 17               [ 4] 2105 	rla
      000C28 E6 7F            [ 7] 2106 	and	#0x7F
      000C2A F6 1F            [ 7] 2107 	or	#0x1F
      000C2C 47               [ 4] 2108 	ld	b,a
      000C2D 3E 02            [ 7] 2109 	ld	a,#2
      000C2F F6 80            [ 7] 2110 	or	#0x80
      000C31 0E 99            [ 7] 2111 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C33 F3               [ 4] 2112 	di
      000C34 ED 41            [12] 2113 	out	(c), b ;; out data
      000C36 ED 79            [12] 2114 	out	(c), a ;; out VDP register number
      000C38 FB               [ 4] 2115 	ei
      000C39 32 F5 FA         [13] 2116 	ld	(#0xFAF5),a ;; DPPAGE
                                   2117 ;src\mytestrom.c:1490: }
      000C3C C9               [10] 2118 	ret
                                   2119 ;src\mytestrom.c:1495: void VDPlineSwitch(void) 
                                   2120 ;	---------------------------------
                                   2121 ; Function VDPlineSwitch
                                   2122 ; ---------------------------------
      000C3D                       2123 _VDPlineSwitch::
                                   2124 ;src\mytestrom.c:1506: __endasm;
      000C3D 3A E8 FF         [13] 2125 	ld	a,(#_RG9SAV)
      000C40 EE 80            [ 7] 2126 	xor	a,#0b10000000
      000C42 32 E8 FF         [13] 2127 	ld	(#_RG9SAV),a
      000C45 47               [ 4] 2128 	ld	b,a
      000C46 3E 89            [ 7] 2129 	ld	a,#0x89
      000C48 0E 99            [ 7] 2130 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C4A ED 41            [12] 2131 	out	(c), b ;; out data
      000C4C ED 79            [12] 2132 	out	(c), a ;; out VDP register number
                                   2133 ;src\mytestrom.c:1507: }
      000C4E C9               [10] 2134 	ret
                                   2135 ;src\mytestrom.c:1509: void VDP60Hz(void)
                                   2136 ;	---------------------------------
                                   2137 ; Function VDP60Hz
                                   2138 ; ---------------------------------
      000C4F                       2139 _VDP60Hz::
                                   2140 ;src\mytestrom.c:1520: __endasm;
      000C4F 3A E8 FF         [13] 2141 	ld	a,(#_RG9SAV)
      000C52 E6 FD            [ 7] 2142 	and	#0b11111101
      000C54 32 E8 FF         [13] 2143 	ld	(#_RG9SAV),a
      000C57 47               [ 4] 2144 	ld	b,a
      000C58 3E 89            [ 7] 2145 	ld	a,#0x89
      000C5A 0E 99            [ 7] 2146 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C5C ED 41            [12] 2147 	out	(c), b ;; out data
      000C5E ED 79            [12] 2148 	out	(c), a ;; out VDP register number
                                   2149 ;src\mytestrom.c:1521: }
      000C60 C9               [10] 2150 	ret
                                   2151 ;src\mytestrom.c:1523: void PrintChar(char c) 
                                   2152 ;	---------------------------------
                                   2153 ; Function PrintChar
                                   2154 ; ---------------------------------
      000C61                       2155 _PrintChar::
                                   2156 ;src\mytestrom.c:1534: __endasm;
      000C61 DD E5            [15] 2157 	push	ix
      000C63 DD 21 00 00      [14] 2158 	ld	ix,#0
      000C67 DD 39            [15] 2159 	add	ix,sp
      000C69 DD 7E 04         [19] 2160 	ld	a,4(ix)
      000C6C CD A2 00         [17] 2161 	call	#0xA2 ; Bios CHPUT
      000C6F FB               [ 4] 2162 	ei
      000C70 DD E1            [14] 2163 	pop	ix
                                   2164 ;src\mytestrom.c:1535: }
      000C72 C9               [10] 2165 	ret
                                   2166 ;src\mytestrom.c:1564: void Print(char* text)
                                   2167 ;	---------------------------------
                                   2168 ; Function Print
                                   2169 ; ---------------------------------
      000C73                       2170 _Print::
                                   2171 ;src\mytestrom.c:1568: while(*(text)) 
      000C73                       2172 00104$:
      000C73 7E               [ 7] 2173 	ld	a, (hl)
      000C74 B7               [ 4] 2174 	or	a, a
      000C75 C8               [11] 2175 	ret	Z
                                   2176 ;src\mytestrom.c:1570: character=*(text++);
      000C76 23               [ 6] 2177 	inc	hl
                                   2178 ;src\mytestrom.c:1571: if (character=='\n')
      000C77 4F               [ 4] 2179 	ld	c, a
      000C78 D6 0A            [ 7] 2180 	sub	a, #0x0a
      000C7A 20 0F            [12] 2181 	jr	NZ, 00102$
                                   2182 ;src\mytestrom.c:1573: PrintChar(10); //LF (Line Feed)
      000C7C E5               [11] 2183 	push	hl
      000C7D 3E 0A            [ 7] 2184 	ld	a, #0x0a
      000C7F CDr61r0C         [17] 2185 	call	_PrintChar
      000C82 3E 0D            [ 7] 2186 	ld	a, #0x0d
      000C84 CDr61r0C         [17] 2187 	call	_PrintChar
      000C87 E1               [10] 2188 	pop	hl
      000C88 C3r73r0C         [10] 2189 	jp	00104$
      000C8B                       2190 00102$:
                                   2191 ;src\mytestrom.c:1576: PrintChar(character);
      000C8B E5               [11] 2192 	push	hl
      000C8C 79               [ 4] 2193 	ld	a, c
      000C8D CDr61r0C         [17] 2194 	call	_PrintChar
      000C90 E1               [10] 2195 	pop	hl
                                   2196 ;src\mytestrom.c:1579: }
      000C91 C3r73r0C         [10] 2197 	jp	00104$
                                   2198 ;src\mytestrom.c:1582: void sprite_patterns(void) __naked
                                   2199 ;	---------------------------------
                                   2200 ; Function sprite_patterns
                                   2201 ; ---------------------------------
      000C94                       2202 _sprite_patterns::
                                   2203 ;src\mytestrom.c:1586: __endasm;	
      000C94 00 00 00 00 00 0B 1F  2204 	.incbin	"data\knight_frm.bin"
             3E 6E F7 FB FF FF F9
             FE BF 00 00 00 00 00
             B8 1C BE 1B 3F FF BF
             BF AC 1C 3E 00 00 00
             01 03 00 08 09 35 7A
             7D 3B 07 27 61 40 00
             00 00 F8 F0 40 E8 48
             E6 D6 36 F6 F0 F0 E8
             C0 FF 7F 3F 00 DF EF
             EF FF CF 07 03 00 00
             00 00 00 FF DF BF 00
             F0 F0 78 08 F8 FC FC
             FC 64 5C 7E 00 38 3C
             00 FF 38 58 5C 4C 04
             00 00 00 00 00 00 00
             0E 2E 40 F0 00 00 80
             F0 00 78 78 78 38 20
             1C 7E
                                   2205 ;src\mytestrom.c:1587: }
                                   2206 ;src\mytestrom.c:1589: void sprite_colors(void) __naked
                                   2207 ;	---------------------------------
                                   2208 ; Function sprite_colors
                                   2209 ; ---------------------------------
      001794                       2210 _sprite_colors::
                                   2211 ;src\mytestrom.c:1593: __endasm;	
      001794 00 00 00 00 00 01 01  2212 	.incbin	"data\knight_clr.bin"
             01 01 01 01 01 01 01
             01 01 01 01 01 01 01
             08 48 48 48 48 48 48
             48 48 48 08 01 01 01
             00 01 01 01 01 01 01
             01 01 01 01 01 00 48
             48 08 01 48 48 48 48
             48 48 48 48 48 08 48
             01 00 00 00 00 01 01
             01 01 01 01 01 01 01
             01 01 01 01 01 01 01
             08 48 48 48 48 48 48
             48 48 48 08 48 01 01
             00 00 00 00 01 01 01
             01 01 01 01 01 01 00
             48 08 01 01 01 01 08
             08 48 48 48 48 48 08
             48 01
                                   2213 ;src\mytestrom.c:1594: }
                                   2214 ;src\mytestrom.c:1596: void DataLevelMap(void) __naked {
                                   2215 ;	---------------------------------
                                   2216 ; Function DataLevelMap
                                   2217 ; ---------------------------------
      001D14                       2218 _DataLevelMap::
                                   2219 ;src\mytestrom.c:1599: __endasm;
      001D14 64 0B 44 73 68 6B 6B  2220 	.incbin	"data\datamap.bin"
             6B 6B 6B 6B 6B 6B 2F
             5D 4D 51 51 51 51 51
             51 51 51 07 17 1D 27
             2E 41 4B 76 62 73 6B
             07 16 20 22 25 4B 41
             71 3B 5D 51 0A 0E 1B
             12 1C 3E 5C 65 32 31
             4A 06 0B 23 1A 18 37
             74 69 34 40 4E 07 17
             1D 27 2E 30 47 6E 29
             45 53 07 16 20 22 25
             4B 42 6D 24 35 3D 0A
             0E 1B 12 1C 41 3F 65
             32 31 4A 06 0B 23 1A
             18 4B 4B 69 34 40 4E
             0F 17 1D 27 2E 41 41
             6E 29 45 53 26 16 20
             22 25
                                   2221 ;src\mytestrom.c:1600: }
                                   2222 	.area _BANK0
                                   2223 	.area _INITIALIZER
                                   2224 	.area _CABS (ABS)
