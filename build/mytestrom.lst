                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module mytestrom
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _PrintChar
                                     12 	.globl _PlotOneColumnTileAndMask
                                     13 	.globl _PlotOneColumnTile
                                     14 	.globl _main
                                     15 	.globl b_intro
                                     16 	.globl _intro
                                     17 	.globl b_DataLevelMap
                                     18 	.globl _DataLevelMap
                                     19 	.globl _sprite_colors
                                     20 	.globl _sprite_patterns
                                     21 	.globl _v
                                     22 	.globl _x
                                     23 	.globl _y
                                     24 	.globl _u
                                     25 	.globl _object
                                     26 	.globl _LevelMap
                                     27 	.globl _cursat
                                     28 	.globl _OldIsr
                                     29 	.globl _page
                                     30 	.globl _newx
                                     31 	.globl _WLevelDY
                                     32 	.globl _WLevelDX
                                     33 	.globl _LevelH
                                     34 	.globl _LevelW
                                     35 	.globl _WLevely
                                     36 	.globl _WLevelx
                                     37 	.globl _RG18SA
                                     38 	.globl _RG17SA
                                     39 	.globl _RG16SA
                                     40 	.globl _RG15SA
                                     41 	.globl _RG14SA
                                     42 	.globl _RG13SA
                                     43 	.globl _RG12SA
                                     44 	.globl _RG11SA
                                     45 	.globl _RG10SA
                                     46 	.globl _RG9SAV
                                     47 	.globl _RG8SAV
                                     48 	.globl _RG1SAV
                                     49 	.globl _RG0SAV
                                     50 	.globl _ScrollRight
                                     51 	.globl _ScrollLeft
                                     52 	.globl _BorderLinesL
                                     53 	.globl _BorderLinesR
                                     54 	.globl _NewLine
                                     55 	.globl _PatchPlotOneTile
                                     56 	.globl _myVDPwrite
                                     57 	.globl _myfVDP
                                     58 	.globl _mySetAdjust
                                     59 	.globl _myFT_wait
                                     60 	.globl _WaitLineInt
                                     61 	.globl _FT_errorHandler
                                     62 	.globl _MyLoadMap
                                     63 	.globl _myISR
                                     64 	.globl _myInstISR
                                     65 	.globl _myISRrestore
                                     66 	.globl _myCheckkbd
                                     67 	.globl _ObjectsInit
                                     68 	.globl _ObjectstoVRAM
                                     69 	.globl _UpdateColor
                                     70 	.globl _UpdateFrame
                                     71 	.globl _SprtInit
                                     72 	.globl _VramWrite
                                     73 	.globl _SetVramR14
                                     74 	.globl _SetVramW14
                                     75 	.globl _SetVramW
                                     76 	.globl _SetVramR
                                     77 	.globl _chgmod
                                     78 	.globl _putch
                                     79 	.globl _myHMMV
                                     80 	.globl _SetDisplayPage
                                     81 	.globl _VDPlineSwitch
                                     82 	.globl _VDP60Hz
                                     83 	.globl _Print
                                     84 	.globl _myVDPready
                                     85 ;--------------------------------------------------------
                                     86 ; special function registers
                                     87 ;--------------------------------------------------------
                           000098    88 _Port98	=	0x0098
                           000099    89 _Port99	=	0x0099
                                     90 ;--------------------------------------------------------
                                     91 ; ram data
                                     92 ;--------------------------------------------------------
                                     93 	.area _DATA
                           00F3DF    94 _RG0SAV	=	0xf3df
                           00F3E0    95 _RG1SAV	=	0xf3e0
                           00FFE7    96 _RG8SAV	=	0xffe7
                           00FFE8    97 _RG9SAV	=	0xffe8
                           00FFE9    98 _RG10SA	=	0xffe9
                           00FFEA    99 _RG11SA	=	0xffea
                           00FFEB   100 _RG12SA	=	0xffeb
                           00FFEC   101 _RG13SA	=	0xffec
                           00FFED   102 _RG14SA	=	0xffed
                           00FFEE   103 _RG15SA	=	0xffee
                           00FFEF   104 _RG16SA	=	0xffef
                           00FFF0   105 _RG17SA	=	0xfff0
                           00FFF1   106 _RG18SA	=	0xfff1
      000000                        107 _MyCommand:
      000000                        108 	.ds 15
      00000F                        109 _MyBorder:
      00000F                        110 	.ds 15
      00001E                        111 _WLevelx::
      00001E                        112 	.ds 2
      000020                        113 _WLevely::
      000020                        114 	.ds 1
      000021                        115 _LevelW::
      000021                        116 	.ds 1
      000022                        117 _LevelH::
      000022                        118 	.ds 1
      000023                        119 _WLevelDX::
      000023                        120 	.ds 2
      000025                        121 _WLevelDY::
      000025                        122 	.ds 2
      000027                        123 _newx::
      000027                        124 	.ds 1
      000028                        125 _page::
      000028                        126 	.ds 1
      000029                        127 _OldIsr::
      000029                        128 	.ds 3
      00002C                        129 _cursat::
      00002C                        130 	.ds 1
      00002D                        131 _LevelMap::
      00002D                        132 	.ds 2816
      000B2D                        133 _p:
      000B2D                        134 	.ds 2
      000B2F                        135 _object::
      000B2F                        136 	.ds 56
      000B67                        137 _u::
      000B67                        138 	.ds 2
      000B69                        139 _y::
      000B69                        140 	.ds 1
      000B6A                        141 _x::
      000B6A                        142 	.ds 1
      000B6B                        143 _v::
      000B6B                        144 	.ds 1
                                    145 ;--------------------------------------------------------
                                    146 ; ram data
                                    147 ;--------------------------------------------------------
                                    148 	.area _INITIALIZED
                                    149 ;--------------------------------------------------------
                                    150 ; absolute external ram data
                                    151 ;--------------------------------------------------------
                                    152 	.area _DABS (ABS)
                                    153 ;--------------------------------------------------------
                                    154 ; global & static initialisations
                                    155 ;--------------------------------------------------------
                                    156 	.area _HOME
                                    157 	.area _GSINIT
                                    158 	.area _GSFINAL
                                    159 	.area _GSINIT
                                    160 ;--------------------------------------------------------
                                    161 ; Home
                                    162 ;--------------------------------------------------------
                                    163 	.area _HOME
                                    164 	.area _HOME
                                    165 ;--------------------------------------------------------
                                    166 ; code
                                    167 ;--------------------------------------------------------
                                    168 	.area _BANK0
                                    169 ;src\mytestrom.c:61: void main(void) 
                                    170 ;	---------------------------------
                                    171 ; Function main
                                    172 ; ---------------------------------
      000000                        173 _main::
                                    174 ;src\mytestrom.c:65: intro();
      000000 1Er00            [ 7]  175 	ld	e, #b_intro
      000002 21r00r00         [10]  176 	ld	hl, #_intro
      000005 CDr00r00         [17]  177 	call	___sdcc_bcall_ehl
                                    178 ;src\mytestrom.c:67: rd = ReadMSXtype();					  	// Read MSX Type
      000008 3A 2D 00         [13]  179 	ld	a, (#0x002d)
                                    180 ;src\mytestrom.c:69: if (rd==0) FT_errorHandler(3,"msx 1 ");	// If MSX1 got to Error !
      00000B B7               [ 4]  181 	or	a, a
      00000C 20 08            [12]  182 	jr	NZ, 00102$
      00000E 11rA0r01         [10]  183 	ld	de, #___str_0
      000011 3E 03            [ 7]  184 	ld	a, #0x03
      000013 CDr5Dr07         [17]  185 	call	_FT_errorHandler
      000016                        186 00102$:
                                    187 ;src\mytestrom.c:71: MyLoadMap(1,LevelMap);					// load level map 256x11 arranged by columns
      000016 11r2Dr00         [10]  188 	ld	de, #_LevelMap
      000019 3E 01            [ 7]  189 	ld	a, #0x01
      00001B CDr1Ar08         [17]  190 	call	_MyLoadMap
                                    191 ;src\mytestrom.c:73: chgmod(8);						  		// Init Screen 8
      00001E 3E 08            [ 7]  192 	ld	a, #0x08
      000020 CDr68r0C         [17]  193 	call	_chgmod
                                    194 ;src\mytestrom.c:75: ObjectsInit();							// initialize logical object 
      000023 CDrFCr08         [17]  195 	call	_ObjectsInit
                                    196 ;src\mytestrom.c:77: myVDPwrite(0,7);						// borders	
      000026 2E 07            [ 7]  197 	ld	l, #0x07
                                    198 ;	spillPairReg hl
                                    199 ;	spillPairReg hl
      000028 AF               [ 4]  200 	xor	a, a
      000029 CDrD8r06         [17]  201 	call	_myVDPwrite
                                    202 ;src\mytestrom.c:78: VDPlineSwitch();						// 192 lines
      00002C CDrD7r0C         [17]  203 	call	_VDPlineSwitch
                                    204 ;src\mytestrom.c:79: VDP60Hz();
      00002F CDrE9r0C         [17]  205 	call	_VDP60Hz
                                    206 ;src\mytestrom.c:81: myHMMV(0,0,256,512, 0);					// Clear all VRAM  by Byte 0 (Black)
      000032 AF               [ 4]  207 	xor	a, a
      000033 F5               [11]  208 	push	af
      000034 33               [ 6]  209 	inc	sp
      000035 21 00 02         [10]  210 	ld	hl, #0x0200
      000038 E5               [11]  211 	push	hl
      000039 26 01            [ 7]  212 	ld	h, #0x01
      00003B E5               [11]  213 	push	hl
      00003C 65               [ 4]  214 	ld	h, l
      00003D E5               [11]  215 	push	hl
      00003E E5               [11]  216 	push	hl
      00003F CDr6Er0C         [17]  217 	call	_myHMMV
      000042 21 09 00         [10]  218 	ld	hl, #9
      000045 39               [11]  219 	add	hl, sp
      000046 F9               [ 6]  220 	ld	sp, hl
                                    221 ;src\/myheader.h:14: __endasm; 
      000047 F3               [ 4]  222 	di
                                    223 ;src\mytestrom.c:83: myVDPready();							// wait for command completion
      000048 CDr2Er0D         [17]  224 	call	_myVDPready
                                    225 ;src\/myheader.h:8: __endasm; 
      00004B FB               [ 4]  226 	ei
                                    227 ;src\mytestrom.c:86: SprtInit();								// initialize sprites in VRAM 
      00004C CDr68r0B         [17]  228 	call	_SprtInit
                                    229 ;src\mytestrom.c:87: ObjectstoVRAM(0);	
      00004F 21 00 00         [10]  230 	ld	hl, #0x0000
      000052 CDrA9r09         [17]  231 	call	_ObjectstoVRAM
                                    232 ;src\mytestrom.c:89: myInstISR();							// install a fake ISR to cut the overhead
      000055 CDrB0r08         [17]  233 	call	_myInstISR
                                    234 ;src\mytestrom.c:91: page = 0;
      000058 21r28r00         [10]  235 	ld	hl, #_page
      00005B 36 00            [10]  236 	ld	(hl), #0x00
                                    237 ;src\mytestrom.c:92: mySetAdjust(0,8);						// same as myVDPwrite((0-8) & 15,18);	
      00005D 2E 08            [ 7]  238 	ld	l, #0x08
                                    239 ;	spillPairReg hl
                                    240 ;	spillPairReg hl
      00005F AF               [ 4]  241 	xor	a, a
      000060 CDr22r07         [17]  242 	call	_mySetAdjust
                                    243 ;src\mytestrom.c:94: for (WLevelx = 0;WLevelx<0+WindowW;) {
      000063 21 00 00         [10]  244 	ld	hl, #0x0000
      000066 22r1Er00         [16]  245 	ld	(_WLevelx), hl
      000069                        246 00117$:
                                    247 ;src\mytestrom.c:95: myFT_wait(1);		
      000069 3E 01            [ 7]  248 	ld	a, #0x01
      00006B CDr3Fr07         [17]  249 	call	_myFT_wait
                                    250 ;src\mytestrom.c:96: NewLine(WLevelx,0,WLevelx);WLevelx++;
      00006E 3Ar1Er00         [13]  251 	ld	a, (_WLevelx+0)
      000071 4F               [ 4]  252 	ld	c, a
      000072 2Ar1Er00         [16]  253 	ld	hl, (_WLevelx)
      000075 E5               [11]  254 	push	hl
      000076 2E 00            [ 7]  255 	ld	l, #0x00
                                    256 ;	spillPairReg hl
                                    257 ;	spillPairReg hl
      000078 79               [ 4]  258 	ld	a, c
      000079 CDr08r06         [17]  259 	call	_NewLine
      00007C 2Ar1Er00         [16]  260 	ld	hl, (_WLevelx)
      00007F 23               [ 6]  261 	inc	hl
                                    262 ;src\mytestrom.c:97: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      000080 22r1Er00         [16]  263 	ld	(_WLevelx), hl
      000083 3E F0            [ 7]  264 	ld	a, #0xf0
      000085 95               [ 4]  265 	sub	a, l
      000086 5F               [ 4]  266 	ld	e, a
      000087 9F               [ 4]  267 	sbc	a, a
      000088 94               [ 4]  268 	sub	a, h
      000089 57               [ 4]  269 	ld	d, a
      00008A 3Ar1Er00         [13]  270 	ld	a, (_WLevelx+0)
      00008D 4F               [ 4]  271 	ld	c, a
      00008E 3E F0            [ 7]  272 	ld	a, #0xf0
      000090 91               [ 4]  273 	sub	a, c
      000091 4F               [ 4]  274 	ld	c, a
      000092 D5               [11]  275 	push	de
      000093 2E 00            [ 7]  276 	ld	l, #0x00
                                    277 ;	spillPairReg hl
                                    278 ;	spillPairReg hl
      000095 79               [ 4]  279 	ld	a, c
      000096 CDr08r06         [17]  280 	call	_NewLine
      000099 2Ar1Er00         [16]  281 	ld	hl, (_WLevelx)
      00009C 23               [ 6]  282 	inc	hl
      00009D 22r1Er00         [16]  283 	ld	(_WLevelx), hl
                                    284 ;src\mytestrom.c:98: NewLine(WLevelx,0,WLevelx);WLevelx++;
      0000A0 3Ar1Er00         [13]  285 	ld	a, (_WLevelx+0)
      0000A3 4F               [ 4]  286 	ld	c, a
      0000A4 2Ar1Er00         [16]  287 	ld	hl, (_WLevelx)
      0000A7 E5               [11]  288 	push	hl
      0000A8 2E 00            [ 7]  289 	ld	l, #0x00
                                    290 ;	spillPairReg hl
                                    291 ;	spillPairReg hl
      0000AA 79               [ 4]  292 	ld	a, c
      0000AB CDr08r06         [17]  293 	call	_NewLine
      0000AE 2Ar1Er00         [16]  294 	ld	hl, (_WLevelx)
      0000B1 23               [ 6]  295 	inc	hl
                                    296 ;src\mytestrom.c:99: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      0000B2 22r1Er00         [16]  297 	ld	(_WLevelx), hl
      0000B5 3E F0            [ 7]  298 	ld	a, #0xf0
      0000B7 95               [ 4]  299 	sub	a, l
      0000B8 5F               [ 4]  300 	ld	e, a
      0000B9 9F               [ 4]  301 	sbc	a, a
      0000BA 94               [ 4]  302 	sub	a, h
      0000BB 57               [ 4]  303 	ld	d, a
      0000BC 3Ar1Er00         [13]  304 	ld	a, (_WLevelx+0)
      0000BF 4F               [ 4]  305 	ld	c, a
      0000C0 3E F0            [ 7]  306 	ld	a, #0xf0
      0000C2 91               [ 4]  307 	sub	a, c
      0000C3 4F               [ 4]  308 	ld	c, a
      0000C4 D5               [11]  309 	push	de
      0000C5 2E 00            [ 7]  310 	ld	l, #0x00
                                    311 ;	spillPairReg hl
                                    312 ;	spillPairReg hl
      0000C7 79               [ 4]  313 	ld	a, c
      0000C8 CDr08r06         [17]  314 	call	_NewLine
      0000CB 2Ar1Er00         [16]  315 	ld	hl, (_WLevelx)
      0000CE 23               [ 6]  316 	inc	hl
                                    317 ;src\mytestrom.c:94: for (WLevelx = 0;WLevelx<0+WindowW;) {
      0000CF 22r1Er00         [16]  318 	ld	(_WLevelx), hl
      0000D2 11 F0 00         [10]  319 	ld	de, #0x00f0
      0000D5 BF               [ 4]  320 	cp	a, a
      0000D6 ED 52            [15]  321 	sbc	hl, de
      0000D8 38 8F            [12]  322 	jr	C, 00117$
                                    323 ;src\mytestrom.c:102: WLevelx = 0;	
      0000DA 21 00 00         [10]  324 	ld	hl, #0x0000
      0000DD 22r1Er00         [16]  325 	ld	(_WLevelx), hl
                                    326 ;src\mytestrom.c:104: MyBorder.ny = WindowH;
      0000E0 2E B0            [ 7]  327 	ld	l, #0xb0
      0000E2 22r19r00         [16]  328 	ld	((_MyBorder + 10)), hl
                                    329 ;src\mytestrom.c:105: MyBorder.col = 0;
      0000E5 21r1Br00         [10]  330 	ld	hl, #(_MyBorder + 12)
      0000E8 36 00            [10]  331 	ld	(hl), #0x00
                                    332 ;src\mytestrom.c:106: MyBorder.param = 0;
      0000EA 21r1Cr00         [10]  333 	ld	hl, #(_MyBorder + 13)
      0000ED 36 00            [10]  334 	ld	(hl), #0x00
                                    335 ;src\mytestrom.c:107: MyBorder.cmd = opHMMV;
      0000EF 21r1Dr00         [10]  336 	ld	hl, #(_MyBorder + 14)
      0000F2 36 C0            [10]  337 	ld	(hl), #0xc0
                                    338 ;src\mytestrom.c:109: MyCommand.ny = WindowH;
      0000F4 21 B0 00         [10]  339 	ld	hl, #0x00b0
      0000F7 22r0Ar00         [16]  340 	ld	((_MyCommand + 10)), hl
                                    341 ;src\mytestrom.c:110: MyCommand.col = 0;
      0000FA 21r0Cr00         [10]  342 	ld	hl, #(_MyCommand + 12)
      0000FD 36 00            [10]  343 	ld	(hl), #0x00
                                    344 ;src\mytestrom.c:111: MyCommand.param = 0;
      0000FF 21r0Dr00         [10]  345 	ld	hl, #(_MyCommand + 13)
      000102 36 00            [10]  346 	ld	(hl), #0x00
                                    347 ;src\mytestrom.c:112: MyCommand.cmd = opHMMM;
      000104 21r0Er00         [10]  348 	ld	hl, #(_MyCommand + 14)
      000107 36 D0            [10]  349 	ld	(hl), #0xd0
                                    350 ;src\mytestrom.c:115: while (myCheckkbd(7)==0xFF)
      000109                        351 00112$:
      000109 3E 07            [ 7]  352 	ld	a, #0x07
      00010B CDrEEr08         [17]  353 	call	_myCheckkbd
      00010E 3C               [ 4]  354 	inc	a
      00010F C2r97r01         [10]  355 	jp	NZ,00114$
                                    356 ;src\mytestrom.c:117: WaitLineInt();			// wait for line 176-16
      000112 CDr46r07         [17]  357 	call	_WaitLineInt
                                    358 ;src\mytestrom.c:118: cursat^=1;				// swap sat 0 and sat 1
      000115 3Ar2Cr00         [13]  359 	ld	a, (_cursat+0)
      000118 EE 01            [ 7]  360 	xor	a, #0x01
      00011A 32r2Cr00         [13]  361 	ld	(_cursat+0), a
                                    362 ;src\mytestrom.c:120: if ((myCheckkbd(8)==0x7F) && (WLevelx<16*(LevelW-15)))  { 
      00011D 3E 08            [ 7]  363 	ld	a, #0x08
      00011F CDrEEr08         [17]  364 	call	_myCheckkbd
      000122 D6 7F            [ 7]  365 	sub	a, #0x7f
      000124 20 37            [12]  366 	jr	NZ, 00109$
      000126 3Ar21r00         [13]  367 	ld	a, (_LevelW+0)
      000129 0E 00            [ 7]  368 	ld	c, #0x00
      00012B C6 F1            [ 7]  369 	add	a, #0xf1
      00012D 5F               [ 4]  370 	ld	e, a
      00012E 79               [ 4]  371 	ld	a, c
      00012F CE FF            [ 7]  372 	adc	a, #0xff
      000131 57               [ 4]  373 	ld	d, a
      000132 EB               [ 4]  374 	ex	de, hl
      000133 29               [11]  375 	add	hl, hl
      000134 29               [11]  376 	add	hl, hl
      000135 29               [11]  377 	add	hl, hl
      000136 29               [11]  378 	add	hl, hl
      000137 EB               [ 4]  379 	ex	de, hl
      000138 3Ar1Er00         [13]  380 	ld	a, (_WLevelx+0)
      00013B 93               [ 4]  381 	sub	a, e
      00013C 3Ar1Fr00         [13]  382 	ld	a, (_WLevelx+1)
      00013F 9A               [ 4]  383 	sbc	a, d
      000140 E2r45r01         [10]  384 	jp	PO, 00170$
      000143 EE 80            [ 7]  385 	xor	a, #0x80
      000145                        386 00170$:
      000145 F2r5Dr01         [10]  387 	jp	P, 00109$
                                    388 ;src\mytestrom.c:121: WLevelx++;
      000148 2Ar1Er00         [16]  389 	ld	hl, (_WLevelx)
      00014B 23               [ 6]  390 	inc	hl
                                    391 ;src\mytestrom.c:122: ObjectstoVRAM(WLevelx);			
      00014C 22r1Er00         [16]  392 	ld	(_WLevelx), hl
      00014F CDrA9r09         [17]  393 	call	_ObjectstoVRAM
                                    394 ;src\mytestrom.c:123: ScrollRight(WLevelx & 15);
      000152 3Ar1Er00         [13]  395 	ld	a, (_WLevelx+0)
      000155 E6 0F            [ 7]  396 	and	a, #0x0f
      000157 CDrA7r01         [17]  397 	call	_ScrollRight
      00015A C3r09r01         [10]  398 	jp	00112$
      00015D                        399 00109$:
                                    400 ;src\mytestrom.c:125: else if ((myCheckkbd(8)==0xEF) && (WLevelx>0)) { 
      00015D 3E 08            [ 7]  401 	ld	a, #0x08
      00015F CDrEEr08         [17]  402 	call	_myCheckkbd
      000162 D6 EF            [ 7]  403 	sub	a, #0xef
      000164 20 28            [12]  404 	jr	NZ, 00105$
      000166 AF               [ 4]  405 	xor	a, a
      000167 FD 21r1Er00      [14]  406 	ld	iy, #_WLevelx
      00016B FD BE 00         [19]  407 	cp	a, 0 (iy)
      00016E FD 9E 01         [19]  408 	sbc	a, 1 (iy)
      000171 E2r76r01         [10]  409 	jp	PO, 00173$
      000174 EE 80            [ 7]  410 	xor	a, #0x80
      000176                        411 00173$:
      000176 F2r8Er01         [10]  412 	jp	P, 00105$
                                    413 ;src\mytestrom.c:126: WLevelx--;
      000179 2Ar1Er00         [16]  414 	ld	hl, (_WLevelx)
      00017C 2B               [ 6]  415 	dec	hl
                                    416 ;src\mytestrom.c:127: ObjectstoVRAM(WLevelx);			
      00017D 22r1Er00         [16]  417 	ld	(_WLevelx), hl
      000180 CDrA9r09         [17]  418 	call	_ObjectstoVRAM
                                    419 ;src\mytestrom.c:128: ScrollLeft(WLevelx & 15);
      000183 3Ar1Er00         [13]  420 	ld	a, (_WLevelx+0)
      000186 E6 0F            [ 7]  421 	and	a, #0x0f
      000188 CDr70r02         [17]  422 	call	_ScrollLeft
      00018B C3r09r01         [10]  423 	jp	00112$
      00018E                        424 00105$:
                                    425 ;src\mytestrom.c:131: ObjectstoVRAM(WLevelx);						
      00018E 2Ar1Er00         [16]  426 	ld	hl, (_WLevelx)
      000191 CDrA9r09         [17]  427 	call	_ObjectstoVRAM
      000194 C3r09r01         [10]  428 	jp	00112$
      000197                        429 00114$:
                                    430 ;src\mytestrom.c:135: myISRrestore();
      000197 CDrD0r08         [17]  431 	call	_myISRrestore
                                    432 ;src\mytestrom.c:136: chgmod(0);
      00019A AF               [ 4]  433 	xor	a, a
      00019B CDr68r0C         [17]  434 	call	_chgmod
                                    435 ;src\mytestrom.c:137: Reboot(0);
      00019E C7               [11]  436 	rst	#0
                                    437 ;src\mytestrom.c:138: }
      00019F C9               [10]  438 	ret
      0001A0                        439 ___str_0:
      0001A0 6D 73 78 20 31 20      440 	.ascii "msx 1 "
      0001A6 00                     441 	.db 0x00
                                    442 ;src\mytestrom.c:140: void ScrollRight(char step) __sdcccall(1) 
                                    443 ;	---------------------------------
                                    444 ; Function ScrollRight
                                    445 ; ---------------------------------
      0001A7                        446 _ScrollRight::
      0001A7 4F               [ 4]  447 	ld	c, a
                                    448 ;src\mytestrom.c:143: myVDPwrite((step-8) & 15,18);			
      0001A8 41               [ 4]  449 	ld	b, c
      0001A9 78               [ 4]  450 	ld	a, b
      0001AA C6 F8            [ 7]  451 	add	a, #0xf8
      0001AC E6 0F            [ 7]  452 	and	a, #0x0f
      0001AE 5F               [ 4]  453 	ld	e, a
      0001AF C5               [11]  454 	push	bc
      0001B0 2E 12            [ 7]  455 	ld	l, #0x12
                                    456 ;	spillPairReg hl
                                    457 ;	spillPairReg hl
      0001B2 7B               [ 4]  458 	ld	a, e
      0001B3 CDrD8r06         [17]  459 	call	_myVDPwrite
      0001B6 C1               [10]  460 	pop	bc
                                    461 ;src\mytestrom.c:144: switch (step) {
      0001B7 79               [ 4]  462 	ld	a, c
      0001B8 B7               [ 4]  463 	or	a, a
      0001B9 20 44            [12]  464 	jr	NZ, 00102$
                                    465 ;src\mytestrom.c:146: page ^=1;							// case 0
      0001BB 3Ar28r00         [13]  466 	ld	a, (_page+0)
      0001BE EE 01            [ 7]  467 	xor	a, #0x01
      0001C0 32r28r00         [13]  468 	ld	(_page+0), a
                                    469 ;src\mytestrom.c:147: SetDisplayPage(page);
      0001C3 C5               [11]  470 	push	bc
      0001C4 3Ar28r00         [13]  471 	ld	a, (_page+0)
      0001C7 6F               [ 4]  472 	ld	l, a
                                    473 ;	spillPairReg hl
                                    474 ;	spillPairReg hl
      0001C8 CDrBCr0C         [17]  475 	call	_SetDisplayPage
      0001CB C1               [10]  476 	pop	bc
                                    477 ;src\mytestrom.c:148: MyBorder.dx = 240;
      0001CC 21 F0 00         [10]  478 	ld	hl, #0x00f0
      0001CF 22r13r00         [16]  479 	ld	((_MyBorder + 4)), hl
                                    480 ;src\mytestrom.c:149: MyBorder.nx = 15;
      0001D2 2E 0F            [ 7]  481 	ld	l, #0x0f
      0001D4 22r17r00         [16]  482 	ld	((_MyBorder + 8)), hl
                                    483 ;src\mytestrom.c:150: MyBorder.dy = 256*page;
      0001D7 3Ar28r00         [13]  484 	ld	a, (_page+0)
      0001DA 57               [ 4]  485 	ld	d, a
      0001DB 1E 00            [ 7]  486 	ld	e, #0x00
      0001DD ED 53r15r00      [20]  487 	ld	((_MyBorder + 6)), de
                                    488 ;src\mytestrom.c:151: myfVDP(&MyBorder);
      0001E1 C5               [11]  489 	push	bc
      0001E2 21r0Fr00         [10]  490 	ld	hl, #_MyBorder
      0001E5 CDrE2r06         [17]  491 	call	_myfVDP
      0001E8 C1               [10]  492 	pop	bc
                                    493 ;src\mytestrom.c:152: BorderLinesR(WindowW-1,page, WLevelx+WindowW-1);		
      0001E9 2Ar1Er00         [16]  494 	ld	hl, (_WLevelx)
      0001EC 11 EF 00         [10]  495 	ld	de, #0x00ef
      0001EF 19               [11]  496 	add	hl, de
      0001F0 C5               [11]  497 	push	bc
      0001F1 E5               [11]  498 	push	hl
      0001F2 3Ar28r00         [13]  499 	ld	a, (_page+0)
      0001F5 6F               [ 4]  500 	ld	l, a
                                    501 ;	spillPairReg hl
                                    502 ;	spillPairReg hl
      0001F6 3E EF            [ 7]  503 	ld	a, #0xef
      0001F8 CDr7Fr05         [17]  504 	call	_BorderLinesR
      0001FB C1               [10]  505 	pop	bc
                                    506 ;src\mytestrom.c:153: break;
      0001FC C3r54r02         [10]  507 	jp	00103$
                                    508 ;src\mytestrom.c:154: default:								// case 1-15
      0001FF                        509 00102$:
                                    510 ;src\mytestrom.c:155: MyCommand.sx = 16*step;
      0001FF 59               [ 4]  511 	ld	e, c
      000200 16 00            [ 7]  512 	ld	d, #0x00
      000202 EB               [ 4]  513 	ex	de, hl
      000203 29               [11]  514 	add	hl, hl
      000204 29               [11]  515 	add	hl, hl
      000205 29               [11]  516 	add	hl, hl
      000206 29               [11]  517 	add	hl, hl
      000207 EB               [ 4]  518 	ex	de, hl
      000208 ED 53r00r00      [20]  519 	ld	(_MyCommand), de
                                    520 ;src\mytestrom.c:156: MyCommand.dx = MyCommand.sx - 16;;
      00020C 2Ar00r00         [16]  521 	ld	hl, (#_MyCommand + 0)
      00020F 11 F0 FF         [10]  522 	ld	de, #0xfff0
      000212 19               [11]  523 	add	hl, de
      000213 5D               [ 4]  524 	ld	e, l
      000214 7C               [ 4]  525 	ld	a,h
      000215 57               [ 4]  526 	ld	d,a
      000216 ED 53r04r00      [20]  527 	ld	((_MyCommand + 4)), de
                                    528 ;src\mytestrom.c:157: MyCommand.sy = 256*page;
      00021A 3Ar28r00         [13]  529 	ld	a, (_page+0)
      00021D 57               [ 4]  530 	ld	d, a
      00021E 1E 00            [ 7]  531 	ld	e, #0x00
      000220 ED 53r02r00      [20]  532 	ld	((_MyCommand + 2)), de
                                    533 ;src\mytestrom.c:158: MyCommand.dy = MyCommand.sy ^ 256;
      000224 ED 5Br02r00      [20]  534 	ld	de, (#(_MyCommand + 2) + 0)
      000228 7A               [ 4]  535 	ld	a, d
      000229 EE 01            [ 7]  536 	xor	a, #0x01
      00022B 57               [ 4]  537 	ld	d, a
      00022C ED 53r06r00      [20]  538 	ld	((_MyCommand + 6)), de
                                    539 ;src\mytestrom.c:159: MyCommand.nx = 16;
      000230 21 10 00         [10]  540 	ld	hl, #0x0010
      000233 22r08r00         [16]  541 	ld	((_MyCommand + 8)), hl
                                    542 ;src\mytestrom.c:160: myfVDP(&MyCommand);		
      000236 C5               [11]  543 	push	bc
      000237 21r00r00         [10]  544 	ld	hl, #_MyCommand
      00023A CDrE2r06         [17]  545 	call	_myfVDP
      00023D C1               [10]  546 	pop	bc
                                    547 ;src\mytestrom.c:161: BorderLinesR(step+WindowW-1,page,WLevelx+WindowW-1);
      00023E 2Ar1Er00         [16]  548 	ld	hl, (_WLevelx)
      000241 11 EF 00         [10]  549 	ld	de, #0x00ef
      000244 19               [11]  550 	add	hl, de
      000245 78               [ 4]  551 	ld	a, b
      000246 C6 EF            [ 7]  552 	add	a, #0xef
      000248 5F               [ 4]  553 	ld	e, a
      000249 C5               [11]  554 	push	bc
      00024A E5               [11]  555 	push	hl
      00024B 3Ar28r00         [13]  556 	ld	a, (_page+0)
      00024E 6F               [ 4]  557 	ld	l, a
                                    558 ;	spillPairReg hl
                                    559 ;	spillPairReg hl
      00024F 7B               [ 4]  560 	ld	a, e
      000250 CDr7Fr05         [17]  561 	call	_BorderLinesR
      000253 C1               [10]  562 	pop	bc
                                    563 ;src\mytestrom.c:163: }
      000254                        564 00103$:
                                    565 ;src\mytestrom.c:164: if (step==15) PatchPlotOneTile(step+WindowW-1-16,page^1,WLevelx+WindowW-1);		
      000254 79               [ 4]  566 	ld	a, c
      000255 D6 0F            [ 7]  567 	sub	a, #0x0f
      000257 C0               [11]  568 	ret	NZ
      000258 2Ar1Er00         [16]  569 	ld	hl, (_WLevelx)
      00025B 11 EF 00         [10]  570 	ld	de, #0x00ef
      00025E 19               [11]  571 	add	hl, de
      00025F 3Ar28r00         [13]  572 	ld	a, (_page+0)
      000262 EE 01            [ 7]  573 	xor	a, #0x01
      000264 4F               [ 4]  574 	ld	c, a
      000265 78               [ 4]  575 	ld	a, b
      000266 C6 DF            [ 7]  576 	add	a, #0xdf
      000268 47               [ 4]  577 	ld	b, a
      000269 E5               [11]  578 	push	hl
      00026A 69               [ 4]  579 	ld	l, c
                                    580 ;	spillPairReg hl
                                    581 ;	spillPairReg hl
      00026B 78               [ 4]  582 	ld	a, b
      00026C CDr8Er06         [17]  583 	call	_PatchPlotOneTile
                                    584 ;src\mytestrom.c:165: }
      00026F C9               [10]  585 	ret
                                    586 ;src\mytestrom.c:167: void ScrollLeft(char step) __sdcccall(1)
                                    587 ;	---------------------------------
                                    588 ; Function ScrollLeft
                                    589 ; ---------------------------------
      000270                        590 _ScrollLeft::
                                    591 ;src\mytestrom.c:170: myVDPwrite((step-8) & 15,18);	
      000270 4F               [ 4]  592 	ld	c, a
      000271 C6 F8            [ 7]  593 	add	a, #0xf8
      000273 E6 0F            [ 7]  594 	and	a, #0x0f
      000275 47               [ 4]  595 	ld	b, a
      000276 C5               [11]  596 	push	bc
      000277 2E 12            [ 7]  597 	ld	l, #0x12
                                    598 ;	spillPairReg hl
                                    599 ;	spillPairReg hl
      000279 78               [ 4]  600 	ld	a, b
      00027A CDrD8r06         [17]  601 	call	_myVDPwrite
      00027D C1               [10]  602 	pop	bc
                                    603 ;src\mytestrom.c:171: switch (step) {
      00027E 79               [ 4]  604 	ld	a, c
      00027F D6 0F            [ 7]  605 	sub	a, #0x0f
      000281 20 41            [12]  606 	jr	NZ, 00102$
                                    607 ;src\mytestrom.c:173: page ^=1;					
      000283 3Ar28r00         [13]  608 	ld	a, (_page+0)
      000286 EE 01            [ 7]  609 	xor	a, #0x01
      000288 32r28r00         [13]  610 	ld	(_page+0), a
                                    611 ;src\mytestrom.c:174: SetDisplayPage(page);				// case 15
      00028B C5               [11]  612 	push	bc
      00028C 3Ar28r00         [13]  613 	ld	a, (_page+0)
      00028F 6F               [ 4]  614 	ld	l, a
                                    615 ;	spillPairReg hl
                                    616 ;	spillPairReg hl
      000290 CDrBCr0C         [17]  617 	call	_SetDisplayPage
      000293 C1               [10]  618 	pop	bc
                                    619 ;src\mytestrom.c:175: MyBorder.dx = 0;	
      000294 21 00 00         [10]  620 	ld	hl, #0x0000
      000297 22r13r00         [16]  621 	ld	((_MyBorder + 4)), hl
                                    622 ;src\mytestrom.c:176: MyBorder.nx = 15;
      00029A 2E 0F            [ 7]  623 	ld	l, #0x0f
      00029C 22r17r00         [16]  624 	ld	((_MyBorder + 8)), hl
                                    625 ;src\mytestrom.c:177: MyBorder.dy = 256*page;
      00029F 3Ar28r00         [13]  626 	ld	a, (_page+0)
      0002A2 06 00            [ 7]  627 	ld	b, #0x00
      0002A4 57               [ 4]  628 	ld	d, a
      0002A5 1E 00            [ 7]  629 	ld	e, #0x00
      0002A7 ED 53r15r00      [20]  630 	ld	((_MyBorder + 6)), de
                                    631 ;src\mytestrom.c:178: myfVDP(&MyBorder);
      0002AB C5               [11]  632 	push	bc
      0002AC 21r0Fr00         [10]  633 	ld	hl, #_MyBorder
      0002AF CDrE2r06         [17]  634 	call	_myfVDP
      0002B2 C1               [10]  635 	pop	bc
                                    636 ;src\mytestrom.c:179: BorderLinesL(step,page,WLevelx);		
      0002B3 C5               [11]  637 	push	bc
      0002B4 2Ar1Er00         [16]  638 	ld	hl, (_WLevelx)
      0002B7 E5               [11]  639 	push	hl
      0002B8 3Ar28r00         [13]  640 	ld	a, (_page+0)
      0002BB 6F               [ 4]  641 	ld	l, a
                                    642 ;	spillPairReg hl
                                    643 ;	spillPairReg hl
      0002BC 79               [ 4]  644 	ld	a, c
      0002BD CDrF6r04         [17]  645 	call	_BorderLinesL
      0002C0 C1               [10]  646 	pop	bc
                                    647 ;src\mytestrom.c:180: break;				
      0002C1 C3r12r03         [10]  648 	jp	00103$
                                    649 ;src\mytestrom.c:181: default:								// case 14-0
      0002C4                        650 00102$:
                                    651 ;src\mytestrom.c:182: MyCommand.sx = 16*step;
      0002C4 59               [ 4]  652 	ld	e, c
      0002C5 16 00            [ 7]  653 	ld	d, #0x00
      0002C7 EB               [ 4]  654 	ex	de, hl
      0002C8 29               [11]  655 	add	hl, hl
      0002C9 29               [11]  656 	add	hl, hl
      0002CA 29               [11]  657 	add	hl, hl
      0002CB 29               [11]  658 	add	hl, hl
      0002CC EB               [ 4]  659 	ex	de, hl
      0002CD ED 53r00r00      [20]  660 	ld	(_MyCommand), de
                                    661 ;src\mytestrom.c:183: MyCommand.dx = MyCommand.sx + 16;
      0002D1 ED 5Br00r00      [20]  662 	ld	de, (#_MyCommand + 0)
      0002D5 21 10 00         [10]  663 	ld	hl, #0x0010
      0002D8 19               [11]  664 	add	hl, de
      0002D9 EB               [ 4]  665 	ex	de, hl
      0002DA ED 53r04r00      [20]  666 	ld	((_MyCommand + 4)), de
                                    667 ;src\mytestrom.c:184: MyCommand.sy = 256*page;
      0002DE 3Ar28r00         [13]  668 	ld	a, (_page+0)
      0002E1 06 00            [ 7]  669 	ld	b, #0x00
      0002E3 57               [ 4]  670 	ld	d, a
      0002E4 1E 00            [ 7]  671 	ld	e, #0x00
      0002E6 ED 53r02r00      [20]  672 	ld	((_MyCommand + 2)), de
                                    673 ;src\mytestrom.c:185: MyCommand.dy = MyCommand.sy ^ 256;		
      0002EA ED 5Br02r00      [20]  674 	ld	de, (#(_MyCommand + 2) + 0)
      0002EE 7A               [ 4]  675 	ld	a, d
      0002EF EE 01            [ 7]  676 	xor	a, #0x01
      0002F1 57               [ 4]  677 	ld	d, a
      0002F2 ED 53r06r00      [20]  678 	ld	((_MyCommand + 6)), de
                                    679 ;src\mytestrom.c:186: MyCommand.nx = 16;						
      0002F6 21 10 00         [10]  680 	ld	hl, #0x0010
      0002F9 22r08r00         [16]  681 	ld	((_MyCommand + 8)), hl
                                    682 ;src\mytestrom.c:187: myfVDP(&MyCommand);					
      0002FC C5               [11]  683 	push	bc
      0002FD 21r00r00         [10]  684 	ld	hl, #_MyCommand
      000300 CDrE2r06         [17]  685 	call	_myfVDP
      000303 C1               [10]  686 	pop	bc
                                    687 ;src\mytestrom.c:188: BorderLinesL(step,page,WLevelx);			
      000304 C5               [11]  688 	push	bc
      000305 2Ar1Er00         [16]  689 	ld	hl, (_WLevelx)
      000308 E5               [11]  690 	push	hl
      000309 3Ar28r00         [13]  691 	ld	a, (_page+0)
      00030C 6F               [ 4]  692 	ld	l, a
                                    693 ;	spillPairReg hl
                                    694 ;	spillPairReg hl
      00030D 79               [ 4]  695 	ld	a, c
      00030E CDrF6r04         [17]  696 	call	_BorderLinesL
      000311 C1               [10]  697 	pop	bc
                                    698 ;src\mytestrom.c:190: }
      000312                        699 00103$:
                                    700 ;src\mytestrom.c:191: if (step==0) PatchPlotOneTile(16,page^1,WLevelx);				
      000312 79               [ 4]  701 	ld	a, c
      000313 B7               [ 4]  702 	or	a, a
      000314 C0               [11]  703 	ret	NZ
      000315 3Ar28r00         [13]  704 	ld	a, (_page+0)
      000318 EE 01            [ 7]  705 	xor	a, #0x01
      00031A 4F               [ 4]  706 	ld	c, a
      00031B 2Ar1Er00         [16]  707 	ld	hl, (_WLevelx)
      00031E E5               [11]  708 	push	hl
      00031F 69               [ 4]  709 	ld	l, c
                                    710 ;	spillPairReg hl
                                    711 ;	spillPairReg hl
      000320 3E 10            [ 7]  712 	ld	a, #0x10
      000322 CDr8Er06         [17]  713 	call	_PatchPlotOneTile
                                    714 ;src\mytestrom.c:192: }
      000325 C9               [10]  715 	ret
                                    716 ;src\mytestrom.c:198: void PlotOneColumnTile(void) __sdcccall(1) 
                                    717 ;	---------------------------------
                                    718 ; Function PlotOneColumnTile
                                    719 ; ---------------------------------
      000326                        720 _PlotOneColumnTile::
                                    721 ;src\mytestrom.c:230: __endasm;
      000326 D9               [ 4]  722 	exx
      000327 2Ar2Dr0B         [16]  723 	ld	hl,(_p)
      00032A 7E               [ 7]  724 	ld	a,(hl)
      00032B 07               [ 4]  725 	rlca
      00032C 07               [ 4]  726 	rlca
      00032D E6 03            [ 7]  727 	and	a,#3
      00032F 87               [ 4]  728 	add	a,a
      000330 C6r00            [ 7]  729 	add	a,#b_data0
      000332 32 00 90         [13]  730 	ld	(#0x9000),a
      000335 3C               [ 4]  731 	inc	a
      000336 32 00 B0         [13]  732 	ld	(#0xb000),a
      000339 7E               [ 7]  733 	ld	a,(hl)
      00033A 23               [ 6]  734 	inc	hl
      00033B 22r2Dr0B         [16]  735 	ld	(_p),hl ; save next tile
      00033E E6 3F            [ 7]  736 	and	a,#0x3F ; tile number
      000340 C6 80            [ 7]  737 	add	a,#0x80 ; address of the segment
      000342 67               [ 4]  738 	ld	h,a ; address of the tile in the segment
      000343 6A               [ 4]  739 	ld	l,d
      000344 D9               [ 4]  740 	exx
                                    741 	.rept	#16
                                    742 	out	(c),e ; set vram address in 14 bits
                                    743 	out	(c),d
                                    744 	inc	d ; new line
                                    745 	exx
                                    746 	outi	; write data
                                    747 	exx
                                    748 	.endm
      000345 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000347 ED 51            [12]    2 	out	(c),d
      000349 14               [ 4]    3 	inc	d ; new line
      00034A D9               [ 4]    4 	exx
      00034B ED A3            [16]    5 	outi	; write data
      00034D D9               [ 4]    6 	exx
      00034E ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000350 ED 51            [12]    2 	out	(c),d
      000352 14               [ 4]    3 	inc	d ; new line
      000353 D9               [ 4]    4 	exx
      000354 ED A3            [16]    5 	outi	; write data
      000356 D9               [ 4]    6 	exx
      000357 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000359 ED 51            [12]    2 	out	(c),d
      00035B 14               [ 4]    3 	inc	d ; new line
      00035C D9               [ 4]    4 	exx
      00035D ED A3            [16]    5 	outi	; write data
      00035F D9               [ 4]    6 	exx
      000360 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000362 ED 51            [12]    2 	out	(c),d
      000364 14               [ 4]    3 	inc	d ; new line
      000365 D9               [ 4]    4 	exx
      000366 ED A3            [16]    5 	outi	; write data
      000368 D9               [ 4]    6 	exx
      000369 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00036B ED 51            [12]    2 	out	(c),d
      00036D 14               [ 4]    3 	inc	d ; new line
      00036E D9               [ 4]    4 	exx
      00036F ED A3            [16]    5 	outi	; write data
      000371 D9               [ 4]    6 	exx
      000372 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000374 ED 51            [12]    2 	out	(c),d
      000376 14               [ 4]    3 	inc	d ; new line
      000377 D9               [ 4]    4 	exx
      000378 ED A3            [16]    5 	outi	; write data
      00037A D9               [ 4]    6 	exx
      00037B ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00037D ED 51            [12]    2 	out	(c),d
      00037F 14               [ 4]    3 	inc	d ; new line
      000380 D9               [ 4]    4 	exx
      000381 ED A3            [16]    5 	outi	; write data
      000383 D9               [ 4]    6 	exx
      000384 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000386 ED 51            [12]    2 	out	(c),d
      000388 14               [ 4]    3 	inc	d ; new line
      000389 D9               [ 4]    4 	exx
      00038A ED A3            [16]    5 	outi	; write data
      00038C D9               [ 4]    6 	exx
      00038D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00038F ED 51            [12]    2 	out	(c),d
      000391 14               [ 4]    3 	inc	d ; new line
      000392 D9               [ 4]    4 	exx
      000393 ED A3            [16]    5 	outi	; write data
      000395 D9               [ 4]    6 	exx
      000396 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000398 ED 51            [12]    2 	out	(c),d
      00039A 14               [ 4]    3 	inc	d ; new line
      00039B D9               [ 4]    4 	exx
      00039C ED A3            [16]    5 	outi	; write data
      00039E D9               [ 4]    6 	exx
      00039F ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003A1 ED 51            [12]    2 	out	(c),d
      0003A3 14               [ 4]    3 	inc	d ; new line
      0003A4 D9               [ 4]    4 	exx
      0003A5 ED A3            [16]    5 	outi	; write data
      0003A7 D9               [ 4]    6 	exx
      0003A8 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003AA ED 51            [12]    2 	out	(c),d
      0003AC 14               [ 4]    3 	inc	d ; new line
      0003AD D9               [ 4]    4 	exx
      0003AE ED A3            [16]    5 	outi	; write data
      0003B0 D9               [ 4]    6 	exx
      0003B1 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003B3 ED 51            [12]    2 	out	(c),d
      0003B5 14               [ 4]    3 	inc	d ; new line
      0003B6 D9               [ 4]    4 	exx
      0003B7 ED A3            [16]    5 	outi	; write data
      0003B9 D9               [ 4]    6 	exx
      0003BA ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003BC ED 51            [12]    2 	out	(c),d
      0003BE 14               [ 4]    3 	inc	d ; new line
      0003BF D9               [ 4]    4 	exx
      0003C0 ED A3            [16]    5 	outi	; write data
      0003C2 D9               [ 4]    6 	exx
      0003C3 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003C5 ED 51            [12]    2 	out	(c),d
      0003C7 14               [ 4]    3 	inc	d ; new line
      0003C8 D9               [ 4]    4 	exx
      0003C9 ED A3            [16]    5 	outi	; write data
      0003CB D9               [ 4]    6 	exx
      0003CC ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003CE ED 51            [12]    2 	out	(c),d
      0003D0 14               [ 4]    3 	inc	d ; new line
      0003D1 D9               [ 4]    4 	exx
      0003D2 ED A3            [16]    5 	outi	; write data
      0003D4 D9               [ 4]    6 	exx
                                    749 ;src\mytestrom.c:231: }
      0003D5 C9               [10]  750 	ret
                                    751 ;src\mytestrom.c:233: void PlotOneColumnTileAndMask(void) __sdcccall(1) 
                                    752 ;	---------------------------------
                                    753 ; Function PlotOneColumnTileAndMask
                                    754 ; ---------------------------------
      0003D6                        755 _PlotOneColumnTileAndMask::
                                    756 ;src\mytestrom.c:269: __endasm;
      0003D6 D9               [ 4]  757 	exx
      0003D7 2Ar2Dr0B         [16]  758 	ld	hl,(_p)
      0003DA 7E               [ 7]  759 	ld	a,(hl)
      0003DB 07               [ 4]  760 	rlca
      0003DC 07               [ 4]  761 	rlca
      0003DD E6 03            [ 7]  762 	and	a,#3
      0003DF 87               [ 4]  763 	add	a,a
      0003E0 C6r00            [ 7]  764 	add	a,#b_data0
      0003E2 32 00 90         [13]  765 	ld	(#0x9000),a
      0003E5 3C               [ 4]  766 	inc	a
      0003E6 32 00 B0         [13]  767 	ld	(#0xb000),a
      0003E9 7E               [ 7]  768 	ld	a,(hl)
      0003EA 23               [ 6]  769 	inc	hl
      0003EB 22r2Dr0B         [16]  770 	ld	(_p),hl ; save next tile
      0003EE E6 3F            [ 7]  771 	and	a,#0x3F ; tile number
      0003F0 C6 80            [ 7]  772 	add	a,#0x80 ; address of the segment
      0003F2 67               [ 4]  773 	ld	h,a ; address of the tile in the segment
      0003F3 6A               [ 4]  774 	ld	l,d
      0003F4 D9               [ 4]  775 	exx
                                    776 	.rept	#16
                                    777 	out	(c),e ; set vram address in 14 bits
                                    778 	out	(c),d
                                    779 	exx
                                    780 	outi	; write data
                                    781 	exx
                                    782 	out	(c),l ; set vram address in 14 bits for border
                                    783 	out	(c),d
                                    784 	inc	d ; new line
                                    785 	xor	a,a ; write border
                                    786 	out	(#0x98),a
                                    787 	.endm
      0003F5 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003F7 ED 51            [12]    2 	out	(c),d
      0003F9 D9               [ 4]    3 	exx
      0003FA ED A3            [16]    4 	outi	; write data
      0003FC D9               [ 4]    5 	exx
      0003FD ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0003FF ED 51            [12]    7 	out	(c),d
      000401 14               [ 4]    8 	inc	d ; new line
      000402 AF               [ 4]    9 	xor	a,a ; write border
      000403 D3 98            [11]   10 	out	(#0x98),a
      000405 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000407 ED 51            [12]    2 	out	(c),d
      000409 D9               [ 4]    3 	exx
      00040A ED A3            [16]    4 	outi	; write data
      00040C D9               [ 4]    5 	exx
      00040D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00040F ED 51            [12]    7 	out	(c),d
      000411 14               [ 4]    8 	inc	d ; new line
      000412 AF               [ 4]    9 	xor	a,a ; write border
      000413 D3 98            [11]   10 	out	(#0x98),a
      000415 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000417 ED 51            [12]    2 	out	(c),d
      000419 D9               [ 4]    3 	exx
      00041A ED A3            [16]    4 	outi	; write data
      00041C D9               [ 4]    5 	exx
      00041D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00041F ED 51            [12]    7 	out	(c),d
      000421 14               [ 4]    8 	inc	d ; new line
      000422 AF               [ 4]    9 	xor	a,a ; write border
      000423 D3 98            [11]   10 	out	(#0x98),a
      000425 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000427 ED 51            [12]    2 	out	(c),d
      000429 D9               [ 4]    3 	exx
      00042A ED A3            [16]    4 	outi	; write data
      00042C D9               [ 4]    5 	exx
      00042D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00042F ED 51            [12]    7 	out	(c),d
      000431 14               [ 4]    8 	inc	d ; new line
      000432 AF               [ 4]    9 	xor	a,a ; write border
      000433 D3 98            [11]   10 	out	(#0x98),a
      000435 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000437 ED 51            [12]    2 	out	(c),d
      000439 D9               [ 4]    3 	exx
      00043A ED A3            [16]    4 	outi	; write data
      00043C D9               [ 4]    5 	exx
      00043D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00043F ED 51            [12]    7 	out	(c),d
      000441 14               [ 4]    8 	inc	d ; new line
      000442 AF               [ 4]    9 	xor	a,a ; write border
      000443 D3 98            [11]   10 	out	(#0x98),a
      000445 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000447 ED 51            [12]    2 	out	(c),d
      000449 D9               [ 4]    3 	exx
      00044A ED A3            [16]    4 	outi	; write data
      00044C D9               [ 4]    5 	exx
      00044D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00044F ED 51            [12]    7 	out	(c),d
      000451 14               [ 4]    8 	inc	d ; new line
      000452 AF               [ 4]    9 	xor	a,a ; write border
      000453 D3 98            [11]   10 	out	(#0x98),a
      000455 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000457 ED 51            [12]    2 	out	(c),d
      000459 D9               [ 4]    3 	exx
      00045A ED A3            [16]    4 	outi	; write data
      00045C D9               [ 4]    5 	exx
      00045D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00045F ED 51            [12]    7 	out	(c),d
      000461 14               [ 4]    8 	inc	d ; new line
      000462 AF               [ 4]    9 	xor	a,a ; write border
      000463 D3 98            [11]   10 	out	(#0x98),a
      000465 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000467 ED 51            [12]    2 	out	(c),d
      000469 D9               [ 4]    3 	exx
      00046A ED A3            [16]    4 	outi	; write data
      00046C D9               [ 4]    5 	exx
      00046D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00046F ED 51            [12]    7 	out	(c),d
      000471 14               [ 4]    8 	inc	d ; new line
      000472 AF               [ 4]    9 	xor	a,a ; write border
      000473 D3 98            [11]   10 	out	(#0x98),a
      000475 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000477 ED 51            [12]    2 	out	(c),d
      000479 D9               [ 4]    3 	exx
      00047A ED A3            [16]    4 	outi	; write data
      00047C D9               [ 4]    5 	exx
      00047D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00047F ED 51            [12]    7 	out	(c),d
      000481 14               [ 4]    8 	inc	d ; new line
      000482 AF               [ 4]    9 	xor	a,a ; write border
      000483 D3 98            [11]   10 	out	(#0x98),a
      000485 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000487 ED 51            [12]    2 	out	(c),d
      000489 D9               [ 4]    3 	exx
      00048A ED A3            [16]    4 	outi	; write data
      00048C D9               [ 4]    5 	exx
      00048D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00048F ED 51            [12]    7 	out	(c),d
      000491 14               [ 4]    8 	inc	d ; new line
      000492 AF               [ 4]    9 	xor	a,a ; write border
      000493 D3 98            [11]   10 	out	(#0x98),a
      000495 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000497 ED 51            [12]    2 	out	(c),d
      000499 D9               [ 4]    3 	exx
      00049A ED A3            [16]    4 	outi	; write data
      00049C D9               [ 4]    5 	exx
      00049D ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      00049F ED 51            [12]    7 	out	(c),d
      0004A1 14               [ 4]    8 	inc	d ; new line
      0004A2 AF               [ 4]    9 	xor	a,a ; write border
      0004A3 D3 98            [11]   10 	out	(#0x98),a
      0004A5 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004A7 ED 51            [12]    2 	out	(c),d
      0004A9 D9               [ 4]    3 	exx
      0004AA ED A3            [16]    4 	outi	; write data
      0004AC D9               [ 4]    5 	exx
      0004AD ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004AF ED 51            [12]    7 	out	(c),d
      0004B1 14               [ 4]    8 	inc	d ; new line
      0004B2 AF               [ 4]    9 	xor	a,a ; write border
      0004B3 D3 98            [11]   10 	out	(#0x98),a
      0004B5 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004B7 ED 51            [12]    2 	out	(c),d
      0004B9 D9               [ 4]    3 	exx
      0004BA ED A3            [16]    4 	outi	; write data
      0004BC D9               [ 4]    5 	exx
      0004BD ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004BF ED 51            [12]    7 	out	(c),d
      0004C1 14               [ 4]    8 	inc	d ; new line
      0004C2 AF               [ 4]    9 	xor	a,a ; write border
      0004C3 D3 98            [11]   10 	out	(#0x98),a
      0004C5 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004C7 ED 51            [12]    2 	out	(c),d
      0004C9 D9               [ 4]    3 	exx
      0004CA ED A3            [16]    4 	outi	; write data
      0004CC D9               [ 4]    5 	exx
      0004CD ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004CF ED 51            [12]    7 	out	(c),d
      0004D1 14               [ 4]    8 	inc	d ; new line
      0004D2 AF               [ 4]    9 	xor	a,a ; write border
      0004D3 D3 98            [11]   10 	out	(#0x98),a
      0004D5 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004D7 ED 51            [12]    2 	out	(c),d
      0004D9 D9               [ 4]    3 	exx
      0004DA ED A3            [16]    4 	outi	; write data
      0004DC D9               [ 4]    5 	exx
      0004DD ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004DF ED 51            [12]    7 	out	(c),d
      0004E1 14               [ 4]    8 	inc	d ; new line
      0004E2 AF               [ 4]    9 	xor	a,a ; write border
      0004E3 D3 98            [11]   10 	out	(#0x98),a
      0004E5 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004E7 ED 51            [12]    2 	out	(c),d
      0004E9 D9               [ 4]    3 	exx
      0004EA ED A3            [16]    4 	outi	; write data
      0004EC D9               [ 4]    5 	exx
      0004ED ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004EF ED 51            [12]    7 	out	(c),d
      0004F1 14               [ 4]    8 	inc	d ; new line
      0004F2 AF               [ 4]    9 	xor	a,a ; write border
      0004F3 D3 98            [11]   10 	out	(#0x98),a
                                    788 ;src\mytestrom.c:270: }
      0004F5 C9               [10]  789 	ret
                                    790 ;src\mytestrom.c:272: void BorderLinesL(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    791 ;	---------------------------------
                                    792 ; Function BorderLinesL
                                    793 ; ---------------------------------
      0004F6                        794 _BorderLinesL::
                                    795 ;src\mytestrom.c:376: __endasm;
      0004F6 C1               [10]  796 	pop	bc ; get ret address
      0004F7 D1               [10]  797 	pop	de ; de = MapX
      0004F8 C5               [11]  798 	push	bc ; save ret address
      0004F9 08               [ 4]  799 	ex	af,af'			; a' = ScrnX
      0004FA 7D               [ 4]  800 	ld	a,l ; l = page
      0004FB 87               [ 4]  801 	add	a,a
      0004FC 87               [ 4]  802 	add	a,a
      0004FD 32 ED FF         [13]  803 	ld	(_RG14SA),a
      000500 4B               [ 4]  804 	ld	c,e ; C = low(mapx)
      000501 CB 2A            [ 8]  805 	sra	d ; DE/16
      000503 CB 1B            [ 8]  806 	rr	e
      000505 CB 2A            [ 8]  807 	sra	d
      000507 CB 1B            [ 8]  808 	rr	e
      000509 CB 2A            [ 8]  809 	sra	d
      00050B CB 1B            [ 8]  810 	rr	e
      00050D CB 2A            [ 8]  811 	sra	d
      00050F CB 1B            [ 8]  812 	rr	e
      000511 6B               [ 4]  813 	ld	l,e
      000512 62               [ 4]  814 	ld	h,d
      000513 29               [11]  815 	add	hl,hl
      000514 29               [11]  816 	add	hl,hl
      000515 19               [11]  817 	add	hl,de
      000516 29               [11]  818 	add	hl,hl
      000517 19               [11]  819 	add	hl,de ; DE/16 * 11
      000518 11r2Dr00         [10]  820 	ld	de,#_LevelMap
      00051B 19               [11]  821 	add	hl,de
      00051C 22r2Dr0B         [16]  822 	ld	(_p), hl
      00051F 08               [ 4]  823 	ex	af,af'				; a' = ScrnX
      000520 5F               [ 4]  824 	ld	e,a ; DE vramm address for new border data
      000521 C6 F0            [ 7]  825 	add	a,#240 ; L = E +/- 240U according to the scroll direction
      000523 6F               [ 4]  826 	ld	l,a ; DL hold vramm address for blank border
      000524 79               [ 4]  827 	ld	a,c ; C = low(MapX)
      000525 E6 0F            [ 7]  828 	and	a,#15
      000527 87               [ 4]  829 	add	a,a
      000528 87               [ 4]  830 	add	a,a
      000529 87               [ 4]  831 	add	a,a
      00052A 87               [ 4]  832 	add	a,a
      00052B D9               [ 4]  833 	exx
      00052C 57               [ 4]  834 	ld	d,a ; common offeset of the address in the tile
      00052D 0E 98            [ 7]  835 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      00052F D9               [ 4]  836 	exx
      000530 F3               [ 4]  837 	di
      000531 3A ED FF         [13]  838 	ld	a,(_RG14SA) ; set address in vdp(14)
      000534 D3 99            [11]  839 	out	(#0x99), a
      000536 3C               [ 4]  840 	inc	a
      000537 32 ED FF         [13]  841 	ld	(_RG14SA),a ; save next block
      00053A 3E 8E            [ 7]  842 	ld	a,#0x8E
      00053C D3 99            [11]  843 	out	(#0x99), a
      00053E 0E 99            [ 7]  844 	ld	c,#0x99
      000540 16 40            [ 7]  845 	ld	d,#0x40
      000542 CDrD6r03         [17]  846 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000545 CDrD6r03         [17]  847 	call	_PlotOneColumnTileAndMask
      000548 CDrD6r03         [17]  848 	call	_PlotOneColumnTileAndMask
      00054B CDrD6r03         [17]  849 	call	_PlotOneColumnTileAndMask
      00054E 3A ED FF         [13]  850 	ld	a,(_RG14SA) ; set address in vdp(14)
      000551 D3 99            [11]  851 	out	(#0x99), a
      000553 3C               [ 4]  852 	inc	a
      000554 32 ED FF         [13]  853 	ld	(_RG14SA),a ; save next block
      000557 3E 8E            [ 7]  854 	ld	a,#0x8E
      000559 D3 99            [11]  855 	out	(#0x99), a
      00055B 16 40            [ 7]  856 	ld	d,#0x40
      00055D CDrD6r03         [17]  857 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000560 CDrD6r03         [17]  858 	call	_PlotOneColumnTileAndMask
      000563 CDrD6r03         [17]  859 	call	_PlotOneColumnTileAndMask
      000566 CDrD6r03         [17]  860 	call	_PlotOneColumnTileAndMask
      000569 3A ED FF         [13]  861 	ld	a,(_RG14SA) ; set address in vdp(14)
      00056C D3 99            [11]  862 	out	(#0x99), a
      00056E 3E 8E            [ 7]  863 	ld	a,#0x8E
      000570 D3 99            [11]  864 	out	(#0x99), a
      000572 16 40            [ 7]  865 	ld	d,#0x40
      000574 CDrD6r03         [17]  866 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      000577 CDrD6r03         [17]  867 	call	_PlotOneColumnTileAndMask
      00057A CDrD6r03         [17]  868 	call	_PlotOneColumnTileAndMask
      00057D FB               [ 4]  869 	ei
      00057E C9               [10]  870 	ret
                                    871 ;src\mytestrom.c:377: }
                                    872 ;src\mytestrom.c:379: void BorderLinesR(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    873 ;	---------------------------------
                                    874 ; Function BorderLinesR
                                    875 ; ---------------------------------
      00057F                        876 _BorderLinesR::
                                    877 ;src\mytestrom.c:483: __endasm;
      00057F C1               [10]  878 	pop	bc ; get ret address
      000580 D1               [10]  879 	pop	de ; DE = MapX+240U
      000581 C5               [11]  880 	push	bc ; save ret address
      000582 08               [ 4]  881 	ex	af,af'			; a' = ScrnX
      000583 7D               [ 4]  882 	ld	a,l ; l = page
      000584 87               [ 4]  883 	add	a,a
      000585 87               [ 4]  884 	add	a,a
      000586 32 ED FF         [13]  885 	ld	(_RG14SA),a
      000589 4B               [ 4]  886 	ld	c,e ; C = low(mapx)
      00058A CB 2A            [ 8]  887 	sra	d ; DE/16
      00058C CB 1B            [ 8]  888 	rr	e
      00058E CB 2A            [ 8]  889 	sra	d
      000590 CB 1B            [ 8]  890 	rr	e
      000592 CB 2A            [ 8]  891 	sra	d
      000594 CB 1B            [ 8]  892 	rr	e
      000596 CB 2A            [ 8]  893 	sra	d
      000598 CB 1B            [ 8]  894 	rr	e
      00059A 6B               [ 4]  895 	ld	l,e
      00059B 62               [ 4]  896 	ld	h,d
      00059C 29               [11]  897 	add	hl,hl
      00059D 29               [11]  898 	add	hl,hl
      00059E 19               [11]  899 	add	hl,de
      00059F 29               [11]  900 	add	hl,hl
      0005A0 19               [11]  901 	add	hl,de ; DE/16 * 11
      0005A1 11r2Dr00         [10]  902 	ld	de,#_LevelMap
      0005A4 19               [11]  903 	add	hl,de
      0005A5 22r2Dr0B         [16]  904 	ld	(_p), hl
      0005A8 08               [ 4]  905 	ex	af,af'				; a' = ScrnX
      0005A9 5F               [ 4]  906 	ld	e,a ; DE vramm address for new border data
      0005AA D6 F0            [ 7]  907 	sub	a,#240 ; L = E +/- 240U according to the scroll direction
      0005AC 6F               [ 4]  908 	ld	l,a ; DL hold vramm address for blank border
      0005AD 79               [ 4]  909 	ld	a,c ; C = low(MapX)
      0005AE E6 0F            [ 7]  910 	and	a,#15
      0005B0 87               [ 4]  911 	add	a,a
      0005B1 87               [ 4]  912 	add	a,a
      0005B2 87               [ 4]  913 	add	a,a
      0005B3 87               [ 4]  914 	add	a,a
      0005B4 D9               [ 4]  915 	exx
      0005B5 57               [ 4]  916 	ld	d,a ; common offeset of the address in the tile
      0005B6 0E 98            [ 7]  917 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      0005B8 D9               [ 4]  918 	exx
      0005B9 F3               [ 4]  919 	di
      0005BA 3A ED FF         [13]  920 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005BD D3 99            [11]  921 	out	(#0x99), a
      0005BF 3C               [ 4]  922 	inc	a
      0005C0 32 ED FF         [13]  923 	ld	(_RG14SA),a ; save next block
      0005C3 3E 8E            [ 7]  924 	ld	a,#0x8E
      0005C5 D3 99            [11]  925 	out	(#0x99), a
      0005C7 0E 99            [ 7]  926 	ld	c,#0x99
      0005C9 16 40            [ 7]  927 	ld	d,#0x40
      0005CB CDrD6r03         [17]  928 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005CE CDrD6r03         [17]  929 	call	_PlotOneColumnTileAndMask
      0005D1 CDrD6r03         [17]  930 	call	_PlotOneColumnTileAndMask
      0005D4 CDrD6r03         [17]  931 	call	_PlotOneColumnTileAndMask
      0005D7 3A ED FF         [13]  932 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005DA D3 99            [11]  933 	out	(#0x99), a
      0005DC 3C               [ 4]  934 	inc	a
      0005DD 32 ED FF         [13]  935 	ld	(_RG14SA),a ; save next block
      0005E0 3E 8E            [ 7]  936 	ld	a,#0x8E
      0005E2 D3 99            [11]  937 	out	(#0x99), a
      0005E4 16 40            [ 7]  938 	ld	d,#0x40
      0005E6 CDrD6r03         [17]  939 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005E9 CDrD6r03         [17]  940 	call	_PlotOneColumnTileAndMask
      0005EC CDrD6r03         [17]  941 	call	_PlotOneColumnTileAndMask
      0005EF CDrD6r03         [17]  942 	call	_PlotOneColumnTileAndMask
      0005F2 3A ED FF         [13]  943 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005F5 D3 99            [11]  944 	out	(#0x99), a
      0005F7 3E 8E            [ 7]  945 	ld	a,#0x8E
      0005F9 D3 99            [11]  946 	out	(#0x99), a
      0005FB 16 40            [ 7]  947 	ld	d,#0x40
      0005FD CDrD6r03         [17]  948 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      000600 CDrD6r03         [17]  949 	call	_PlotOneColumnTileAndMask
      000603 CDrD6r03         [17]  950 	call	_PlotOneColumnTileAndMask
      000606 FB               [ 4]  951 	ei
      000607 C9               [10]  952 	ret
                                    953 ;src\mytestrom.c:484: }
                                    954 ;src\mytestrom.c:486: void NewLine(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    955 ;	---------------------------------
                                    956 ; Function NewLine
                                    957 ; ---------------------------------
      000608                        958 _NewLine::
                                    959 ;src\mytestrom.c:595: __endasm;
      000608 C1               [10]  960 	pop	bc ; get ret address
      000609 D1               [10]  961 	pop	de ; de = MapX
      00060A C5               [11]  962 	push	bc ; save ret address
      00060B 08               [ 4]  963 	ex	af,af'			; a' = ScrnX
      00060C 7D               [ 4]  964 	ld	a,l ; l = page
      00060D 87               [ 4]  965 	add	a,a
      00060E 87               [ 4]  966 	add	a,a
      00060F 32 ED FF         [13]  967 	ld	(_RG14SA),a
      000612 4B               [ 4]  968 	ld	c,e ; C = low(mapx)
      000613 CB 2A            [ 8]  969 	sra	d ; DE/16
      000615 CB 1B            [ 8]  970 	rr	e
      000617 CB 2A            [ 8]  971 	sra	d
      000619 CB 1B            [ 8]  972 	rr	e
      00061B CB 2A            [ 8]  973 	sra	d
      00061D CB 1B            [ 8]  974 	rr	e
      00061F CB 2A            [ 8]  975 	sra	d
      000621 CB 1B            [ 8]  976 	rr	e
      000623 6B               [ 4]  977 	ld	l,e
      000624 62               [ 4]  978 	ld	h,d
      000625 29               [11]  979 	add	hl,hl
      000626 29               [11]  980 	add	hl,hl
      000627 19               [11]  981 	add	hl,de
      000628 29               [11]  982 	add	hl,hl
      000629 19               [11]  983 	add	hl,de ; DE/16 * 11
      00062A 11r2Dr00         [10]  984 	ld	de,#_LevelMap
      00062D 19               [11]  985 	add	hl,de
      00062E 22r2Dr0B         [16]  986 	ld	(_p), hl
      000631 08               [ 4]  987 	ex	af,af'			; a' = ScrnX
      000632 5F               [ 4]  988 	ld	e,a ; DE vramm address for new border data
      000633 79               [ 4]  989 	ld	a,c ; C = low(MapX)
      000634 E6 0F            [ 7]  990 	and	a,#15
      000636 87               [ 4]  991 	add	a,a
      000637 87               [ 4]  992 	add	a,a
      000638 87               [ 4]  993 	add	a,a
      000639 87               [ 4]  994 	add	a,a
      00063A D9               [ 4]  995 	exx
      00063B 57               [ 4]  996 	ld	d,a ; common offeset of the address in the tile
      00063C 0E 98            [ 7]  997 	ld	c,#0x98 ; used by _PlotOneColumnTile
      00063E D9               [ 4]  998 	exx
      00063F F3               [ 4]  999 	di
      000640 3A ED FF         [13] 1000 	ld	a,(_RG14SA) ; set address in vdp(14)
      000643 D3 99            [11] 1001 	out	(#0x99), a
      000645 3C               [ 4] 1002 	inc	a
      000646 32 ED FF         [13] 1003 	ld	(_RG14SA),a ; save next block
      000649 3E 8E            [ 7] 1004 	ld	a,#0x8E
      00064B D3 99            [11] 1005 	out	(#0x99), a
      00064D 0E 99            [ 7] 1006 	ld	c,#0x99
      00064F 16 40            [ 7] 1007 	ld	d,#0x40
      000651 CDr26r03         [17] 1008 	call	_PlotOneColumnTile ; 4 tiles
      000654 CDr26r03         [17] 1009 	call	_PlotOneColumnTile
      000657 CDr26r03         [17] 1010 	call	_PlotOneColumnTile
      00065A CDr26r03         [17] 1011 	call	_PlotOneColumnTile
      00065D 3A ED FF         [13] 1012 	ld	a,(_RG14SA) ; set address in vdp(14)
      000660 D3 99            [11] 1013 	out	(#0x99), a
      000662 3C               [ 4] 1014 	inc	a
      000663 32 ED FF         [13] 1015 	ld	(_RG14SA),a ; save next block
      000666 3E 8E            [ 7] 1016 	ld	a,#0x8E
      000668 D3 99            [11] 1017 	out	(#0x99), a
      00066A 16 40            [ 7] 1018 	ld	d,#0x40
      00066C CDr26r03         [17] 1019 	call	_PlotOneColumnTile ; 4 tiles
      00066F CDr26r03         [17] 1020 	call	_PlotOneColumnTile
      000672 CDr26r03         [17] 1021 	call	_PlotOneColumnTile
      000675 CDr26r03         [17] 1022 	call	_PlotOneColumnTile
      000678 3A ED FF         [13] 1023 	ld	a,(_RG14SA) ; set address in vdp(14)
      00067B D3 99            [11] 1024 	out	(#0x99), a
      00067D 3E 8E            [ 7] 1025 	ld	a,#0x8E
      00067F D3 99            [11] 1026 	out	(#0x99), a
      000681 16 40            [ 7] 1027 	ld	d,#0x40
      000683 CDr26r03         [17] 1028 	call	_PlotOneColumnTile ; 3 tiles
      000686 CDr26r03         [17] 1029 	call	_PlotOneColumnTile
      000689 CDr26r03         [17] 1030 	call	_PlotOneColumnTile
      00068C FB               [ 4] 1031 	ei
      00068D C9               [10] 1032 	ret
                                   1033 ;src\mytestrom.c:596: }
                                   1034 ;src\mytestrom.c:598: void PatchPlotOneTile(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                   1035 ;	---------------------------------
                                   1036 ; Function PatchPlotOneTile
                                   1037 ; ---------------------------------
      00068E                       1038 _PatchPlotOneTile::
                                   1039 ;src\mytestrom.c:681: __endasm;
      00068E C1               [10] 1040 	pop	bc ; get ret address
      00068F D1               [10] 1041 	pop	de ; DE = MapX
      000690 C5               [11] 1042 	push	bc ; save ret address
      000691 08               [ 4] 1043 	ex	af,af'			; a' = ScrnX
      000692 7D               [ 4] 1044 	ld	a,l ; l = page
      000693 87               [ 4] 1045 	add	a,a
      000694 87               [ 4] 1046 	add	a,a
      000695 32 ED FF         [13] 1047 	ld	(_RG14SA),a
      000698 4B               [ 4] 1048 	ld	c,e ; C = low(mapx)
      000699 CB 2A            [ 8] 1049 	sra	d ; DE/16
      00069B CB 1B            [ 8] 1050 	rr	e
      00069D CB 2A            [ 8] 1051 	sra	d
      00069F CB 1B            [ 8] 1052 	rr	e
      0006A1 CB 2A            [ 8] 1053 	sra	d
      0006A3 CB 1B            [ 8] 1054 	rr	e
      0006A5 CB 2A            [ 8] 1055 	sra	d
      0006A7 CB 1B            [ 8] 1056 	rr	e
      0006A9 6B               [ 4] 1057 	ld	l,e
      0006AA 62               [ 4] 1058 	ld	h,d
      0006AB 29               [11] 1059 	add	hl,hl
      0006AC 29               [11] 1060 	add	hl,hl
      0006AD 19               [11] 1061 	add	hl,de
      0006AE 29               [11] 1062 	add	hl,hl
      0006AF 19               [11] 1063 	add	hl,de ; DE/16 * 11
      0006B0 11r2Dr00         [10] 1064 	ld	de,#_LevelMap
      0006B3 19               [11] 1065 	add	hl,de
      0006B4 22r2Dr0B         [16] 1066 	ld	(_p), hl
      0006B7 08               [ 4] 1067 	ex	af,af'				; a' = ScrnX
      0006B8 5F               [ 4] 1068 	ld	e,a ; DE vramm address for new border data
      0006B9 79               [ 4] 1069 	ld	a,c ; C = low(MapX)
      0006BA E6 0F            [ 7] 1070 	and	a,#15
      0006BC 87               [ 4] 1071 	add	a,a
      0006BD 87               [ 4] 1072 	add	a,a
      0006BE 87               [ 4] 1073 	add	a,a
      0006BF 87               [ 4] 1074 	add	a,a
      0006C0 D9               [ 4] 1075 	exx
      0006C1 57               [ 4] 1076 	ld	d,a ; common offeset of the address in the tile
      0006C2 0E 98            [ 7] 1077 	ld	c,#0x98 ; used by _PlotOneColumnTile
      0006C4 D9               [ 4] 1078 	exx
      0006C5 F3               [ 4] 1079 	di
      0006C6 3A ED FF         [13] 1080 	ld	a,(_RG14SA) ; set address in vdp(14)
      0006C9 D3 99            [11] 1081 	out	(#0x99), a
      0006CB 3E 8E            [ 7] 1082 	ld	a,#0x8E
      0006CD D3 99            [11] 1083 	out	(#0x99), a
      0006CF 16 40            [ 7] 1084 	ld	d,#0x40
      0006D1 0E 99            [ 7] 1085 	ld	c,#0x99
      0006D3 CDr26r03         [17] 1086 	call	_PlotOneColumnTile ; 1 tile
      0006D6 FB               [ 4] 1087 	ei
      0006D7 C9               [10] 1088 	ret
                                   1089 ;src\mytestrom.c:682: }
                                   1090 ;src\mytestrom.c:684: void 	myVDPwrite(char data, char vdpreg) __sdcccall(1) __naked
                                   1091 ;	---------------------------------
                                   1092 ; Function myVDPwrite
                                   1093 ; ---------------------------------
      0006D8                       1094 _myVDPwrite::
                                   1095 ;src\mytestrom.c:696: __endasm;
      0006D8 F3               [ 4] 1096 	di
      0006D9 D3 99            [11] 1097 	out	(#0x99),a
      0006DB 3E 80            [ 7] 1098 	ld	a,#128
      0006DD B5               [ 4] 1099 	or	a,l
      0006DE D3 99            [11] 1100 	out	(#0x99),a ;R#A := L
      0006E0 FB               [ 4] 1101 	ei
      0006E1 C9               [10] 1102 	ret
                                   1103 ;src\mytestrom.c:698: }	
                                   1104 ;src\mytestrom.c:721: void  	myfVDP(void *Address)  __sdcccall(1)  __naked
                                   1105 ;	---------------------------------
                                   1106 ; Function myfVDP
                                   1107 ; ---------------------------------
      0006E2                       1108 _myfVDP::
                                   1109 ;src\mytestrom.c:753: __endasm;
      0006E2 F3               [ 4] 1110 	di
      0006E3 3E 20            [ 7] 1111 	ld	a,#32 ; Start with Reg 32
      0006E5 D3 99            [11] 1112 	out	(#0x99),a
      0006E7 3E 91            [ 7] 1113 	ld	a,#128+#17
      0006E9 D3 99            [11] 1114 	out	(#0x99),a ;R#17 := 32
      0006EB 0E 9B            [ 7] 1115 	ld	c,#0x9b ; c=#0x9b
      0006ED                       1116 	fvdpWait:
      0006ED 3E 02            [ 7] 1117 	ld	a,#2
      0006EF D3 99            [11] 1118 	out	(#0x99),a
      0006F1 3E 8F            [ 7] 1119 	ld	a,#128+#15
      0006F3 D3 99            [11] 1120 	out	(#0x99),a
      0006F5 DB 99            [11] 1121 	in	a,(#0x99)
      0006F7 0F               [ 4] 1122 	rrca
      0006F8 DArEDr06         [10] 1123 	jp	c, fvdpWait ; wait CE
                                   1124 	.rept	#15
                                   1125 	OUTI
                                   1126 	.endm
      0006FB ED A3            [16]    1 	OUTI
      0006FD ED A3            [16]    1 	OUTI
      0006FF ED A3            [16]    1 	OUTI
      000701 ED A3            [16]    1 	OUTI
      000703 ED A3            [16]    1 	OUTI
      000705 ED A3            [16]    1 	OUTI
      000707 ED A3            [16]    1 	OUTI
      000709 ED A3            [16]    1 	OUTI
      00070B ED A3            [16]    1 	OUTI
      00070D ED A3            [16]    1 	OUTI
      00070F ED A3            [16]    1 	OUTI
      000711 ED A3            [16]    1 	OUTI
      000713 ED A3            [16]    1 	OUTI
      000715 ED A3            [16]    1 	OUTI
      000717 ED A3            [16]    1 	OUTI
      000719 AF               [ 4] 1127 	xor	a,a ; set Status Register #0 for reading
      00071A D3 99            [11] 1128 	out	(#0x99),a
      00071C 3E 8F            [ 7] 1129 	ld	a,#0x8f
      00071E D3 99            [11] 1130 	out	(#0x99),a
      000720 FB               [ 4] 1131 	ei
      000721 C9               [10] 1132 	ret
                                   1133 ;src\mytestrom.c:754: }
                                   1134 ;src\mytestrom.c:806: void mySetAdjust(signed char x, signed char y) __sdcccall(1)
                                   1135 ;	---------------------------------
                                   1136 ; Function mySetAdjust
                                   1137 ; ---------------------------------
      000722                       1138 _mySetAdjust::
                                   1139 ;src\mytestrom.c:808: unsigned char value = ((x-8) & 15) | (((y-8) & 15)<<4);
      000722 C6 F8            [ 7] 1140 	add	a, #0xf8
      000724 E6 0F            [ 7] 1141 	and	a, #0x0f
      000726 4F               [ 4] 1142 	ld	c, a
      000727 7D               [ 4] 1143 	ld	a, l
      000728 C6 F8            [ 7] 1144 	add	a, #0xf8
      00072A E6 0F            [ 7] 1145 	and	a, #0x0f
      00072C 87               [ 4] 1146 	add	a, a
      00072D 87               [ 4] 1147 	add	a, a
      00072E 87               [ 4] 1148 	add	a, a
      00072F 87               [ 4] 1149 	add	a, a
      000730 B1               [ 4] 1150 	or	a, c
      000731 4F               [ 4] 1151 	ld	c, a
                                   1152 ;src\mytestrom.c:809: RG18SA = value;			// Reg18 Save
      000732 FD 21 F1 FF      [14] 1153 	ld	iy, #_RG18SA
      000736 FD 71 00         [19] 1154 	ld	0 (iy), c
                                   1155 ;src\mytestrom.c:810: myVDPwrite(value,18);
      000739 2E 12            [ 7] 1156 	ld	l, #0x12
                                   1157 ;	spillPairReg hl
                                   1158 ;	spillPairReg hl
      00073B 79               [ 4] 1159 	ld	a, c
                                   1160 ;src\mytestrom.c:811: }
      00073C C3rD8r06         [10] 1161 	jp	_myVDPwrite
                                   1162 ;src\mytestrom.c:818: void myFT_wait(unsigned char cicles) __sdcccall(1) __naked {
                                   1163 ;	---------------------------------
                                   1164 ; Function myFT_wait
                                   1165 ; ---------------------------------
      00073F                       1166 _myFT_wait::
                                   1167 ;src\mytestrom.c:841: __endasm;
      00073F B7               [ 4] 1168 	or	a, a
      000740                       1169 	00004$:
      000740 C8               [11] 1170 	ret	Z
      000741 76               [ 4] 1171 	halt
      000742 3D               [ 4] 1172 	dec	a
      000743 C3r40r07         [10] 1173 	jp	00004$
                                   1174 ;src\mytestrom.c:842: }
                                   1175 ;src\mytestrom.c:844: void WaitLineInt(void) __sdcccall(1) __naked {
                                   1176 ;	---------------------------------
                                   1177 ; Function WaitLineInt
                                   1178 ; ---------------------------------
      000746                       1179 _WaitLineInt::
                                   1180 ;src\mytestrom.c:874: __endasm;
      000746 F3               [ 4] 1181 	di
      000747 3E 01            [ 7] 1182 	ld	a,#1 ; set Status Register #1 for reading
      000749 D3 99            [11] 1183 	out	(#0x99),a
      00074B 3E 8F            [ 7] 1184 	ld	a,#0x8f
      00074D D3 99            [11] 1185 	out	(#0x99),a
      00074F                       1186 	WaitLI:
      00074F DB 99            [11] 1187 	in	a,(#0x99)
      000751 0F               [ 4] 1188 	rrca
      000752 30 FB            [12] 1189 	jr	nc,WaitLI
      000754 AF               [ 4] 1190 	xor	a,a ; set Status Register #0 for reading
      000755 D3 99            [11] 1191 	out	(#0x99),a
      000757 3E 8F            [ 7] 1192 	ld	a,#0x8f
      000759 D3 99            [11] 1193 	out	(#0x99),a
      00075B FB               [ 4] 1194 	ei
      00075C C9               [10] 1195 	ret
                                   1196 ;src\mytestrom.c:875: }
                                   1197 ;src\mytestrom.c:907: void FT_errorHandler(char n, char *name) __sdcccall(1) 
                                   1198 ;	---------------------------------
                                   1199 ; Function FT_errorHandler
                                   1200 ; ---------------------------------
      00075D                       1201 _FT_errorHandler::
      00075D 4F               [ 4] 1202 	ld	c, a
                                   1203 ;src\mytestrom.c:914: chgmod(0);
      00075E C5               [11] 1204 	push	bc
      00075F D5               [11] 1205 	push	de
      000760 AF               [ 4] 1206 	xor	a, a
      000761 CDr68r0C         [17] 1207 	call	_chgmod
      000764 D1               [10] 1208 	pop	de
      000765 C1               [10] 1209 	pop	bc
                                   1210 ;src\mytestrom.c:916: switch (n)
      000766 79               [ 4] 1211 	ld	a, c
      000767 3D               [ 4] 1212 	dec	a
      000768 28 12            [12] 1213 	jr	Z, 00101$
      00076A 79               [ 4] 1214 	ld	a, c
      00076B D6 02            [ 7] 1215 	sub	a, #0x02
      00076D 28 1C            [12] 1216 	jr	Z, 00102$
      00076F 79               [ 4] 1217 	ld	a, c
      000770 D6 03            [ 7] 1218 	sub	a, #0x03
      000772 28 26            [12] 1219 	jr	Z, 00103$
      000774 79               [ 4] 1220 	ld	a, c
      000775 D6 04            [ 7] 1221 	sub	a, #0x04
      000777 28 2A            [12] 1222 	jr	Z, 00104$
      000779 C3rAFr07         [10] 1223 	jp	00105$
                                   1224 ;src\mytestrom.c:918: case 1:
      00077C                       1225 00101$:
                                   1226 ;src\mytestrom.c:919: Print("\n\rFAILED: fcb_open(): ");
      00077C D5               [11] 1227 	push	de
      00077D 21rB1r07         [10] 1228 	ld	hl, #___str_1
      000780 CDr0Dr0D         [17] 1229 	call	_Print
      000783 D1               [10] 1230 	pop	de
                                   1231 ;src\mytestrom.c:920: Print(name);
      000784 EB               [ 4] 1232 	ex	de, hl
      000785 CDr0Dr0D         [17] 1233 	call	_Print
                                   1234 ;src\mytestrom.c:921: break;
      000788 C3rAFr07         [10] 1235 	jp	00105$
                                   1236 ;src\mytestrom.c:923: case 2:
      00078B                       1237 00102$:
                                   1238 ;src\mytestrom.c:924: Print("\n\rFAILED: fcb_close():");
      00078B D5               [11] 1239 	push	de
      00078C 21rC8r07         [10] 1240 	ld	hl, #___str_2
      00078F CDr0Dr0D         [17] 1241 	call	_Print
      000792 D1               [10] 1242 	pop	de
                                   1243 ;src\mytestrom.c:925: Print(name);
      000793 EB               [ 4] 1244 	ex	de, hl
      000794 CDr0Dr0D         [17] 1245 	call	_Print
                                   1246 ;src\mytestrom.c:926: break;  
      000797 C3rAFr07         [10] 1247 	jp	00105$
                                   1248 ;src\mytestrom.c:928: case 3:
      00079A                       1249 00103$:
                                   1250 ;src\mytestrom.c:929: Print("\n\rStop Kidding, run me on MSX2 !");
      00079A 21rDFr07         [10] 1251 	ld	hl, #___str_3
      00079D CDr0Dr0D         [17] 1252 	call	_Print
                                   1253 ;src\mytestrom.c:930: break;
      0007A0 C3rAFr07         [10] 1254 	jp	00105$
                                   1255 ;src\mytestrom.c:932: case 4:
      0007A3                       1256 00104$:
                                   1257 ;src\mytestrom.c:933: Print("\n\rUnespected end of file:");
      0007A3 D5               [11] 1258 	push	de
      0007A4 21r00r08         [10] 1259 	ld	hl, #___str_4
      0007A7 CDr0Dr0D         [17] 1260 	call	_Print
      0007AA D1               [10] 1261 	pop	de
                                   1262 ;src\mytestrom.c:934: Print(name);		  
      0007AB EB               [ 4] 1263 	ex	de, hl
      0007AC CDr0Dr0D         [17] 1264 	call	_Print
                                   1265 ;src\mytestrom.c:936: }
      0007AF                       1266 00105$:
                                   1267 ;src\mytestrom.c:937: Reboot(0);
      0007AF C7               [11] 1268 	rst	#0
                                   1269 ;src\mytestrom.c:938: }
      0007B0 C9               [10] 1270 	ret
      0007B1                       1271 ___str_1:
      0007B1 0A                    1272 	.db 0x0a
      0007B2 0D                    1273 	.db 0x0d
      0007B3 46 41 49 4C 45 44 3A  1274 	.ascii "FAILED: fcb_open(): "
             20 66 63 62 5F 6F 70
             65 6E 28 29 3A 20
      0007C7 00                    1275 	.db 0x00
      0007C8                       1276 ___str_2:
      0007C8 0A                    1277 	.db 0x0a
      0007C9 0D                    1278 	.db 0x0d
      0007CA 46 41 49 4C 45 44 3A  1279 	.ascii "FAILED: fcb_close():"
             20 66 63 62 5F 63 6C
             6F 73 65 28 29 3A
      0007DE 00                    1280 	.db 0x00
      0007DF                       1281 ___str_3:
      0007DF 0A                    1282 	.db 0x0a
      0007E0 0D                    1283 	.db 0x0d
      0007E1 53 74 6F 70 20 4B 69  1284 	.ascii "Stop Kidding, run me on MSX2 !"
             64 64 69 6E 67 2C 20
             72 75 6E 20 6D 65 20
             6F 6E 20 4D 53 58 32
             20 21
      0007FF 00                    1285 	.db 0x00
      000800                       1286 ___str_4:
      000800 0A                    1287 	.db 0x0a
      000801 0D                    1288 	.db 0x0d
      000802 55 6E 65 73 70 65 63  1289 	.ascii "Unespected end of file:"
             74 65 64 20 65 6E 64
             20 6F 66 20 66 69 6C
             65 3A
      000819 00                    1290 	.db 0x00
                                   1291 ;src\mytestrom.c:940: void MyLoadMap(char mapnumber,unsigned char* p ) __sdcccall(1)
                                   1292 ;	---------------------------------
                                   1293 ; Function MyLoadMap
                                   1294 ; ---------------------------------
      00081A                       1295 _MyLoadMap::
      00081A DD E5            [15] 1296 	push	ix
      00081C DD 21 00 00      [14] 1297 	ld	ix,#0
      000820 DD 39            [15] 1298 	add	ix,sp
      000822 21 FB FF         [10] 1299 	ld	hl, #-5
      000825 39               [11] 1300 	add	hl, sp
      000826 F9               [ 6] 1301 	ld	sp, hl
      000827 6F               [ 4] 1302 	ld	l, a
                                   1303 ;	spillPairReg hl
                                   1304 ;	spillPairReg hl
      000828 DD 73 FD         [19] 1305 	ld	-3 (ix), e
      00082B DD 72 FE         [19] 1306 	ld	-2 (ix), d
                                   1307 ;src\mytestrom.c:942: char *q = &((char*)DataLevelMap)[2]+12*mapnumber;
      00082E 01r00r00         [10] 1308 	ld	bc, #_DataLevelMap
      000831 59               [ 4] 1309 	ld	e, c
      000832 50               [ 4] 1310 	ld	d, b
      000833 13               [ 6] 1311 	inc	de
      000834 13               [ 6] 1312 	inc	de
      000835 26 00            [ 7] 1313 	ld	h, #0x00
                                   1314 ;	spillPairReg hl
                                   1315 ;	spillPairReg hl
      000837 D5               [11] 1316 	push	de
      000838 5D               [ 4] 1317 	ld	e, l
      000839 54               [ 4] 1318 	ld	d, h
      00083A 29               [11] 1319 	add	hl, hl
      00083B 19               [11] 1320 	add	hl, de
      00083C 29               [11] 1321 	add	hl, hl
      00083D 29               [11] 1322 	add	hl, hl
      00083E D1               [10] 1323 	pop	de
      00083F 19               [11] 1324 	add	hl, de
      000840 EB               [ 4] 1325 	ex	de, hl
                                   1326 ;src\mytestrom.c:951: __endasm;	
      000841 3Er00            [ 7] 1327 	ld	a,#b_DataLevelMap
      000843 32 00 90         [13] 1328 	ld	(#0x9000),a
      000846 32r00r00         [13] 1329 	ld	(#_curr_bank),a
      000849 3C               [ 4] 1330 	inc	a
      00084A 32 00 B0         [13] 1331 	ld	(#0xb000),a
                                   1332 ;src\mytestrom.c:953: LevelW = ((char*)DataLevelMap)[0];
      00084D 0A               [ 7] 1333 	ld	a, (bc)
      00084E 32r21r00         [13] 1334 	ld	(_LevelW+0), a
                                   1335 ;src\mytestrom.c:955: LevelH = 11;
      000851 21r22r00         [10] 1336 	ld	hl, #_LevelH
      000854 36 0B            [10] 1337 	ld	(hl), #0x0b
                                   1338 ;src\mytestrom.c:957: for (char t=0;t<LevelW;t++) {
      000856 DD 4E FD         [19] 1339 	ld	c, -3 (ix)
      000859 DD 46 FE         [19] 1340 	ld	b, -2 (ix)
      00085C DD 36 FF 00      [19] 1341 	ld	-1 (ix), #0x00
      000860                       1342 00103$:
      000860 21r21r00         [10] 1343 	ld	hl, #_LevelW
      000863 DD 7E FF         [19] 1344 	ld	a, -1 (ix)
      000866 96               [ 7] 1345 	sub	a, (hl)
      000867 30 25            [12] 1346 	jr	NC, 00105$
                                   1347 ;src\mytestrom.c:958: memcpy(p,q,11);
      000869 33               [ 6] 1348 	inc	sp
      00086A 33               [ 6] 1349 	inc	sp
      00086B C5               [11] 1350 	push	bc
      00086C 6B               [ 4] 1351 	ld	l, e
                                   1352 ;	spillPairReg hl
                                   1353 ;	spillPairReg hl
      00086D 62               [ 4] 1354 	ld	h, d
                                   1355 ;	spillPairReg hl
                                   1356 ;	spillPairReg hl
      00086E D5               [11] 1357 	push	de
      00086F C5               [11] 1358 	push	bc
      000870 DD 5E FB         [19] 1359 	ld	e, -5 (ix)
      000873 DD 56 FC         [19] 1360 	ld	d, -4 (ix)
      000876 01 0B 00         [10] 1361 	ld	bc, #0x000b
      000879 ED B0            [21] 1362 	ldir
      00087B C1               [10] 1363 	pop	bc
      00087C D1               [10] 1364 	pop	de
                                   1365 ;src\mytestrom.c:959: p +=11;
      00087D 21 0B 00         [10] 1366 	ld	hl, #0x000b
      000880 09               [11] 1367 	add	hl, bc
      000881 4D               [ 4] 1368 	ld	c, l
      000882 44               [ 4] 1369 	ld	b, h
                                   1370 ;src\mytestrom.c:960: q +=24;
      000883 21 18 00         [10] 1371 	ld	hl, #0x0018
      000886 19               [11] 1372 	add	hl, de
      000887 EB               [ 4] 1373 	ex	de, hl
                                   1374 ;src\mytestrom.c:957: for (char t=0;t<LevelW;t++) {
      000888 DD 34 FF         [23] 1375 	inc	-1 (ix)
      00088B C3r60r08         [10] 1376 	jp	00103$
      00088E                       1377 00105$:
                                   1378 ;src\mytestrom.c:962: }
      00088E DD F9            [10] 1379 	ld	sp, ix
      000890 DD E1            [14] 1380 	pop	ix
      000892 C9               [10] 1381 	ret
                                   1382 ;src\mytestrom.c:964: void myISR(void) __sdcccall(1) __naked
                                   1383 ;	---------------------------------
                                   1384 ; Function myISR
                                   1385 ; ---------------------------------
      000893                       1386 _myISR::
                                   1387 ;src\mytestrom.c:1003: __endasm;
      000893 F5               [11] 1388 	push	af
      000894 AF               [ 4] 1389 	xor	a,a ; set Status Register #0 for reading
      000895 D3 99            [11] 1390 	out	(#0x99),a
      000897 3E 8F            [ 7] 1391 	ld	a,#0x8f
      000899 D3 99            [11] 1392 	out	(#0x99),a
      00089B DB 99            [11] 1393 	in	a,(#0x99) ; mimimum ISR
      00089D 3Ar2Cr00         [13] 1394 	ld	a,(#_cursat)
      0008A0 A7               [ 4] 1395 	and	a,a
      0008A1 3E 03            [ 7] 1396 	ld	a,#3
      0008A3 20 02            [12] 1397 	jr	nz,setsat1
      0008A5 3E 01            [ 7] 1398 	ld	a,#1
      0008A7                       1399 	setsat1:
      0008A7 D3 99            [11] 1400 	out	(#0x99),a
      0008A9 3E 8B            [ 7] 1401 	ld	a,#128+#11
      0008AB D3 99            [11] 1402 	out	(#0x99),a
      0008AD F1               [10] 1403 	pop	af
      0008AE FB               [ 4] 1404 	ei
      0008AF C9               [10] 1405 	ret
                                   1406 ;src\mytestrom.c:1004: }
                                   1407 ;src\mytestrom.c:1006: void myInstISR(void) __sdcccall(1) __naked
                                   1408 ;	---------------------------------
                                   1409 ; Function myInstISR
                                   1410 ; ---------------------------------
      0008B0                       1411 _myInstISR::
                                   1412 ;src\mytestrom.c:1008: myVDPwrite(WindowH-8,19); // indagare sul glitch !!! xxx
      0008B0 2E 13            [ 7] 1413 	ld	l, #0x13
                                   1414 ;	spillPairReg hl
                                   1415 ;	spillPairReg hl
      0008B2 3E A8            [ 7] 1416 	ld	a, #0xa8
      0008B4 CDrD8r06         [17] 1417 	call	_myVDPwrite
                                   1418 ;src\mytestrom.c:1024: __endasm;
      0008B7 21 9A FD         [10] 1419 	ld	hl,#0xFD9A
      0008BA 11r29r00         [10] 1420 	ld	de,#_OldIsr
      0008BD 01 03 00         [10] 1421 	ld	bc,#3
      0008C0 ED B0            [21] 1422 	ldir
      0008C2 F3               [ 4] 1423 	di
      0008C3 3E C3            [ 7] 1424 	ld	a,#0xC3
      0008C5 32 9A FD         [13] 1425 	ld	(#0xFD9A+#0),a
      0008C8 21r93r08         [10] 1426 	ld	hl,#_myISR
      0008CB 22 9B FD         [16] 1427 	ld	(#0xFD9A+#1),hl
      0008CE FB               [ 4] 1428 	ei
      0008CF C9               [10] 1429 	ret
                                   1430 ;src\mytestrom.c:1025: }
                                   1431 ;src\mytestrom.c:1027: void myISRrestore(void) __sdcccall(1) __naked
                                   1432 ;	---------------------------------
                                   1433 ; Function myISRrestore
                                   1434 ; ---------------------------------
      0008D0                       1435 _myISRrestore::
                                   1436 ;src\mytestrom.c:1029: RG0SAV &= 0xEF;
      0008D0 3A DF F3         [13] 1437 	ld	a, (_RG0SAV+0)
      0008D3 E6 EF            [ 7] 1438 	and	a, #0xef
      0008D5 32 DF F3         [13] 1439 	ld	(_RG0SAV+0), a
                                   1440 ;src\mytestrom.c:1030: myVDPwrite(RG0SAV,0);
      0008D8 2E 00            [ 7] 1441 	ld	l, #0x00
                                   1442 ;	spillPairReg hl
                                   1443 ;	spillPairReg hl
      0008DA 3A DF F3         [13] 1444 	ld	a, (_RG0SAV+0)
      0008DD CDrD8r06         [17] 1445 	call	_myVDPwrite
                                   1446 ;src\mytestrom.c:1040: __endasm;
      0008E0 21r29r00         [10] 1447 	ld	hl,#_OldIsr
      0008E3 11 9A FD         [10] 1448 	ld	de,#0xFD9A
      0008E6 01 03 00         [10] 1449 	ld	bc,#3
      0008E9 F3               [ 4] 1450 	di
      0008EA ED B0            [21] 1451 	ldir
      0008EC FB               [ 4] 1452 	ei
      0008ED C9               [10] 1453 	ret
                                   1454 ;src\mytestrom.c:1041: }
                                   1455 ;src\mytestrom.c:1045: unsigned char myCheckkbd(unsigned char nrow) __sdcccall(1) __naked
                                   1456 ;	---------------------------------
                                   1457 ; Function myCheckkbd
                                   1458 ; ---------------------------------
      0008EE                       1459 _myCheckkbd::
                                   1460 ;src\mytestrom.c:1071: __endasm;
                                   1461 ;
                                   1462 ;
                                   1463 ;
                                   1464 ;
                                   1465 ;
                                   1466 ;
                                   1467 ;
                                   1468 ;
                                   1469 ;
                                   1470 ;
                                   1471 ;	checkkbd:
      0008EE 5F               [ 4] 1472 	ld	e,a
      0008EF F3               [ 4] 1473 	di
      0008F0 DB AA            [11] 1474 	in	a,(#0xaa)
      0008F2 E6 F0            [ 7] 1475 	and	a,#0b11110000 ; upper 4 bits contain info to preserve
      0008F4 B3               [ 4] 1476 	or	a,e
      0008F5 D3 AA            [11] 1477 	out	(#0xaa),a
      0008F7 DB A9            [11] 1478 	in	a,(#0xa9)
      0008F9 6F               [ 4] 1479 	ld	l,a
      0008FA FB               [ 4] 1480 	ei
      0008FB C9               [10] 1481 	ret
                                   1482 ;src\mytestrom.c:1072: }
                                   1483 ;src\mytestrom.c:1083: void ObjectsInit(void) {
                                   1484 ;	---------------------------------
                                   1485 ; Function ObjectsInit
                                   1486 ; ---------------------------------
      0008FC                       1487 _ObjectsInit::
      0008FC DD E5            [15] 1488 	push	ix
      0008FE DD 21 00 00      [14] 1489 	ld	ix,#0
      000902 DD 39            [15] 1490 	add	ix,sp
      000904 F5               [11] 1491 	push	af
      000905 F5               [11] 1492 	push	af
                                   1493 ;src\mytestrom.c:1085: for (t=0;t<MaxObjNum;t++)
      000906 0E 00            [ 7] 1494 	ld	c, #0x00
      000908                       1495 00102$:
                                   1496 ;src\mytestrom.c:1087: object[t].x = t*LevelW*4/MaxObjNum + WindowW/2;
      000908 06 00            [ 7] 1497 	ld	b, #0x00
      00090A 69               [ 4] 1498 	ld	l, c
      00090B 60               [ 4] 1499 	ld	h, b
      00090C 29               [11] 1500 	add	hl, hl
      00090D 09               [11] 1501 	add	hl, bc
      00090E 29               [11] 1502 	add	hl, hl
      00090F 09               [11] 1503 	add	hl, bc
      000910 11r2Fr0B         [10] 1504 	ld	de, #_object
      000913 19               [11] 1505 	add	hl, de
      000914 E3               [19] 1506 	ex	(sp), hl
      000915 DD 7E FC         [19] 1507 	ld	a, -4 (ix)
      000918 DD 77 FE         [19] 1508 	ld	-2 (ix), a
      00091B DD 7E FD         [19] 1509 	ld	a, -3 (ix)
      00091E DD 77 FF         [19] 1510 	ld	-1 (ix), a
      000921 3Ar21r00         [13] 1511 	ld	a, (#_LevelW + 0)
      000924 5F               [ 4] 1512 	ld	e, a
      000925 61               [ 4] 1513 	ld	h, c
                                   1514 ;	spillPairReg hl
                                   1515 ;	spillPairReg hl
      000926 2E 00            [ 7] 1516 	ld	l, #0x00
      000928 55               [ 4] 1517 	ld	d, l
      000929 06 08            [ 7] 1518 	ld	b, #0x08
      00092B                       1519 00125$:
      00092B 29               [11] 1520 	add	hl, hl
      00092C 30 01            [12] 1521 	jr	NC, 00126$
      00092E 19               [11] 1522 	add	hl, de
      00092F                       1523 00126$:
      00092F 10 FA            [13] 1524 	djnz	00125$
      000931 29               [11] 1525 	add	hl, hl
      000932 29               [11] 1526 	add	hl, hl
      000933 44               [ 4] 1527 	ld	b, h
      000934 5D               [ 4] 1528 	ld	e, l
      000935 50               [ 4] 1529 	ld	d, b
      000936 CB 78            [ 8] 1530 	bit	7, b
      000938 28 08            [12] 1531 	jr	Z, 00106$
      00093A 7D               [ 4] 1532 	ld	a, l
      00093B C6 07            [ 7] 1533 	add	a, #0x07
      00093D 5F               [ 4] 1534 	ld	e, a
      00093E 78               [ 4] 1535 	ld	a, b
      00093F CE 00            [ 7] 1536 	adc	a, #0x00
      000941 57               [ 4] 1537 	ld	d, a
      000942                       1538 00106$:
      000942 CB 2A            [ 8] 1539 	sra	d
      000944 CB 1B            [ 8] 1540 	rr	e
      000946 CB 2A            [ 8] 1541 	sra	d
      000948 CB 1B            [ 8] 1542 	rr	e
      00094A CB 2A            [ 8] 1543 	sra	d
      00094C CB 1B            [ 8] 1544 	rr	e
      00094E 21 78 00         [10] 1545 	ld	hl, #0x0078
      000951 19               [11] 1546 	add	hl, de
      000952 EB               [ 4] 1547 	ex	de, hl
      000953 DD 6E FE         [19] 1548 	ld	l, -2 (ix)
      000956 DD 66 FF         [19] 1549 	ld	h, -1 (ix)
      000959 73               [ 7] 1550 	ld	(hl), e
      00095A 23               [ 6] 1551 	inc	hl
      00095B 72               [ 7] 1552 	ld	(hl), d
                                   1553 ;src\mytestrom.c:1088: object[t].y = (t & 1) ? LevelH*16-32 : 0;
      00095C DD 7E FC         [19] 1554 	ld	a, -4 (ix)
      00095F C6 02            [ 7] 1555 	add	a, #0x02
      000961 5F               [ 4] 1556 	ld	e, a
      000962 DD 7E FD         [19] 1557 	ld	a, -3 (ix)
      000965 CE 00            [ 7] 1558 	adc	a, #0x00
      000967 67               [ 4] 1559 	ld	h, a
                                   1560 ;	spillPairReg hl
                                   1561 ;	spillPairReg hl
      000968 CB 41            [ 8] 1562 	bit	0, c
      00096A 28 1B            [12] 1563 	jr	Z, 00107$
      00096C 3Ar22r00         [13] 1564 	ld	a, (_LevelH+0)
      00096F 06 00            [ 7] 1565 	ld	b, #0x00
      000971 87               [ 4] 1566 	add	a, a
      000972 CB 10            [ 8] 1567 	rl	b
      000974 87               [ 4] 1568 	add	a, a
      000975 CB 10            [ 8] 1569 	rl	b
      000977 87               [ 4] 1570 	add	a, a
      000978 CB 10            [ 8] 1571 	rl	b
      00097A 87               [ 4] 1572 	add	a, a
      00097B CB 10            [ 8] 1573 	rl	b
      00097D C6 E0            [ 7] 1574 	add	a, #0xe0
      00097F 57               [ 4] 1575 	ld	d, a
      000980 78               [ 4] 1576 	ld	a, b
      000981 CE FF            [ 7] 1577 	adc	a, #0xff
      000983 47               [ 4] 1578 	ld	b, a
      000984 C3r8Ar09         [10] 1579 	jp	00108$
      000987                       1580 00107$:
      000987 16 00            [ 7] 1581 	ld	d, #0x00
      000989 42               [ 4] 1582 	ld	b, d
      00098A                       1583 00108$:
      00098A 6B               [ 4] 1584 	ld	l, e
      00098B 72               [ 7] 1585 	ld	(hl), d
      00098C 23               [ 6] 1586 	inc	hl
      00098D 70               [ 7] 1587 	ld	(hl), b
                                   1588 ;src\mytestrom.c:1089: object[t].frame = t;
      00098E E1               [10] 1589 	pop	hl
      00098F E5               [11] 1590 	push	hl
      000990 11 05 00         [10] 1591 	ld	de, #0x0005
      000993 19               [11] 1592 	add	hl, de
      000994 71               [ 7] 1593 	ld	(hl), c
                                   1594 ;src\mytestrom.c:1090: object[t].status = 255;		// 0 is for inactive
      000995 E1               [10] 1595 	pop	hl
      000996 E5               [11] 1596 	push	hl
      000997 11 06 00         [10] 1597 	ld	de, #0x0006
      00099A 19               [11] 1598 	add	hl, de
      00099B 36 FF            [10] 1599 	ld	(hl), #0xff
                                   1600 ;src\mytestrom.c:1085: for (t=0;t<MaxObjNum;t++)
      00099D 0C               [ 4] 1601 	inc	c
      00099E 79               [ 4] 1602 	ld	a, c
      00099F D6 08            [ 7] 1603 	sub	a, #0x08
      0009A1 DAr08r09         [10] 1604 	jp	C, 00102$
                                   1605 ;src\mytestrom.c:1092: }
      0009A4 DD F9            [10] 1606 	ld	sp, ix
      0009A6 DD E1            [14] 1607 	pop	ix
      0009A8 C9               [10] 1608 	ret
                                   1609 ;src\mytestrom.c:1100: void ObjectstoVRAM(int MapX) __sdcccall(1)
                                   1610 ;	---------------------------------
                                   1611 ; Function ObjectstoVRAM
                                   1612 ; ---------------------------------
      0009A9                       1613 _ObjectstoVRAM::
      0009A9 DD E5            [15] 1614 	push	ix
      0009AB DD 21 00 00      [14] 1615 	ld	ix,#0
      0009AF DD 39            [15] 1616 	add	ix,sp
      0009B1 F5               [11] 1617 	push	af
      0009B2 F5               [11] 1618 	push	af
      0009B3 3B               [ 6] 1619 	dec	sp
      0009B4 DD 75 FD         [19] 1620 	ld	-3 (ix), l
      0009B7 DD 74 FE         [19] 1621 	ld	-2 (ix), h
                                   1622 ;src\mytestrom.c:1109: if (cursat==0) {
      0009BA 3Ar2Cr00         [13] 1623 	ld	a, (_cursat+0)
      0009BD B7               [ 4] 1624 	or	a, a
      0009BE 20 0D            [12] 1625 	jr	NZ, 00102$
                                   1626 ;src\mytestrom.c:1110: SetVramW(0,0xFA00);	// sat 0
      0009C0 11 00 FA         [10] 1627 	ld	de, #0xfa00
      0009C3 AF               [ 4] 1628 	xor	a, a
      0009C4 CDr34r0C         [17] 1629 	call	_SetVramW
                                   1630 ;src\mytestrom.c:1111: q = &object[MaxObjNum-1];
      0009C7 11r60r0B         [10] 1631 	ld	de, #_object+49
      0009CA C3rD8r09         [10] 1632 	jp	00122$
      0009CD                       1633 00102$:
                                   1634 ;src\mytestrom.c:1114: SetVramW(1,0xFA00);	// sat 1		
      0009CD 11 00 FA         [10] 1635 	ld	de, #0xfa00
      0009D0 3E 01            [ 7] 1636 	ld	a, #0x01
      0009D2 CDr34r0C         [17] 1637 	call	_SetVramW
                                   1638 ;src\mytestrom.c:1115: q = &object[0];		
      0009D5 11r2Fr0B         [10] 1639 	ld	de, #_object
                                   1640 ;src\mytestrom.c:1119: for (t=0; t<MaxObjNum; t++) 
      0009D8                       1641 00122$:
      0009D8 DD 36 FF 00      [19] 1642 	ld	-1 (ix), #0x00
      0009DC                       1643 00113$:
                                   1644 ;src\mytestrom.c:1122: u = q->x-(((unsigned int) MapX) & 0xFFF0);
      0009DC 6B               [ 4] 1645 	ld	l, e
      0009DD 62               [ 4] 1646 	ld	h, d
      0009DE 4E               [ 7] 1647 	ld	c, (hl)
      0009DF 23               [ 6] 1648 	inc	hl
      0009E0 46               [ 7] 1649 	ld	b, (hl)
                                   1650 ;	spillPairReg hl
                                   1651 ;	spillPairReg hl
                                   1652 ;	spillPairReg hl
                                   1653 ;	spillPairReg hl
      0009E1 DD 7E FD         [19] 1654 	ld	a, -3 (ix)
      0009E4 DD 66 FE         [19] 1655 	ld	h, -2 (ix)
      0009E7 E6 F0            [ 7] 1656 	and	a, #0xf0
      0009E9 DD 77 FB         [19] 1657 	ld	-5 (ix), a
      0009EC DD 74 FC         [19] 1658 	ld	-4 (ix), h
      0009EF 21r67r0B         [10] 1659 	ld	hl, #_u
      0009F2 79               [ 4] 1660 	ld	a, c
      0009F3 DD 96 FB         [19] 1661 	sub	a, -5 (ix)
      0009F6 77               [ 7] 1662 	ld	(hl), a
      0009F7 78               [ 4] 1663 	ld	a, b
      0009F8 DD 9E FC         [19] 1664 	sbc	a, -4 (ix)
      0009FB 23               [ 6] 1665 	inc	hl
      0009FC 77               [ 7] 1666 	ld	(hl), a
                                   1667 ;src\mytestrom.c:1123: y = q->y;
      0009FD 4B               [ 4] 1668 	ld	c, e
      0009FE 42               [ 4] 1669 	ld	b, d
      0009FF 03               [ 6] 1670 	inc	bc
      000A00 03               [ 6] 1671 	inc	bc
      000A01 0A               [ 7] 1672 	ld	a, (bc)
      000A02 32r69r0B         [13] 1673 	ld	(_y+0), a
                                   1674 ;src\mytestrom.c:1124: x = u;
      000A05 3Ar67r0B         [13] 1675 	ld	a, (_u+0)
      000A08 32r6Ar0B         [13] 1676 	ld	(_x+0), a
                                   1677 ;src\mytestrom.c:1125: v = q->frame<<4;
      000A0B D5               [11] 1678 	push	de
      000A0C FD E1            [14] 1679 	pop	iy
      000A0E FD 7E 05         [19] 1680 	ld	a, 5 (iy)
      000A11 87               [ 4] 1681 	add	a, a
      000A12 87               [ 4] 1682 	add	a, a
      000A13 87               [ 4] 1683 	add	a, a
      000A14 87               [ 4] 1684 	add	a, a
      000A15 32r6Br0B         [13] 1685 	ld	(_v+0), a
                                   1686 ;src\mytestrom.c:1127: if (q->status && (q->x - MapX >= 0) && (q->x - MapX < WindowW-16)) 
      000A18 D5               [11] 1687 	push	de
      000A19 FD E1            [14] 1688 	pop	iy
      000A1B FD 7E 06         [19] 1689 	ld	a, 6 (iy)
      000A1E B7               [ 4] 1690 	or	a, a
      000A1F CAr8Dr0A         [10] 1691 	jp	Z, 00105$
      000A22 6B               [ 4] 1692 	ld	l, e
      000A23 62               [ 4] 1693 	ld	h, d
      000A24 4E               [ 7] 1694 	ld	c, (hl)
      000A25 23               [ 6] 1695 	inc	hl
      000A26 46               [ 7] 1696 	ld	b, (hl)
      000A27 79               [ 4] 1697 	ld	a, c
      000A28 DD 96 FD         [19] 1698 	sub	a, -3 (ix)
      000A2B 4F               [ 4] 1699 	ld	c, a
      000A2C 78               [ 4] 1700 	ld	a, b
      000A2D DD 9E FE         [19] 1701 	sbc	a, -2 (ix)
      000A30 47               [ 4] 1702 	ld	b, a
      000A31 CB 78            [ 8] 1703 	bit	7, b
      000A33 C2r8Dr0A         [10] 1704 	jp	NZ, 00105$
      000A36 79               [ 4] 1705 	ld	a, c
      000A37 D6 E0            [ 7] 1706 	sub	a, #0xe0
      000A39 78               [ 4] 1707 	ld	a, b
      000A3A DE 00            [ 7] 1708 	sbc	a, #0x00
      000A3C D2r8Dr0A         [10] 1709 	jp	NC, 00105$
                                   1710 ;src\mytestrom.c:1159: __endasm;
      000A3F 0E 98            [ 7] 1711 	ld	c,#0x98
                                   1712 	.rept	2
                                   1713 	ld	hl,#_y
                                   1714 	outi
                                   1715 	outi
                                   1716 	outi
                                   1717 	ld	a, (_v)
                                   1718 	out	(#0x98),a
                                   1719 	add	a, #4
                                   1720 	ld	(_v),a
                                   1721 	.endm
      000A41 21r69r0B         [10]    1 	ld	hl,#_y
      000A44 ED A3            [16]    2 	outi
      000A46 ED A3            [16]    3 	outi
      000A48 ED A3            [16]    4 	outi
      000A4A 3Ar6Br0B         [13]    5 	ld	a, (_v)
      000A4D D3 98            [11]    6 	out	(#0x98),a
      000A4F C6 04            [ 7]    7 	add	a, #4
      000A51 32r6Br0B         [13]    8 	ld	(_v),a
      000A54 21r69r0B         [10]    1 	ld	hl,#_y
      000A57 ED A3            [16]    2 	outi
      000A59 ED A3            [16]    3 	outi
      000A5B ED A3            [16]    4 	outi
      000A5D 3Ar6Br0B         [13]    5 	ld	a, (_v)
      000A60 D3 98            [11]    6 	out	(#0x98),a
      000A62 C6 04            [ 7]    7 	add	a, #4
      000A64 32r6Br0B         [13]    8 	ld	(_v),a
      000A67 21r69r0B         [10] 1722 	ld	hl,#_y
      000A6A 3E 10            [ 7] 1723 	ld	a,#16
      000A6C 86               [ 7] 1724 	add	a,(hl)
      000A6D 77               [ 7] 1725 	ld	(hl),a
      000A6E ED A3            [16] 1726 	outi
      000A70 ED A3            [16] 1727 	outi
      000A72 ED A3            [16] 1728 	outi
      000A74 3Ar6Br0B         [13] 1729 	ld	a,(_v)
      000A77 D3 98            [11] 1730 	out	(#0x98),a
      000A79 C6 04            [ 7] 1731 	add	a, #4
      000A7B 32r6Br0B         [13] 1732 	ld	(_v),a
      000A7E 21r69r0B         [10] 1733 	ld	hl,#_y
      000A81 ED A3            [16] 1734 	outi
      000A83 ED A3            [16] 1735 	outi
      000A85 ED A3            [16] 1736 	outi
      000A87 00               [ 4] 1737 	nop
      000A88 D3 98            [11] 1738 	out	(#0x98),a
      000A8A C3rBFr0A         [10] 1739 	jp	00106$
      000A8D                       1740 00105$:
                                   1741 ;src\mytestrom.c:1168: __endasm;
      000A8D 3E D9            [ 7] 1742 	ld	a,#217
                                   1743 	.rept	16
                                   1744 	out	(#0x98),a
                                   1745 	nop
                                   1746 	.endm
      000A8F D3 98            [11]    1 	out	(#0x98),a
      000A91 00               [ 4]    2 	nop
      000A92 D3 98            [11]    1 	out	(#0x98),a
      000A94 00               [ 4]    2 	nop
      000A95 D3 98            [11]    1 	out	(#0x98),a
      000A97 00               [ 4]    2 	nop
      000A98 D3 98            [11]    1 	out	(#0x98),a
      000A9A 00               [ 4]    2 	nop
      000A9B D3 98            [11]    1 	out	(#0x98),a
      000A9D 00               [ 4]    2 	nop
      000A9E D3 98            [11]    1 	out	(#0x98),a
      000AA0 00               [ 4]    2 	nop
      000AA1 D3 98            [11]    1 	out	(#0x98),a
      000AA3 00               [ 4]    2 	nop
      000AA4 D3 98            [11]    1 	out	(#0x98),a
      000AA6 00               [ 4]    2 	nop
      000AA7 D3 98            [11]    1 	out	(#0x98),a
      000AA9 00               [ 4]    2 	nop
      000AAA D3 98            [11]    1 	out	(#0x98),a
      000AAC 00               [ 4]    2 	nop
      000AAD D3 98            [11]    1 	out	(#0x98),a
      000AAF 00               [ 4]    2 	nop
      000AB0 D3 98            [11]    1 	out	(#0x98),a
      000AB2 00               [ 4]    2 	nop
      000AB3 D3 98            [11]    1 	out	(#0x98),a
      000AB5 00               [ 4]    2 	nop
      000AB6 D3 98            [11]    1 	out	(#0x98),a
      000AB8 00               [ 4]    2 	nop
      000AB9 D3 98            [11]    1 	out	(#0x98),a
      000ABB 00               [ 4]    2 	nop
      000ABC D3 98            [11]    1 	out	(#0x98),a
      000ABE 00               [ 4]    2 	nop
      000ABF                       1747 00106$:
                                   1748 ;src\mytestrom.c:1170: if (cursat==0) {
      000ABF 3Ar2Cr00         [13] 1749 	ld	a, (_cursat+0)
      000AC2 B7               [ 4] 1750 	or	a, a
      000AC3 20 0B            [12] 1751 	jr	NZ, 00110$
                                   1752 ;src\mytestrom.c:1171: q--;
      000AC5 7B               [ 4] 1753 	ld	a, e
      000AC6 C6 F9            [ 7] 1754 	add	a, #0xf9
      000AC8 5F               [ 4] 1755 	ld	e, a
      000AC9 7A               [ 4] 1756 	ld	a, d
      000ACA CE FF            [ 7] 1757 	adc	a, #0xff
      000ACC 57               [ 4] 1758 	ld	d, a
      000ACD C3rD5r0A         [10] 1759 	jp	00114$
      000AD0                       1760 00110$:
                                   1761 ;src\mytestrom.c:1174: q++;
      000AD0 21 07 00         [10] 1762 	ld	hl, #0x0007
      000AD3 19               [11] 1763 	add	hl, de
      000AD4 EB               [ 4] 1764 	ex	de, hl
      000AD5                       1765 00114$:
                                   1766 ;src\mytestrom.c:1119: for (t=0; t<MaxObjNum; t++) 
      000AD5 DD 34 FF         [23] 1767 	inc	-1 (ix)
      000AD8 DD 7E FF         [19] 1768 	ld	a, -1 (ix)
      000ADB D6 08            [ 7] 1769 	sub	a, #0x08
      000ADD DArDCr09         [10] 1770 	jp	C, 00113$
                                   1771 ;src\mytestrom.c:1180: }
      000AE0 DD F9            [10] 1772 	ld	sp, ix
      000AE2 DD E1            [14] 1773 	pop	ix
      000AE4 C9               [10] 1774 	ret
                                   1775 ;src\mytestrom.c:1184: void UpdateColor(char plane,char frame,char nsat) __sdcccall(1){
                                   1776 ;	---------------------------------
                                   1777 ; Function UpdateColor
                                   1778 ; ---------------------------------
      000AE5                       1779 _UpdateColor::
      000AE5 DD E5            [15] 1780 	push	ix
      000AE7 DD 21 00 00      [14] 1781 	ld	ix,#0
      000AEB DD 39            [15] 1782 	add	ix,sp
      000AED 47               [ 4] 1783 	ld	b, a
      000AEE 4D               [ 4] 1784 	ld	c, l
                                   1785 ;src\mytestrom.c:1187: SetVramW(1,0xF800+plane*16);
      000AEF 68               [ 4] 1786 	ld	l, b
                                   1787 ;	spillPairReg hl
                                   1788 ;	spillPairReg hl
      000AF0 26 00            [ 7] 1789 	ld	h, #0x00
                                   1790 ;	spillPairReg hl
                                   1791 ;	spillPairReg hl
      000AF2 29               [11] 1792 	add	hl, hl
      000AF3 29               [11] 1793 	add	hl, hl
      000AF4 29               [11] 1794 	add	hl, hl
      000AF5 29               [11] 1795 	add	hl, hl
      000AF6 5D               [ 4] 1796 	ld	e, l
      000AF7 7C               [ 4] 1797 	ld	a, h
      000AF8 C6 F8            [ 7] 1798 	add	a, #0xf8
      000AFA 57               [ 4] 1799 	ld	d, a
                                   1800 ;src\mytestrom.c:1186: if (nsat)
      000AFB DD 7E 04         [19] 1801 	ld	a, 4 (ix)
      000AFE B7               [ 4] 1802 	or	a, a
      000AFF 28 08            [12] 1803 	jr	Z, 00102$
                                   1804 ;src\mytestrom.c:1187: SetVramW(1,0xF800+plane*16);
      000B01 3E 01            [ 7] 1805 	ld	a, #0x01
      000B03 CDr34r0C         [17] 1806 	call	_SetVramW
      000B06 C3r0Dr0B         [10] 1807 	jp	00103$
      000B09                       1808 00102$:
                                   1809 ;src\mytestrom.c:1189: SetVramW(0,0xF800+plane*16);
      000B09 AF               [ 4] 1810 	xor	a, a
      000B0A CDr34r0C         [17] 1811 	call	_SetVramW
      000B0D                       1812 00103$:
                                   1813 ;src\mytestrom.c:1191: VramWrite(((unsigned int) &sprite_colors) + frame*64,64);
      000B0D 11r00r00         [10] 1814 	ld	de, #_sprite_colors
      000B10 26 00            [ 7] 1815 	ld	h, #0x00
                                   1816 ;	spillPairReg hl
                                   1817 ;	spillPairReg hl
      000B12 69               [ 4] 1818 	ld	l, c
      000B13 29               [11] 1819 	add	hl, hl
      000B14 29               [11] 1820 	add	hl, hl
      000B15 29               [11] 1821 	add	hl, hl
      000B16 29               [11] 1822 	add	hl, hl
      000B17 29               [11] 1823 	add	hl, hl
      000B18 29               [11] 1824 	add	hl, hl
      000B19 19               [11] 1825 	add	hl, de
      000B1A 11 40 00         [10] 1826 	ld	de, #0x0040
      000B1D CDr16r0C         [17] 1827 	call	_VramWrite
                                   1828 ;src\mytestrom.c:1192: }
      000B20 DD E1            [14] 1829 	pop	ix
      000B22 E1               [10] 1830 	pop	hl
      000B23 33               [ 6] 1831 	inc	sp
      000B24 E9               [ 4] 1832 	jp	(hl)
                                   1833 ;src\mytestrom.c:1194: void UpdateFrame(char plane,char frame,char nsat) __sdcccall(1){
                                   1834 ;	---------------------------------
                                   1835 ; Function UpdateFrame
                                   1836 ; ---------------------------------
      000B25                       1837 _UpdateFrame::
      000B25 DD E5            [15] 1838 	push	ix
      000B27 DD 21 00 00      [14] 1839 	ld	ix,#0
      000B2B DD 39            [15] 1840 	add	ix,sp
      000B2D 47               [ 4] 1841 	ld	b, a
      000B2E 4D               [ 4] 1842 	ld	c, l
                                   1843 ;src\mytestrom.c:1197: SetVramW(0,0xF000+plane*32);
      000B2F 68               [ 4] 1844 	ld	l, b
                                   1845 ;	spillPairReg hl
                                   1846 ;	spillPairReg hl
      000B30 26 00            [ 7] 1847 	ld	h, #0x00
                                   1848 ;	spillPairReg hl
                                   1849 ;	spillPairReg hl
      000B32 29               [11] 1850 	add	hl, hl
      000B33 29               [11] 1851 	add	hl, hl
      000B34 29               [11] 1852 	add	hl, hl
      000B35 29               [11] 1853 	add	hl, hl
      000B36 29               [11] 1854 	add	hl, hl
      000B37 5D               [ 4] 1855 	ld	e, l
                                   1856 ;src\mytestrom.c:1196: if (nsat)
      000B38 DD 7E 04         [19] 1857 	ld	a, 4 (ix)
      000B3B B7               [ 4] 1858 	or	a, a
      000B3C 28 0B            [12] 1859 	jr	Z, 00102$
                                   1860 ;src\mytestrom.c:1197: SetVramW(0,0xF000+plane*32);
      000B3E 7C               [ 4] 1861 	ld	a, h
      000B3F C6 F0            [ 7] 1862 	add	a, #0xf0
      000B41 57               [ 4] 1863 	ld	d, a
      000B42 AF               [ 4] 1864 	xor	a, a
      000B43 CDr34r0C         [17] 1865 	call	_SetVramW
      000B46 C3r51r0B         [10] 1866 	jp	00103$
      000B49                       1867 00102$:
                                   1868 ;src\mytestrom.c:1199: SetVramW(0,0xF000+32*32+plane*32);
      000B49 7C               [ 4] 1869 	ld	a, h
      000B4A C6 F4            [ 7] 1870 	add	a, #0xf4
      000B4C 57               [ 4] 1871 	ld	d, a
      000B4D AF               [ 4] 1872 	xor	a, a
      000B4E CDr34r0C         [17] 1873 	call	_SetVramW
      000B51                       1874 00103$:
                                   1875 ;src\mytestrom.c:1201: VramWrite(((unsigned int) &sprite_patterns) + frame*128,128);
      000B51 11r00r00         [10] 1876 	ld	de, #_sprite_patterns
      000B54 AF               [ 4] 1877 	xor	a, a
      000B55 CB 1F            [ 8] 1878 	rr	a
      000B57 61               [ 4] 1879 	ld	h, c
      000B58 CB 1C            [ 8] 1880 	rr	h
      000B5A 1F               [ 4] 1881 	rra
      000B5B 6F               [ 4] 1882 	ld	l, a
                                   1883 ;	spillPairReg hl
                                   1884 ;	spillPairReg hl
      000B5C 19               [11] 1885 	add	hl, de
      000B5D 11 80 00         [10] 1886 	ld	de, #0x0080
      000B60 CDr16r0C         [17] 1887 	call	_VramWrite
                                   1888 ;src\mytestrom.c:1202: }
      000B63 DD E1            [14] 1889 	pop	ix
      000B65 E1               [10] 1890 	pop	hl
      000B66 33               [ 6] 1891 	inc	sp
      000B67 E9               [ 4] 1892 	jp	(hl)
                                   1893 ;src\mytestrom.c:1257: void SprtInit(void) __sdcccall(1) 
                                   1894 ;	---------------------------------
                                   1895 ; Function SprtInit
                                   1896 ; ---------------------------------
      000B68                       1897 _SprtInit::
                                   1898 ;src\mytestrom.c:1261: RG1SAV |= 2;
      000B68 3A E0 F3         [13] 1899 	ld	a, (_RG1SAV+0)
      000B6B F6 02            [ 7] 1900 	or	a, #0x02
      000B6D 32 E0 F3         [13] 1901 	ld	(_RG1SAV+0), a
                                   1902 ;src\mytestrom.c:1262: myVDPwrite(RG1SAV,1);
      000B70 2E 01            [ 7] 1903 	ld	l, #0x01
                                   1904 ;	spillPairReg hl
                                   1905 ;	spillPairReg hl
      000B72 3A E0 F3         [13] 1906 	ld	a, (_RG1SAV+0)
      000B75 CDrD8r06         [17] 1907 	call	_myVDPwrite
                                   1908 ;src\mytestrom.c:1263: RG8SAV |= 32;
      000B78 3A E7 FF         [13] 1909 	ld	a, (_RG8SAV+0)
      000B7B F6 20            [ 7] 1910 	or	a, #0x20
      000B7D 32 E7 FF         [13] 1911 	ld	(_RG8SAV+0), a
                                   1912 ;src\mytestrom.c:1264: myVDPwrite(RG8SAV,8);
      000B80 2E 08            [ 7] 1913 	ld	l, #0x08
                                   1914 ;	spillPairReg hl
                                   1915 ;	spillPairReg hl
      000B82 3A E7 FF         [13] 1916 	ld	a, (_RG8SAV+0)
      000B85 CDrD8r06         [17] 1917 	call	_myVDPwrite
                                   1918 ;src\mytestrom.c:1274: __endasm;
      000B88 3Er00            [ 7] 1919 	ld	a,#b_sprite_colors
      000B8A 32 00 90         [13] 1920 	ld	(#0x9000),a
      000B8D 32r00r00         [13] 1921 	ld	(#_curr_bank),a
      000B90 3C               [ 4] 1922 	inc	a
      000B91 32 00 B0         [13] 1923 	ld	(#0xb000),a
                                   1924 ;src\mytestrom.c:1277: SetVramW(0,0xF800);					// sat 0
      000B94 11 00 F8         [10] 1925 	ld	de, #0xf800
      000B97 AF               [ 4] 1926 	xor	a, a
      000B98 CDr34r0C         [17] 1927 	call	_SetVramW
                                   1928 ;src\mytestrom.c:1278: for (t=0; t<MaxObjNum; t++) {
      000B9B 0E 00            [ 7] 1929 	ld	c, #0x00
      000B9D                       1930 00104$:
                                   1931 ;src\mytestrom.c:1279: VramWrite(((unsigned int) &sprite_colors) + (MaxObjNum-1-t)*64,64);
      000B9D 11r00r00         [10] 1932 	ld	de, #_sprite_colors
      000BA0 69               [ 4] 1933 	ld	l, c
                                   1934 ;	spillPairReg hl
                                   1935 ;	spillPairReg hl
      000BA1 26 00            [ 7] 1936 	ld	h, #0x00
                                   1937 ;	spillPairReg hl
                                   1938 ;	spillPairReg hl
      000BA3 3E 07            [ 7] 1939 	ld	a, #0x07
      000BA5 95               [ 4] 1940 	sub	a, l
      000BA6 6F               [ 4] 1941 	ld	l, a
                                   1942 ;	spillPairReg hl
                                   1943 ;	spillPairReg hl
      000BA7 9F               [ 4] 1944 	sbc	a, a
      000BA8 94               [ 4] 1945 	sub	a, h
      000BA9 67               [ 4] 1946 	ld	h, a
      000BAA 29               [11] 1947 	add	hl, hl
      000BAB 29               [11] 1948 	add	hl, hl
      000BAC 29               [11] 1949 	add	hl, hl
      000BAD 29               [11] 1950 	add	hl, hl
      000BAE 29               [11] 1951 	add	hl, hl
      000BAF 29               [11] 1952 	add	hl, hl
      000BB0 19               [11] 1953 	add	hl, de
      000BB1 C5               [11] 1954 	push	bc
      000BB2 11 40 00         [10] 1955 	ld	de, #0x0040
      000BB5 CDr16r0C         [17] 1956 	call	_VramWrite
      000BB8 C1               [10] 1957 	pop	bc
                                   1958 ;src\mytestrom.c:1278: for (t=0; t<MaxObjNum; t++) {
      000BB9 0C               [ 4] 1959 	inc	c
      000BBA 79               [ 4] 1960 	ld	a, c
      000BBB D6 08            [ 7] 1961 	sub	a, #0x08
      000BBD 38 DE            [12] 1962 	jr	C, 00104$
                                   1963 ;src\mytestrom.c:1282: SetVramW(1,0xF800);					// sat 1
      000BBF 11 00 F8         [10] 1964 	ld	de, #0xf800
      000BC2 3E 01            [ 7] 1965 	ld	a, #0x01
      000BC4 CDr34r0C         [17] 1966 	call	_SetVramW
                                   1967 ;src\mytestrom.c:1283: for (t=0; t<MaxObjNum; t++) {
      000BC7 0E 00            [ 7] 1968 	ld	c, #0x00
      000BC9                       1969 00106$:
                                   1970 ;src\mytestrom.c:1284: VramWrite(((unsigned int) &sprite_colors) + t*64,64);
      000BC9 11r00r00         [10] 1971 	ld	de, #_sprite_colors
      000BCC 69               [ 4] 1972 	ld	l, c
                                   1973 ;	spillPairReg hl
                                   1974 ;	spillPairReg hl
      000BCD 26 00            [ 7] 1975 	ld	h, #0x00
                                   1976 ;	spillPairReg hl
                                   1977 ;	spillPairReg hl
      000BCF 29               [11] 1978 	add	hl, hl
      000BD0 29               [11] 1979 	add	hl, hl
      000BD1 29               [11] 1980 	add	hl, hl
      000BD2 29               [11] 1981 	add	hl, hl
      000BD3 29               [11] 1982 	add	hl, hl
      000BD4 29               [11] 1983 	add	hl, hl
      000BD5 19               [11] 1984 	add	hl, de
      000BD6 C5               [11] 1985 	push	bc
      000BD7 11 40 00         [10] 1986 	ld	de, #0x0040
      000BDA CDr16r0C         [17] 1987 	call	_VramWrite
      000BDD C1               [10] 1988 	pop	bc
                                   1989 ;src\mytestrom.c:1283: for (t=0; t<MaxObjNum; t++) {
      000BDE 0C               [ 4] 1990 	inc	c
      000BDF 79               [ 4] 1991 	ld	a, c
      000BE0 D6 08            [ 7] 1992 	sub	a, #0x08
      000BE2 38 E5            [12] 1993 	jr	C, 00106$
                                   1994 ;src\mytestrom.c:1294: __endasm;
      000BE4 3Er00            [ 7] 1995 	ld	a,#b_sprite_patterns
      000BE6 32 00 90         [13] 1996 	ld	(#0x9000),a
      000BE9 32r00r00         [13] 1997 	ld	(#_curr_bank),a
      000BEC 3C               [ 4] 1998 	inc	a
      000BED 32 00 B0         [13] 1999 	ld	(#0xb000),a
                                   2000 ;src\mytestrom.c:1296: SetVramW(0,0xF000);					// sprite patterns	
      000BF0 11 00 F0         [10] 2001 	ld	de, #0xf000
      000BF3 AF               [ 4] 2002 	xor	a, a
      000BF4 CDr34r0C         [17] 2003 	call	_SetVramW
                                   2004 ;src\mytestrom.c:1297: for (t=0; t<MaxObjNum; t++) {	
      000BF7 0E 00            [ 7] 2005 	ld	c, #0x00
      000BF9                       2006 00108$:
                                   2007 ;src\mytestrom.c:1298: VramWrite(((unsigned int) &sprite_patterns) + t*128,128);
      000BF9 11r00r00         [10] 2008 	ld	de, #_sprite_patterns
      000BFC 69               [ 4] 2009 	ld	l, c
                                   2010 ;	spillPairReg hl
                                   2011 ;	spillPairReg hl
                                   2012 ;	spillPairReg hl
                                   2013 ;	spillPairReg hl
      000BFD AF               [ 4] 2014 	xor	a, a
      000BFE 67               [ 4] 2015 	ld	h, a
      000BFF CB 1C            [ 8] 2016 	rr	h
      000C01 65               [ 4] 2017 	ld	h, l
      000C02 CB 1C            [ 8] 2018 	rr	h
      000C04 1F               [ 4] 2019 	rra
      000C05 6F               [ 4] 2020 	ld	l, a
                                   2021 ;	spillPairReg hl
                                   2022 ;	spillPairReg hl
      000C06 19               [11] 2023 	add	hl, de
      000C07 C5               [11] 2024 	push	bc
      000C08 11 80 00         [10] 2025 	ld	de, #0x0080
      000C0B CDr16r0C         [17] 2026 	call	_VramWrite
      000C0E C1               [10] 2027 	pop	bc
                                   2028 ;src\mytestrom.c:1297: for (t=0; t<MaxObjNum; t++) {	
      000C0F 0C               [ 4] 2029 	inc	c
      000C10 79               [ 4] 2030 	ld	a, c
      000C11 D6 08            [ 7] 2031 	sub	a, #0x08
      000C13 38 E4            [12] 2032 	jr	C, 00108$
                                   2033 ;src\mytestrom.c:1300: }
      000C15 C9               [10] 2034 	ret
                                   2035 ;src\mytestrom.c:1302: void VramWrite(unsigned int addr, unsigned int len) __sdcccall(1) __naked
                                   2036 ;	---------------------------------
                                   2037 ; Function VramWrite
                                   2038 ; ---------------------------------
      000C16                       2039 _VramWrite::
                                   2040 ;src\mytestrom.c:1315: __endasm;		
      000C16 0E 98            [ 7] 2041 	ld	c,#0x98
      000C18                       2042 	095$:
      000C18 ED A3            [16] 2043 	outi
      000C1A 1B               [ 6] 2044 	dec	de
      000C1B 7A               [ 4] 2045 	ld	a,d
      000C1C B3               [ 4] 2046 	or	a,e
      000C1D 20 F9            [12] 2047 	jr	nz,095$
      000C1F C9               [10] 2048 	ret
                                   2049 ;src\mytestrom.c:1316: }
                                   2050 ;src\mytestrom.c:1318: void SetVramR14( unsigned int addr) __sdcccall(1) __naked __preserves_regs(b,c,d,e,h,l,iyl,iyh) 
                                   2051 ;	---------------------------------
                                   2052 ; Function SetVramR14
                                   2053 ; ---------------------------------
      000C20                       2054 _SetVramR14::
                                   2055 ;src\mytestrom.c:1329: __endasm;		
      000C20 7D               [ 4] 2056 	ld	a,l
      000C21 F3               [ 4] 2057 	di
      000C22 D3 99            [11] 2058 	out	(#0x99),a
      000C24 7C               [ 4] 2059 	ld	a,h
      000C25 FB               [ 4] 2060 	ei
      000C26 D3 99            [11] 2061 	out	(#0x99),a
      000C28 C9               [10] 2062 	ret
                                   2063 ;src\mytestrom.c:1330: }
                                   2064 ;src\mytestrom.c:1331: void SetVramW14( unsigned int addr) __sdcccall(1) __naked __preserves_regs(b,c,d,e,h,l,iyl,iyh) 
                                   2065 ;	---------------------------------
                                   2066 ; Function SetVramW14
                                   2067 ; ---------------------------------
      000C29                       2068 _SetVramW14::
                                   2069 ;src\mytestrom.c:1343: __endasm;		
      000C29 7D               [ 4] 2070 	ld	a,l
      000C2A F3               [ 4] 2071 	di
      000C2B D3 99            [11] 2072 	out	(#0x99),a
      000C2D 7C               [ 4] 2073 	ld	a,h
      000C2E F6 40            [ 7] 2074 	or	a,#0x40
      000C30 FB               [ 4] 2075 	ei
      000C31 D3 99            [11] 2076 	out	(#0x99),a
      000C33 C9               [10] 2077 	ret
                                   2078 ;src\mytestrom.c:1344: }
                                   2079 ;src\mytestrom.c:1345: void SetVramW(char page, unsigned int addr) __sdcccall(1) __naked __preserves_regs(b,c,h,l,iyl,iyh) 
                                   2080 ;	---------------------------------
                                   2081 ; Function SetVramW
                                   2082 ; ---------------------------------
      000C34                       2083 _SetVramW::
                                   2084 ;src\mytestrom.c:1369: __endasm;		
                                   2085 ;	Set VDP address counter to write from address ADE (17-bit)
                                   2086 ;	Enables the interrupts
      000C34 CB 02            [ 8] 2087 	rlc	d
      000C36 17               [ 4] 2088 	rla
      000C37 CB 02            [ 8] 2089 	rlc	d
      000C39 17               [ 4] 2090 	rla
      000C3A CB 3A            [ 8] 2091 	srl	d
      000C3C CB 3A            [ 8] 2092 	srl	d
      000C3E F3               [ 4] 2093 	di
      000C3F D3 99            [11] 2094 	out	(#0x99),a
      000C41 3E 8E            [ 7] 2095 	ld	a,#0x8E
      000C43 D3 99            [11] 2096 	out	(#0x99),a
      000C45 7B               [ 4] 2097 	ld	a,e
      000C46 D3 99            [11] 2098 	out	(#0x99),a
      000C48 7A               [ 4] 2099 	ld	a,d
      000C49 F6 40            [ 7] 2100 	or	a,#0x40
      000C4B FB               [ 4] 2101 	ei
      000C4C D3 99            [11] 2102 	out	(#0x99),a
      000C4E C9               [10] 2103 	ret
                                   2104 ;src\mytestrom.c:1370: }
                                   2105 ;src\mytestrom.c:1373: void SetVramR(char page, unsigned int addr) __sdcccall(1) __naked __preserves_regs(b,c,h,l,iyl,iyh) 
                                   2106 ;	---------------------------------
                                   2107 ; Function SetVramR
                                   2108 ; ---------------------------------
      000C4F                       2109 _SetVramR::
                                   2110 ;src\mytestrom.c:1396: __endasm;		
                                   2111 ;	Set VDP address counter to write from address ADE (17-bit)
                                   2112 ;	Enables the interrupts
      000C4F CB 02            [ 8] 2113 	rlc	d
      000C51 17               [ 4] 2114 	rla
      000C52 CB 02            [ 8] 2115 	rlc	d
      000C54 17               [ 4] 2116 	rla
      000C55 CB 3A            [ 8] 2117 	srl	d
      000C57 CB 3A            [ 8] 2118 	srl	d
      000C59 F3               [ 4] 2119 	di
      000C5A D3 99            [11] 2120 	out	(#0x99),a
      000C5C 3E 8E            [ 7] 2121 	ld	a,#0x8E
      000C5E D3 99            [11] 2122 	out	(#0x99),a
      000C60 7B               [ 4] 2123 	ld	a,e
      000C61 D3 99            [11] 2124 	out	(#0x99),a
      000C63 7A               [ 4] 2125 	ld	a,d ; set for reading
      000C64 FB               [ 4] 2126 	ei
      000C65 D3 99            [11] 2127 	out	(#0x99),a
      000C67 C9               [10] 2128 	ret
                                   2129 ;src\mytestrom.c:1397: }
                                   2130 ;src\mytestrom.c:1399: void chgmod(char c) __sdcccall(1) __naked {
                                   2131 ;	---------------------------------
                                   2132 ; Function chgmod
                                   2133 ; ---------------------------------
      000C68                       2134 _chgmod::
                                   2135 ;src\mytestrom.c:1403: __endasm;
      000C68 C3 5F 00         [10] 2136 	jp	0x005f
                                   2137 ;src\mytestrom.c:1404: }
                                   2138 ;src\mytestrom.c:1406: void putch(char c) __sdcccall(1) __naked {
                                   2139 ;	---------------------------------
                                   2140 ; Function putch
                                   2141 ; ---------------------------------
      000C6B                       2142 _putch::
                                   2143 ;src\mytestrom.c:1410: __endasm;
      000C6B C3 A2 00         [10] 2144 	jp	0x00a2
                                   2145 ;src\mytestrom.c:1411: }
                                   2146 ;src\mytestrom.c:1414: void	myHMMV( unsigned int DX, unsigned int DY, unsigned int NX, unsigned int NY, char COL) __sdcccall(0) __naked
                                   2147 ;	---------------------------------
                                   2148 ; Function myHMMV
                                   2149 ; ---------------------------------
      000C6E                       2150 _myHMMV::
                                   2151 ;src\mytestrom.c:1477: __endasm;
                                   2152 ;****************************************************************
                                   2153 ;	HMMV painting the rectangle in high speed Eric
                                   2154 ;	void HMMV( unsigned int XS, unsigned int YS, unsigned int DX, unsigned int DY, char COL);
                                   2155 ;
                                   2156 ;****************************************************************
      000C6E DD E5            [15] 2157 	push	ix
      000C70 DD 21 00 00      [14] 2158 	ld	ix,#0
      000C74 DD 39            [15] 2159 	add	ix,sp
      000C76 F3               [ 4] 2160 	di
      000C77 CDr2Er0D         [17] 2161 	call	_myVDPready
      000C7A 3E 24            [ 7] 2162 	ld	a,#36
      000C7C D3 99            [11] 2163 	out	(#0x99),a
      000C7E 3E 91            [ 7] 2164 	ld	a,#128+#17
      000C80 D3 99            [11] 2165 	out	(#0x99),a ;R#17 := 36
      000C82 0E 9B            [ 7] 2166 	ld	c,#0x9b
      000C84 DD 7E 04         [19] 2167 	ld	a,4(ix) ;
      000C87 ED 79            [12] 2168 	out	(c),a ; R36 DX low byte
      000C89 DD 7E 05         [19] 2169 	ld	a,5(ix) ;
      000C8C ED 79            [12] 2170 	out	(c),a ; R37 DX high byte
      000C8E DD 7E 06         [19] 2171 	ld	a,6(ix) ;
      000C91 ED 79            [12] 2172 	out	(c),a ; R38 DY low byte
      000C93 DD 7E 07         [19] 2173 	ld	a,7(ix) ;
      000C96 ED 79            [12] 2174 	out	(c),a ; R39 DY high byte
      000C98 DD 7E 08         [19] 2175 	ld	a,8(ix) ;
      000C9B ED 79            [12] 2176 	out	(c),a ; R40 NX low byte
      000C9D DD 7E 09         [19] 2177 	ld	a,9(ix) ;
      000CA0 ED 79            [12] 2178 	out	(c),a ; R41 NX high byte
      000CA2 DD 7E 0A         [19] 2179 	ld	a,10(ix) ;
      000CA5 ED 79            [12] 2180 	out	(c),a ; R42 NY low byte
      000CA7 DD 7E 0B         [19] 2181 	ld	a,11(ix) ;
      000CAA ED 79            [12] 2182 	out	(c),a ; R43 NY high byte
      000CAC DD 7E 0C         [19] 2183 	ld	a,12(ix) ;
      000CAF ED 79            [12] 2184 	out	(c),a ; R44 COL low byte
      000CB1 AF               [ 4] 2185 	xor	a ;
      000CB2 ED 79            [12] 2186 	out	(c),a ; R45 DIX and DIY ! DX and DY express in incremental direction ! internal VRAM
      000CB4 F6 C0            [ 7] 2187 	or	#0b11000000 ;HMMV command
      000CB6 ED 79            [12] 2188 	out	(c),a ;do it
      000CB8 FB               [ 4] 2189 	ei
      000CB9 DD E1            [14] 2190 	pop	ix
      000CBB C9               [10] 2191 	ret
                                   2192 ;src\mytestrom.c:1478: }
                                   2193 ;src\mytestrom.c:1481: void SetDisplayPage(char n) __z88dk_fastcall
                                   2194 ;	---------------------------------
                                   2195 ; Function SetDisplayPage
                                   2196 ; ---------------------------------
      000CBC                       2197 _SetDisplayPage::
                                   2198 ;src\mytestrom.c:1508: __endasm;
                                   2199 ;----------------------------
                                   2200 ;	void SetDisplayPage(char n)
                                   2201 ;	MSX2 Show the specified VRAM Page at Screen
                                   2202 ;
      000CBC 7D               [ 4] 2203 	ld	a,l
      000CBD 17               [ 4] 2204 	rla
      000CBE 17               [ 4] 2205 	rla
      000CBF 17               [ 4] 2206 	rla
      000CC0 17               [ 4] 2207 	rla
      000CC1 17               [ 4] 2208 	rla
      000CC2 E6 7F            [ 7] 2209 	and	#0x7F
      000CC4 F6 1F            [ 7] 2210 	or	#0x1F
      000CC6 47               [ 4] 2211 	ld	b,a
      000CC7 3E 02            [ 7] 2212 	ld	a,#2
      000CC9 F6 80            [ 7] 2213 	or	#0x80
      000CCB 0E 99            [ 7] 2214 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000CCD F3               [ 4] 2215 	di
      000CCE ED 41            [12] 2216 	out	(c), b ;; out data
      000CD0 ED 79            [12] 2217 	out	(c), a ;; out VDP register number
      000CD2 FB               [ 4] 2218 	ei
      000CD3 32 F5 FA         [13] 2219 	ld	(#0xFAF5),a ;; DPPAGE
                                   2220 ;src\mytestrom.c:1509: }
      000CD6 C9               [10] 2221 	ret
                                   2222 ;src\mytestrom.c:1514: void VDPlineSwitch(void) 
                                   2223 ;	---------------------------------
                                   2224 ; Function VDPlineSwitch
                                   2225 ; ---------------------------------
      000CD7                       2226 _VDPlineSwitch::
                                   2227 ;src\mytestrom.c:1525: __endasm;
      000CD7 3A E8 FF         [13] 2228 	ld	a,(#_RG9SAV)
      000CDA EE 80            [ 7] 2229 	xor	a,#0b10000000
      000CDC 32 E8 FF         [13] 2230 	ld	(#_RG9SAV),a
      000CDF 47               [ 4] 2231 	ld	b,a
      000CE0 3E 89            [ 7] 2232 	ld	a,#0x89
      000CE2 0E 99            [ 7] 2233 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000CE4 ED 41            [12] 2234 	out	(c), b ;; out data
      000CE6 ED 79            [12] 2235 	out	(c), a ;; out VDP register number
                                   2236 ;src\mytestrom.c:1526: }
      000CE8 C9               [10] 2237 	ret
                                   2238 ;src\mytestrom.c:1528: void VDP60Hz(void)
                                   2239 ;	---------------------------------
                                   2240 ; Function VDP60Hz
                                   2241 ; ---------------------------------
      000CE9                       2242 _VDP60Hz::
                                   2243 ;src\mytestrom.c:1539: __endasm;
      000CE9 3A E8 FF         [13] 2244 	ld	a,(#_RG9SAV)
      000CEC E6 FD            [ 7] 2245 	and	#0b11111101
      000CEE 32 E8 FF         [13] 2246 	ld	(#_RG9SAV),a
      000CF1 47               [ 4] 2247 	ld	b,a
      000CF2 3E 89            [ 7] 2248 	ld	a,#0x89
      000CF4 0E 99            [ 7] 2249 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000CF6 ED 41            [12] 2250 	out	(c), b ;; out data
      000CF8 ED 79            [12] 2251 	out	(c), a ;; out VDP register number
                                   2252 ;src\mytestrom.c:1540: }
      000CFA C9               [10] 2253 	ret
                                   2254 ;src\mytestrom.c:1542: void PrintChar(char c) 
                                   2255 ;	---------------------------------
                                   2256 ; Function PrintChar
                                   2257 ; ---------------------------------
      000CFB                       2258 _PrintChar::
                                   2259 ;src\mytestrom.c:1553: __endasm;
      000CFB DD E5            [15] 2260 	push	ix
      000CFD DD 21 00 00      [14] 2261 	ld	ix,#0
      000D01 DD 39            [15] 2262 	add	ix,sp
      000D03 DD 7E 04         [19] 2263 	ld	a,4(ix)
      000D06 CD A2 00         [17] 2264 	call	#0xA2 ; Bios CHPUT
      000D09 FB               [ 4] 2265 	ei
      000D0A DD E1            [14] 2266 	pop	ix
                                   2267 ;src\mytestrom.c:1554: }
      000D0C C9               [10] 2268 	ret
                                   2269 ;src\mytestrom.c:1583: void Print(char* text)
                                   2270 ;	---------------------------------
                                   2271 ; Function Print
                                   2272 ; ---------------------------------
      000D0D                       2273 _Print::
                                   2274 ;src\mytestrom.c:1587: while(*(text)) 
      000D0D                       2275 00104$:
      000D0D 7E               [ 7] 2276 	ld	a, (hl)
      000D0E B7               [ 4] 2277 	or	a, a
      000D0F C8               [11] 2278 	ret	Z
                                   2279 ;src\mytestrom.c:1589: character=*(text++);
      000D10 23               [ 6] 2280 	inc	hl
                                   2281 ;src\mytestrom.c:1590: if (character=='\n')
      000D11 4F               [ 4] 2282 	ld	c, a
      000D12 D6 0A            [ 7] 2283 	sub	a, #0x0a
      000D14 20 0F            [12] 2284 	jr	NZ, 00102$
                                   2285 ;src\mytestrom.c:1592: PrintChar(10); //LF (Line Feed)
      000D16 E5               [11] 2286 	push	hl
      000D17 3E 0A            [ 7] 2287 	ld	a, #0x0a
      000D19 CDrFBr0C         [17] 2288 	call	_PrintChar
      000D1C 3E 0D            [ 7] 2289 	ld	a, #0x0d
      000D1E CDrFBr0C         [17] 2290 	call	_PrintChar
      000D21 E1               [10] 2291 	pop	hl
      000D22 C3r0Dr0D         [10] 2292 	jp	00104$
      000D25                       2293 00102$:
                                   2294 ;src\mytestrom.c:1595: PrintChar(character);
      000D25 E5               [11] 2295 	push	hl
      000D26 79               [ 4] 2296 	ld	a, c
      000D27 CDrFBr0C         [17] 2297 	call	_PrintChar
      000D2A E1               [10] 2298 	pop	hl
                                   2299 ;src\mytestrom.c:1598: }
      000D2B C3r0Dr0D         [10] 2300 	jp	00104$
                                   2301 ;src\mytestrom.c:1601: void     myVDPready(void) __naked															// Check if MSX2 VDP is ready (Internal Use)
                                   2302 ;	---------------------------------
                                   2303 ; Function myVDPready
                                   2304 ; ---------------------------------
      000D2E                       2305 _myVDPready::
                                   2306 ;src\mytestrom.c:1617: __endasm; 
      000D2E                       2307 	    checkIfReady:
      000D2E 3E 02            [ 7] 2308 	ld	a,#2
      000D30 D3 99            [11] 2309 	out	(#0x99),a ; wait till previous VDP execution is over (CE)
      000D32 3E 8F            [ 7] 2310 	ld	a,#128+#15
      000D34 D3 99            [11] 2311 	out	(#0x99),a
      000D36 DB 99            [11] 2312 	in	a,(#0x99)
      000D38 1F               [ 4] 2313 	rra	; check CE (bit#0)
      000D39 3E 00            [ 7] 2314 	ld	a, #0
      000D3B D3 99            [11] 2315 	out	(#0x99),a
      000D3D 3E 8F            [ 7] 2316 	ld	a,#128+#15
      000D3F D3 99            [11] 2317 	out	(#0x99),a
      000D41 DAr2Er0D         [10] 2318 	jp	c, checkIfReady
      000D44 C9               [10] 2319 	ret
                                   2320 ;src\mytestrom.c:1618: }
                                   2321 	.area _BANK0
                                   2322 	.area _INITIALIZER
                                   2323 	.area _CABS (ABS)
