                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13049 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module mytestrom
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _PrintChar
                                     12 	.globl _PlotOneColumnTileAndMask
                                     13 	.globl _PlotOneColumnTile
                                     14 	.globl _main
                                     15 	.globl b_DataLevelMap
                                     16 	.globl _DataLevelMap
                                     17 	.globl _sprite_colors
                                     18 	.globl _sprite_patterns
                                     19 	.globl _v
                                     20 	.globl _x
                                     21 	.globl _y
                                     22 	.globl _u
                                     23 	.globl _object
                                     24 	.globl _RG18SA
                                     25 	.globl _RG17SA
                                     26 	.globl _RG16SA
                                     27 	.globl _RG15SA
                                     28 	.globl _RG14SA
                                     29 	.globl _RG13SA
                                     30 	.globl _RG12SA
                                     31 	.globl _RG11SA
                                     32 	.globl _RG10SA
                                     33 	.globl _RG9SAV
                                     34 	.globl _RG8SAV
                                     35 	.globl _RG1SAV
                                     36 	.globl _RG0SAV
                                     37 	.globl _LevelMap
                                     38 	.globl _cursat
                                     39 	.globl _OldIsr
                                     40 	.globl _page
                                     41 	.globl _newx
                                     42 	.globl _WLevelDY
                                     43 	.globl _WLevelDX
                                     44 	.globl _LevelH
                                     45 	.globl _LevelW
                                     46 	.globl _WLevely
                                     47 	.globl _WLevelx
                                     48 	.globl _ScrollRight
                                     49 	.globl _ScrollLeft
                                     50 	.globl _BorderLinesL
                                     51 	.globl _BorderLinesR
                                     52 	.globl _NewLine
                                     53 	.globl _PatchPlotOneTile
                                     54 	.globl _myVDPwrite
                                     55 	.globl _myfVDP
                                     56 	.globl _mySetAdjust
                                     57 	.globl _myFT_wait
                                     58 	.globl _WaitLineInt
                                     59 	.globl _FT_errorHandler
                                     60 	.globl _MyLoadMap
                                     61 	.globl _myISR
                                     62 	.globl _myInstISR
                                     63 	.globl _myISRrestore
                                     64 	.globl _myCheckkbd
                                     65 	.globl _ObjectsInit
                                     66 	.globl _ObjectstoVRAM
                                     67 	.globl _UpdateColor
                                     68 	.globl _UpdateFrame
                                     69 	.globl _SprtInit
                                     70 	.globl _VramWrite
                                     71 	.globl _SetVramW
                                     72 	.globl _chgmod
                                     73 	.globl _putch
                                     74 	.globl _myHMMV
                                     75 	.globl _SetDisplayPage
                                     76 	.globl _VDPlineSwitch
                                     77 	.globl _VDP60Hz
                                     78 	.globl _Print
                                     79 	.globl _myVDPready
                                     80 ;--------------------------------------------------------
                                     81 ; special function registers
                                     82 ;--------------------------------------------------------
                           000098    83 _Port98	=	0x0098
                           000099    84 _Port99	=	0x0099
                                     85 ;--------------------------------------------------------
                                     86 ; ram data
                                     87 ;--------------------------------------------------------
                                     88 	.area _DATA
      000000                         89 _MyCommand:
      000000                         90 	.ds 15
      00000F                         91 _MyBorder:
      00000F                         92 	.ds 15
      00001E                         93 _WLevelx::
      00001E                         94 	.ds 2
      000020                         95 _WLevely::
      000020                         96 	.ds 1
      000021                         97 _LevelW::
      000021                         98 	.ds 1
      000022                         99 _LevelH::
      000022                        100 	.ds 1
      000023                        101 _WLevelDX::
      000023                        102 	.ds 2
      000025                        103 _WLevelDY::
      000025                        104 	.ds 2
      000027                        105 _newx::
      000027                        106 	.ds 1
      000028                        107 _page::
      000028                        108 	.ds 1
      000029                        109 _OldIsr::
      000029                        110 	.ds 3
      00002C                        111 _cursat::
      00002C                        112 	.ds 1
      00002D                        113 _LevelMap::
      00002D                        114 	.ds 2816
      000B2D                        115 _p:
      000B2D                        116 	.ds 2
                           00F3DF   117 _RG0SAV	=	0xf3df
                           00F3E0   118 _RG1SAV	=	0xf3e0
                           00FFE7   119 _RG8SAV	=	0xffe7
                           00FFE8   120 _RG9SAV	=	0xffe8
                           00FFE9   121 _RG10SA	=	0xffe9
                           00FFEA   122 _RG11SA	=	0xffea
                           00FFEB   123 _RG12SA	=	0xffeb
                           00FFEC   124 _RG13SA	=	0xffec
                           00FFED   125 _RG14SA	=	0xffed
                           00FFEE   126 _RG15SA	=	0xffee
                           00FFEF   127 _RG16SA	=	0xffef
                           00FFF0   128 _RG17SA	=	0xfff0
                           00FFF1   129 _RG18SA	=	0xfff1
      000B2F                        130 _object::
      000B2F                        131 	.ds 56
      000B67                        132 _u::
      000B67                        133 	.ds 2
      000B69                        134 _y::
      000B69                        135 	.ds 1
      000B6A                        136 _x::
      000B6A                        137 	.ds 1
      000B6B                        138 _v::
      000B6B                        139 	.ds 1
                                    140 ;--------------------------------------------------------
                                    141 ; ram data
                                    142 ;--------------------------------------------------------
                                    143 	.area _INITIALIZED
                                    144 ;--------------------------------------------------------
                                    145 ; absolute external ram data
                                    146 ;--------------------------------------------------------
                                    147 	.area _DABS (ABS)
                                    148 ;--------------------------------------------------------
                                    149 ; global & static initialisations
                                    150 ;--------------------------------------------------------
                                    151 	.area _HOME
                                    152 	.area _GSINIT
                                    153 	.area _GSFINAL
                                    154 	.area _GSINIT
                                    155 ;--------------------------------------------------------
                                    156 ; Home
                                    157 ;--------------------------------------------------------
                                    158 	.area _HOME
                                    159 	.area _HOME
                                    160 ;--------------------------------------------------------
                                    161 ; code
                                    162 ;--------------------------------------------------------
                                    163 	.area _BANK0
                                    164 ;src\mytestrom.c:61: void main(void) 
                                    165 ;	---------------------------------
                                    166 ; Function main
                                    167 ; ---------------------------------
      000000                        168 _main::
                                    169 ;src\mytestrom.c:65: rd = ReadMSXtype();					  	// Read MSX Type
      000000 3A 2D 00         [13]  170 	ld	a, (#0x002d)
                                    171 ;src\mytestrom.c:67: if (rd==0) FT_errorHandler(3,"msx 1 ");	// If MSX1 got to Error !
      000003 B7               [ 4]  172 	or	a, a
      000004 20 08            [12]  173 	jr	NZ, 00102$
      000006 11r92r01         [10]  174 	ld	de, #___str_0
      000009 3E 03            [ 7]  175 	ld	a, #0x03
      00000B CDr4Fr07         [17]  176 	call	_FT_errorHandler
      00000E                        177 00102$:
                                    178 ;src\mytestrom.c:69: MyLoadMap(1,LevelMap);					// load level map 256x11 arranged by columns
      00000E 11r2Dr00         [10]  179 	ld	de, #_LevelMap
      000011 3E 01            [ 7]  180 	ld	a, #0x01
      000013 CDr0Cr08         [17]  181 	call	_MyLoadMap
                                    182 ;src\mytestrom.c:71: chgmod(8);						  		// Init Screen 8
      000016 3E 08            [ 7]  183 	ld	a, #0x08
      000018 CDr29r0C         [17]  184 	call	_chgmod
                                    185 ;src\mytestrom.c:72: myVDPwrite(0,7);						// borders	
      00001B 2E 07            [ 7]  186 	ld	l, #0x07
                                    187 ;	spillPairReg hl
                                    188 ;	spillPairReg hl
      00001D AF               [ 4]  189 	xor	a, a
      00001E CDrCAr06         [17]  190 	call	_myVDPwrite
                                    191 ;src\mytestrom.c:73: VDPlineSwitch();						// 192 lines
      000021 CDr98r0C         [17]  192 	call	_VDPlineSwitch
                                    193 ;src\mytestrom.c:75: VDP60Hz();
      000024 CDrAAr0C         [17]  194 	call	_VDP60Hz
                                    195 ;src\mytestrom.c:77: myHMMV(0,0,256,512, 0);					// Clear all VRAM  by Byte 0 (Black)
      000027 AF               [ 4]  196 	xor	a, a
      000028 F5               [11]  197 	push	af
      000029 33               [ 6]  198 	inc	sp
      00002A 21 00 02         [10]  199 	ld	hl, #0x0200
      00002D E5               [11]  200 	push	hl
      00002E 26 01            [ 7]  201 	ld	h, #0x01
      000030 E5               [11]  202 	push	hl
      000031 65               [ 4]  203 	ld	h, l
      000032 E5               [11]  204 	push	hl
      000033 E5               [11]  205 	push	hl
      000034 CDr2Fr0C         [17]  206 	call	_myHMMV
      000037 21 09 00         [10]  207 	ld	hl, #9
      00003A 39               [11]  208 	add	hl, sp
      00003B F9               [ 6]  209 	ld	sp, hl
                                    210 ;src\/myheader.h:14: __endasm; 
      00003C F3               [ 4]  211 	di
                                    212 ;src\mytestrom.c:79: myVDPready();								// wait for command completion
      00003D CDrEFr0C         [17]  213 	call	_myVDPready
                                    214 ;src\/myheader.h:8: __endasm; 
      000040 FB               [ 4]  215 	ei
                                    216 ;src\mytestrom.c:82: ObjectsInit();							// initialize logical object 
      000041 CDrEEr08         [17]  217 	call	_ObjectsInit
                                    218 ;src\mytestrom.c:83: SprtInit();								// initialize sprites in VRAM 
      000044 CDr54r0B         [17]  219 	call	_SprtInit
                                    220 ;src\mytestrom.c:85: myInstISR();							// install a fake ISR to cut the overhead
      000047 CDrA2r08         [17]  221 	call	_myInstISR
                                    222 ;src\mytestrom.c:87: page = 0;
      00004A 21r28r00         [10]  223 	ld	hl, #_page
      00004D 36 00            [10]  224 	ld	(hl), #0x00
                                    225 ;src\mytestrom.c:88: mySetAdjust(0,8);						// same as myVDPwrite((0-8) & 15,18);	
      00004F 2E 08            [ 7]  226 	ld	l, #0x08
                                    227 ;	spillPairReg hl
                                    228 ;	spillPairReg hl
      000051 AF               [ 4]  229 	xor	a, a
      000052 CDr14r07         [17]  230 	call	_mySetAdjust
                                    231 ;src\mytestrom.c:90: for (WLevelx = 0;WLevelx<0+WindowW;) {
      000055 21 00 00         [10]  232 	ld	hl, #0x0000
      000058 22r1Er00         [16]  233 	ld	(_WLevelx), hl
      00005B                        234 00117$:
                                    235 ;src\mytestrom.c:91: myFT_wait(1);		
      00005B 3E 01            [ 7]  236 	ld	a, #0x01
      00005D CDr31r07         [17]  237 	call	_myFT_wait
                                    238 ;src\mytestrom.c:92: NewLine(WLevelx,0,WLevelx);WLevelx++;
      000060 3Ar1Er00         [13]  239 	ld	a, (_WLevelx+0)
      000063 4F               [ 4]  240 	ld	c, a
      000064 2Ar1Er00         [16]  241 	ld	hl, (_WLevelx)
      000067 E5               [11]  242 	push	hl
      000068 2E 00            [ 7]  243 	ld	l, #0x00
                                    244 ;	spillPairReg hl
                                    245 ;	spillPairReg hl
      00006A 79               [ 4]  246 	ld	a, c
      00006B CDrFAr05         [17]  247 	call	_NewLine
      00006E 2Ar1Er00         [16]  248 	ld	hl, (_WLevelx)
      000071 23               [ 6]  249 	inc	hl
                                    250 ;src\mytestrom.c:93: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      000072 22r1Er00         [16]  251 	ld	(_WLevelx), hl
      000075 3E F0            [ 7]  252 	ld	a, #0xf0
      000077 95               [ 4]  253 	sub	a, l
      000078 5F               [ 4]  254 	ld	e, a
      000079 9F               [ 4]  255 	sbc	a, a
      00007A 94               [ 4]  256 	sub	a, h
      00007B 57               [ 4]  257 	ld	d, a
      00007C 3Ar1Er00         [13]  258 	ld	a, (_WLevelx+0)
      00007F 4F               [ 4]  259 	ld	c, a
      000080 3E F0            [ 7]  260 	ld	a, #0xf0
      000082 91               [ 4]  261 	sub	a, c
      000083 4F               [ 4]  262 	ld	c, a
      000084 D5               [11]  263 	push	de
      000085 2E 00            [ 7]  264 	ld	l, #0x00
                                    265 ;	spillPairReg hl
                                    266 ;	spillPairReg hl
      000087 79               [ 4]  267 	ld	a, c
      000088 CDrFAr05         [17]  268 	call	_NewLine
      00008B 2Ar1Er00         [16]  269 	ld	hl, (_WLevelx)
      00008E 23               [ 6]  270 	inc	hl
      00008F 22r1Er00         [16]  271 	ld	(_WLevelx), hl
                                    272 ;src\mytestrom.c:94: NewLine(WLevelx,0,WLevelx);WLevelx++;
      000092 3Ar1Er00         [13]  273 	ld	a, (_WLevelx+0)
      000095 4F               [ 4]  274 	ld	c, a
      000096 2Ar1Er00         [16]  275 	ld	hl, (_WLevelx)
      000099 E5               [11]  276 	push	hl
      00009A 2E 00            [ 7]  277 	ld	l, #0x00
                                    278 ;	spillPairReg hl
                                    279 ;	spillPairReg hl
      00009C 79               [ 4]  280 	ld	a, c
      00009D CDrFAr05         [17]  281 	call	_NewLine
      0000A0 2Ar1Er00         [16]  282 	ld	hl, (_WLevelx)
      0000A3 23               [ 6]  283 	inc	hl
                                    284 ;src\mytestrom.c:95: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      0000A4 22r1Er00         [16]  285 	ld	(_WLevelx), hl
      0000A7 3E F0            [ 7]  286 	ld	a, #0xf0
      0000A9 95               [ 4]  287 	sub	a, l
      0000AA 5F               [ 4]  288 	ld	e, a
      0000AB 9F               [ 4]  289 	sbc	a, a
      0000AC 94               [ 4]  290 	sub	a, h
      0000AD 57               [ 4]  291 	ld	d, a
      0000AE 3Ar1Er00         [13]  292 	ld	a, (_WLevelx+0)
      0000B1 4F               [ 4]  293 	ld	c, a
      0000B2 3E F0            [ 7]  294 	ld	a, #0xf0
      0000B4 91               [ 4]  295 	sub	a, c
      0000B5 4F               [ 4]  296 	ld	c, a
      0000B6 D5               [11]  297 	push	de
      0000B7 2E 00            [ 7]  298 	ld	l, #0x00
                                    299 ;	spillPairReg hl
                                    300 ;	spillPairReg hl
      0000B9 79               [ 4]  301 	ld	a, c
      0000BA CDrFAr05         [17]  302 	call	_NewLine
      0000BD 2Ar1Er00         [16]  303 	ld	hl, (_WLevelx)
      0000C0 23               [ 6]  304 	inc	hl
                                    305 ;src\mytestrom.c:90: for (WLevelx = 0;WLevelx<0+WindowW;) {
      0000C1 22r1Er00         [16]  306 	ld	(_WLevelx), hl
      0000C4 11 F0 00         [10]  307 	ld	de, #0x00f0
      0000C7 BF               [ 4]  308 	cp	a, a
      0000C8 ED 52            [15]  309 	sbc	hl, de
      0000CA 38 8F            [12]  310 	jr	C, 00117$
                                    311 ;src\mytestrom.c:98: WLevelx = 0;	
      0000CC 21 00 00         [10]  312 	ld	hl, #0x0000
      0000CF 22r1Er00         [16]  313 	ld	(_WLevelx), hl
                                    314 ;src\mytestrom.c:100: MyBorder.ny = WindowH;
      0000D2 2E B0            [ 7]  315 	ld	l, #0xb0
      0000D4 22r19r00         [16]  316 	ld	((_MyBorder + 10)), hl
                                    317 ;src\mytestrom.c:101: MyBorder.col = 0;
      0000D7 21r1Br00         [10]  318 	ld	hl, #(_MyBorder + 12)
      0000DA 36 00            [10]  319 	ld	(hl), #0x00
                                    320 ;src\mytestrom.c:102: MyBorder.param = 0;
      0000DC 21r1Cr00         [10]  321 	ld	hl, #(_MyBorder + 13)
      0000DF 36 00            [10]  322 	ld	(hl), #0x00
                                    323 ;src\mytestrom.c:103: MyBorder.cmd = opHMMV;
      0000E1 21r1Dr00         [10]  324 	ld	hl, #(_MyBorder + 14)
      0000E4 36 C0            [10]  325 	ld	(hl), #0xc0
                                    326 ;src\mytestrom.c:105: MyCommand.ny = WindowH;
      0000E6 21 B0 00         [10]  327 	ld	hl, #0x00b0
      0000E9 22r0Ar00         [16]  328 	ld	((_MyCommand + 10)), hl
                                    329 ;src\mytestrom.c:106: MyCommand.col = 0;
      0000EC 21r0Cr00         [10]  330 	ld	hl, #(_MyCommand + 12)
      0000EF 36 00            [10]  331 	ld	(hl), #0x00
                                    332 ;src\mytestrom.c:107: MyCommand.param = 0;
      0000F1 21r0Dr00         [10]  333 	ld	hl, #(_MyCommand + 13)
      0000F4 36 00            [10]  334 	ld	(hl), #0x00
                                    335 ;src\mytestrom.c:108: MyCommand.cmd = opHMMM;
      0000F6 21r0Er00         [10]  336 	ld	hl, #(_MyCommand + 14)
      0000F9 36 D0            [10]  337 	ld	(hl), #0xd0
                                    338 ;src\mytestrom.c:111: while (myCheckkbd(7)==0xFF)
      0000FB                        339 00112$:
      0000FB 3E 07            [ 7]  340 	ld	a, #0x07
      0000FD CDrE0r08         [17]  341 	call	_myCheckkbd
      000100 3C               [ 4]  342 	inc	a
      000101 C2r89r01         [10]  343 	jp	NZ,00114$
                                    344 ;src\mytestrom.c:113: WaitLineInt();			// wait for line 176-16
      000104 CDr38r07         [17]  345 	call	_WaitLineInt
                                    346 ;src\mytestrom.c:114: cursat^=1;				// swap sat 0 and sat 1
      000107 3Ar2Cr00         [13]  347 	ld	a, (_cursat+0)
      00010A EE 01            [ 7]  348 	xor	a, #0x01
      00010C 32r2Cr00         [13]  349 	ld	(_cursat+0), a
                                    350 ;src\mytestrom.c:116: if ((myCheckkbd(8)==0x7F) && (WLevelx<16*(LevelW-15)))  { 
      00010F 3E 08            [ 7]  351 	ld	a, #0x08
      000111 CDrE0r08         [17]  352 	call	_myCheckkbd
      000114 D6 7F            [ 7]  353 	sub	a, #0x7f
      000116 20 37            [12]  354 	jr	NZ, 00109$
      000118 3Ar21r00         [13]  355 	ld	a, (_LevelW+0)
      00011B 0E 00            [ 7]  356 	ld	c, #0x00
      00011D C6 F1            [ 7]  357 	add	a, #0xf1
      00011F 5F               [ 4]  358 	ld	e, a
      000120 79               [ 4]  359 	ld	a, c
      000121 CE FF            [ 7]  360 	adc	a, #0xff
      000123 57               [ 4]  361 	ld	d, a
      000124 EB               [ 4]  362 	ex	de, hl
      000125 29               [11]  363 	add	hl, hl
      000126 29               [11]  364 	add	hl, hl
      000127 29               [11]  365 	add	hl, hl
      000128 29               [11]  366 	add	hl, hl
      000129 EB               [ 4]  367 	ex	de, hl
      00012A 3Ar1Er00         [13]  368 	ld	a, (_WLevelx+0)
      00012D 93               [ 4]  369 	sub	a, e
      00012E 3Ar1Fr00         [13]  370 	ld	a, (_WLevelx+1)
      000131 9A               [ 4]  371 	sbc	a, d
      000132 E2r37r01         [10]  372 	jp	PO, 00170$
      000135 EE 80            [ 7]  373 	xor	a, #0x80
      000137                        374 00170$:
      000137 F2r4Fr01         [10]  375 	jp	P, 00109$
                                    376 ;src\mytestrom.c:117: WLevelx++;
      00013A 2Ar1Er00         [16]  377 	ld	hl, (_WLevelx)
      00013D 23               [ 6]  378 	inc	hl
                                    379 ;src\mytestrom.c:118: ObjectstoVRAM(WLevelx);			
      00013E 22r1Er00         [16]  380 	ld	(_WLevelx), hl
      000141 CDr90r09         [17]  381 	call	_ObjectstoVRAM
                                    382 ;src\mytestrom.c:119: ScrollRight(WLevelx & 15);
      000144 3Ar1Er00         [13]  383 	ld	a, (_WLevelx+0)
      000147 E6 0F            [ 7]  384 	and	a, #0x0f
      000149 CDr99r01         [17]  385 	call	_ScrollRight
      00014C C3rFBr00         [10]  386 	jp	00112$
      00014F                        387 00109$:
                                    388 ;src\mytestrom.c:121: else if ((myCheckkbd(8)==0xEF) && (WLevelx>0)) { 
      00014F 3E 08            [ 7]  389 	ld	a, #0x08
      000151 CDrE0r08         [17]  390 	call	_myCheckkbd
      000154 D6 EF            [ 7]  391 	sub	a, #0xef
      000156 20 28            [12]  392 	jr	NZ, 00105$
      000158 AF               [ 4]  393 	xor	a, a
      000159 FD 21r1Er00      [14]  394 	ld	iy, #_WLevelx
      00015D FD BE 00         [19]  395 	cp	a, 0 (iy)
      000160 FD 9E 01         [19]  396 	sbc	a, 1 (iy)
      000163 E2r68r01         [10]  397 	jp	PO, 00173$
      000166 EE 80            [ 7]  398 	xor	a, #0x80
      000168                        399 00173$:
      000168 F2r80r01         [10]  400 	jp	P, 00105$
                                    401 ;src\mytestrom.c:122: WLevelx--;
      00016B 2Ar1Er00         [16]  402 	ld	hl, (_WLevelx)
      00016E 2B               [ 6]  403 	dec	hl
                                    404 ;src\mytestrom.c:123: ObjectstoVRAM(WLevelx);			
      00016F 22r1Er00         [16]  405 	ld	(_WLevelx), hl
      000172 CDr90r09         [17]  406 	call	_ObjectstoVRAM
                                    407 ;src\mytestrom.c:124: ScrollLeft(WLevelx & 15);
      000175 3Ar1Er00         [13]  408 	ld	a, (_WLevelx+0)
      000178 E6 0F            [ 7]  409 	and	a, #0x0f
      00017A CDr62r02         [17]  410 	call	_ScrollLeft
      00017D C3rFBr00         [10]  411 	jp	00112$
      000180                        412 00105$:
                                    413 ;src\mytestrom.c:127: ObjectstoVRAM(WLevelx);						
      000180 2Ar1Er00         [16]  414 	ld	hl, (_WLevelx)
      000183 CDr90r09         [17]  415 	call	_ObjectstoVRAM
      000186 C3rFBr00         [10]  416 	jp	00112$
      000189                        417 00114$:
                                    418 ;src\mytestrom.c:131: myISRrestore();
      000189 CDrC2r08         [17]  419 	call	_myISRrestore
                                    420 ;src\mytestrom.c:132: chgmod(0);
      00018C AF               [ 4]  421 	xor	a, a
      00018D CDr29r0C         [17]  422 	call	_chgmod
                                    423 ;src\mytestrom.c:133: Reboot(0);
      000190 C7               [11]  424 	rst	#0
                                    425 ;src\mytestrom.c:134: }
      000191 C9               [10]  426 	ret
      000192                        427 ___str_0:
      000192 6D 73 78 20 31 20      428 	.ascii "msx 1 "
      000198 00                     429 	.db 0x00
                                    430 ;src\mytestrom.c:136: void ScrollRight(char step) __sdcccall(1) 
                                    431 ;	---------------------------------
                                    432 ; Function ScrollRight
                                    433 ; ---------------------------------
      000199                        434 _ScrollRight::
      000199 4F               [ 4]  435 	ld	c, a
                                    436 ;src\mytestrom.c:139: myVDPwrite((step-8) & 15,18);			
      00019A 41               [ 4]  437 	ld	b, c
      00019B 78               [ 4]  438 	ld	a, b
      00019C C6 F8            [ 7]  439 	add	a, #0xf8
      00019E E6 0F            [ 7]  440 	and	a, #0x0f
      0001A0 5F               [ 4]  441 	ld	e, a
      0001A1 C5               [11]  442 	push	bc
      0001A2 2E 12            [ 7]  443 	ld	l, #0x12
                                    444 ;	spillPairReg hl
                                    445 ;	spillPairReg hl
      0001A4 7B               [ 4]  446 	ld	a, e
      0001A5 CDrCAr06         [17]  447 	call	_myVDPwrite
      0001A8 C1               [10]  448 	pop	bc
                                    449 ;src\mytestrom.c:140: switch (step) {
      0001A9 79               [ 4]  450 	ld	a, c
      0001AA B7               [ 4]  451 	or	a, a
      0001AB 20 44            [12]  452 	jr	NZ, 00102$
                                    453 ;src\mytestrom.c:142: page ^=1;							// case 0
      0001AD 3Ar28r00         [13]  454 	ld	a, (_page+0)
      0001B0 EE 01            [ 7]  455 	xor	a, #0x01
      0001B2 32r28r00         [13]  456 	ld	(_page+0), a
                                    457 ;src\mytestrom.c:143: SetDisplayPage(page);
      0001B5 C5               [11]  458 	push	bc
      0001B6 3Ar28r00         [13]  459 	ld	a, (_page+0)
      0001B9 6F               [ 4]  460 	ld	l, a
                                    461 ;	spillPairReg hl
                                    462 ;	spillPairReg hl
      0001BA CDr7Dr0C         [17]  463 	call	_SetDisplayPage
      0001BD C1               [10]  464 	pop	bc
                                    465 ;src\mytestrom.c:144: MyBorder.dx = 240;
      0001BE 21 F0 00         [10]  466 	ld	hl, #0x00f0
      0001C1 22r13r00         [16]  467 	ld	((_MyBorder + 4)), hl
                                    468 ;src\mytestrom.c:145: MyBorder.nx = 15;
      0001C4 2E 0F            [ 7]  469 	ld	l, #0x0f
      0001C6 22r17r00         [16]  470 	ld	((_MyBorder + 8)), hl
                                    471 ;src\mytestrom.c:146: MyBorder.dy = 256*page;
      0001C9 3Ar28r00         [13]  472 	ld	a, (_page+0)
      0001CC 57               [ 4]  473 	ld	d, a
      0001CD 1E 00            [ 7]  474 	ld	e, #0x00
      0001CF ED 53r15r00      [20]  475 	ld	((_MyBorder + 6)), de
                                    476 ;src\mytestrom.c:147: myfVDP(&MyBorder);
      0001D3 C5               [11]  477 	push	bc
      0001D4 21r0Fr00         [10]  478 	ld	hl, #_MyBorder
      0001D7 CDrD4r06         [17]  479 	call	_myfVDP
      0001DA C1               [10]  480 	pop	bc
                                    481 ;src\mytestrom.c:148: BorderLinesR(WindowW-1,page, WLevelx+WindowW-1);		
      0001DB 2Ar1Er00         [16]  482 	ld	hl, (_WLevelx)
      0001DE 11 EF 00         [10]  483 	ld	de, #0x00ef
      0001E1 19               [11]  484 	add	hl, de
      0001E2 C5               [11]  485 	push	bc
      0001E3 E5               [11]  486 	push	hl
      0001E4 3Ar28r00         [13]  487 	ld	a, (_page+0)
      0001E7 6F               [ 4]  488 	ld	l, a
                                    489 ;	spillPairReg hl
                                    490 ;	spillPairReg hl
      0001E8 3E EF            [ 7]  491 	ld	a, #0xef
      0001EA CDr71r05         [17]  492 	call	_BorderLinesR
      0001ED C1               [10]  493 	pop	bc
                                    494 ;src\mytestrom.c:149: break;
      0001EE C3r46r02         [10]  495 	jp	00103$
                                    496 ;src\mytestrom.c:150: default:								// case 1-15
      0001F1                        497 00102$:
                                    498 ;src\mytestrom.c:151: MyCommand.sx = 16*step;
      0001F1 59               [ 4]  499 	ld	e, c
      0001F2 16 00            [ 7]  500 	ld	d, #0x00
      0001F4 EB               [ 4]  501 	ex	de, hl
      0001F5 29               [11]  502 	add	hl, hl
      0001F6 29               [11]  503 	add	hl, hl
      0001F7 29               [11]  504 	add	hl, hl
      0001F8 29               [11]  505 	add	hl, hl
      0001F9 EB               [ 4]  506 	ex	de, hl
      0001FA ED 53r00r00      [20]  507 	ld	(_MyCommand), de
                                    508 ;src\mytestrom.c:152: MyCommand.dx = MyCommand.sx - 16;;
      0001FE 2Ar00r00         [16]  509 	ld	hl, (#_MyCommand + 0)
      000201 11 F0 FF         [10]  510 	ld	de, #0xfff0
      000204 19               [11]  511 	add	hl, de
      000205 5D               [ 4]  512 	ld	e, l
      000206 7C               [ 4]  513 	ld	a,h
      000207 57               [ 4]  514 	ld	d,a
      000208 ED 53r04r00      [20]  515 	ld	((_MyCommand + 4)), de
                                    516 ;src\mytestrom.c:153: MyCommand.sy = 256*page;
      00020C 3Ar28r00         [13]  517 	ld	a, (_page+0)
      00020F 57               [ 4]  518 	ld	d, a
      000210 1E 00            [ 7]  519 	ld	e, #0x00
      000212 ED 53r02r00      [20]  520 	ld	((_MyCommand + 2)), de
                                    521 ;src\mytestrom.c:154: MyCommand.dy = MyCommand.sy ^ 256;
      000216 ED 5Br02r00      [20]  522 	ld	de, (#(_MyCommand + 2) + 0)
      00021A 7A               [ 4]  523 	ld	a, d
      00021B EE 01            [ 7]  524 	xor	a, #0x01
      00021D 57               [ 4]  525 	ld	d, a
      00021E ED 53r06r00      [20]  526 	ld	((_MyCommand + 6)), de
                                    527 ;src\mytestrom.c:155: MyCommand.nx = 16;
      000222 21 10 00         [10]  528 	ld	hl, #0x0010
      000225 22r08r00         [16]  529 	ld	((_MyCommand + 8)), hl
                                    530 ;src\mytestrom.c:156: myfVDP(&MyCommand);		
      000228 C5               [11]  531 	push	bc
      000229 21r00r00         [10]  532 	ld	hl, #_MyCommand
      00022C CDrD4r06         [17]  533 	call	_myfVDP
      00022F C1               [10]  534 	pop	bc
                                    535 ;src\mytestrom.c:157: BorderLinesR(step+WindowW-1,page,WLevelx+WindowW-1);
      000230 2Ar1Er00         [16]  536 	ld	hl, (_WLevelx)
      000233 11 EF 00         [10]  537 	ld	de, #0x00ef
      000236 19               [11]  538 	add	hl, de
      000237 78               [ 4]  539 	ld	a, b
      000238 C6 EF            [ 7]  540 	add	a, #0xef
      00023A 5F               [ 4]  541 	ld	e, a
      00023B C5               [11]  542 	push	bc
      00023C E5               [11]  543 	push	hl
      00023D 3Ar28r00         [13]  544 	ld	a, (_page+0)
      000240 6F               [ 4]  545 	ld	l, a
                                    546 ;	spillPairReg hl
                                    547 ;	spillPairReg hl
      000241 7B               [ 4]  548 	ld	a, e
      000242 CDr71r05         [17]  549 	call	_BorderLinesR
      000245 C1               [10]  550 	pop	bc
                                    551 ;src\mytestrom.c:159: }
      000246                        552 00103$:
                                    553 ;src\mytestrom.c:160: if (step==15) PatchPlotOneTile(step+WindowW-1-16,page^1,WLevelx+WindowW-1);		
      000246 79               [ 4]  554 	ld	a, c
      000247 D6 0F            [ 7]  555 	sub	a, #0x0f
      000249 C0               [11]  556 	ret	NZ
      00024A 2Ar1Er00         [16]  557 	ld	hl, (_WLevelx)
      00024D 11 EF 00         [10]  558 	ld	de, #0x00ef
      000250 19               [11]  559 	add	hl, de
      000251 3Ar28r00         [13]  560 	ld	a, (_page+0)
      000254 EE 01            [ 7]  561 	xor	a, #0x01
      000256 4F               [ 4]  562 	ld	c, a
      000257 78               [ 4]  563 	ld	a, b
      000258 C6 DF            [ 7]  564 	add	a, #0xdf
      00025A 47               [ 4]  565 	ld	b, a
      00025B E5               [11]  566 	push	hl
      00025C 69               [ 4]  567 	ld	l, c
                                    568 ;	spillPairReg hl
                                    569 ;	spillPairReg hl
      00025D 78               [ 4]  570 	ld	a, b
      00025E CDr80r06         [17]  571 	call	_PatchPlotOneTile
                                    572 ;src\mytestrom.c:161: }
      000261 C9               [10]  573 	ret
                                    574 ;src\mytestrom.c:163: void ScrollLeft(char step) __sdcccall(1)
                                    575 ;	---------------------------------
                                    576 ; Function ScrollLeft
                                    577 ; ---------------------------------
      000262                        578 _ScrollLeft::
                                    579 ;src\mytestrom.c:166: myVDPwrite((step-8) & 15,18);	
      000262 4F               [ 4]  580 	ld	c, a
      000263 C6 F8            [ 7]  581 	add	a, #0xf8
      000265 E6 0F            [ 7]  582 	and	a, #0x0f
      000267 47               [ 4]  583 	ld	b, a
      000268 C5               [11]  584 	push	bc
      000269 2E 12            [ 7]  585 	ld	l, #0x12
                                    586 ;	spillPairReg hl
                                    587 ;	spillPairReg hl
      00026B 78               [ 4]  588 	ld	a, b
      00026C CDrCAr06         [17]  589 	call	_myVDPwrite
      00026F C1               [10]  590 	pop	bc
                                    591 ;src\mytestrom.c:167: switch (step) {
      000270 79               [ 4]  592 	ld	a, c
      000271 D6 0F            [ 7]  593 	sub	a, #0x0f
      000273 20 41            [12]  594 	jr	NZ, 00102$
                                    595 ;src\mytestrom.c:169: page ^=1;					
      000275 3Ar28r00         [13]  596 	ld	a, (_page+0)
      000278 EE 01            [ 7]  597 	xor	a, #0x01
      00027A 32r28r00         [13]  598 	ld	(_page+0), a
                                    599 ;src\mytestrom.c:170: SetDisplayPage(page);				// case 15
      00027D C5               [11]  600 	push	bc
      00027E 3Ar28r00         [13]  601 	ld	a, (_page+0)
      000281 6F               [ 4]  602 	ld	l, a
                                    603 ;	spillPairReg hl
                                    604 ;	spillPairReg hl
      000282 CDr7Dr0C         [17]  605 	call	_SetDisplayPage
      000285 C1               [10]  606 	pop	bc
                                    607 ;src\mytestrom.c:171: MyBorder.dx = 0;	
      000286 21 00 00         [10]  608 	ld	hl, #0x0000
      000289 22r13r00         [16]  609 	ld	((_MyBorder + 4)), hl
                                    610 ;src\mytestrom.c:172: MyBorder.nx = 15;
      00028C 2E 0F            [ 7]  611 	ld	l, #0x0f
      00028E 22r17r00         [16]  612 	ld	((_MyBorder + 8)), hl
                                    613 ;src\mytestrom.c:173: MyBorder.dy = 256*page;
      000291 3Ar28r00         [13]  614 	ld	a, (_page+0)
      000294 06 00            [ 7]  615 	ld	b, #0x00
      000296 57               [ 4]  616 	ld	d, a
      000297 1E 00            [ 7]  617 	ld	e, #0x00
      000299 ED 53r15r00      [20]  618 	ld	((_MyBorder + 6)), de
                                    619 ;src\mytestrom.c:174: myfVDP(&MyBorder);
      00029D C5               [11]  620 	push	bc
      00029E 21r0Fr00         [10]  621 	ld	hl, #_MyBorder
      0002A1 CDrD4r06         [17]  622 	call	_myfVDP
      0002A4 C1               [10]  623 	pop	bc
                                    624 ;src\mytestrom.c:175: BorderLinesL(step,page,WLevelx);		
      0002A5 C5               [11]  625 	push	bc
      0002A6 2Ar1Er00         [16]  626 	ld	hl, (_WLevelx)
      0002A9 E5               [11]  627 	push	hl
      0002AA 3Ar28r00         [13]  628 	ld	a, (_page+0)
      0002AD 6F               [ 4]  629 	ld	l, a
                                    630 ;	spillPairReg hl
                                    631 ;	spillPairReg hl
      0002AE 79               [ 4]  632 	ld	a, c
      0002AF CDrE8r04         [17]  633 	call	_BorderLinesL
      0002B2 C1               [10]  634 	pop	bc
                                    635 ;src\mytestrom.c:176: break;				
      0002B3 C3r04r03         [10]  636 	jp	00103$
                                    637 ;src\mytestrom.c:177: default:								// case 14-0
      0002B6                        638 00102$:
                                    639 ;src\mytestrom.c:178: MyCommand.sx = 16*step;
      0002B6 59               [ 4]  640 	ld	e, c
      0002B7 16 00            [ 7]  641 	ld	d, #0x00
      0002B9 EB               [ 4]  642 	ex	de, hl
      0002BA 29               [11]  643 	add	hl, hl
      0002BB 29               [11]  644 	add	hl, hl
      0002BC 29               [11]  645 	add	hl, hl
      0002BD 29               [11]  646 	add	hl, hl
      0002BE EB               [ 4]  647 	ex	de, hl
      0002BF ED 53r00r00      [20]  648 	ld	(_MyCommand), de
                                    649 ;src\mytestrom.c:179: MyCommand.dx = MyCommand.sx + 16;
      0002C3 ED 5Br00r00      [20]  650 	ld	de, (#_MyCommand + 0)
      0002C7 21 10 00         [10]  651 	ld	hl, #0x0010
      0002CA 19               [11]  652 	add	hl, de
      0002CB EB               [ 4]  653 	ex	de, hl
      0002CC ED 53r04r00      [20]  654 	ld	((_MyCommand + 4)), de
                                    655 ;src\mytestrom.c:180: MyCommand.sy = 256*page;
      0002D0 3Ar28r00         [13]  656 	ld	a, (_page+0)
      0002D3 06 00            [ 7]  657 	ld	b, #0x00
      0002D5 57               [ 4]  658 	ld	d, a
      0002D6 1E 00            [ 7]  659 	ld	e, #0x00
      0002D8 ED 53r02r00      [20]  660 	ld	((_MyCommand + 2)), de
                                    661 ;src\mytestrom.c:181: MyCommand.dy = MyCommand.sy ^ 256;		
      0002DC ED 5Br02r00      [20]  662 	ld	de, (#(_MyCommand + 2) + 0)
      0002E0 7A               [ 4]  663 	ld	a, d
      0002E1 EE 01            [ 7]  664 	xor	a, #0x01
      0002E3 57               [ 4]  665 	ld	d, a
      0002E4 ED 53r06r00      [20]  666 	ld	((_MyCommand + 6)), de
                                    667 ;src\mytestrom.c:182: MyCommand.nx = 16;						
      0002E8 21 10 00         [10]  668 	ld	hl, #0x0010
      0002EB 22r08r00         [16]  669 	ld	((_MyCommand + 8)), hl
                                    670 ;src\mytestrom.c:183: myfVDP(&MyCommand);					
      0002EE C5               [11]  671 	push	bc
      0002EF 21r00r00         [10]  672 	ld	hl, #_MyCommand
      0002F2 CDrD4r06         [17]  673 	call	_myfVDP
      0002F5 C1               [10]  674 	pop	bc
                                    675 ;src\mytestrom.c:184: BorderLinesL(step,page,WLevelx);			
      0002F6 C5               [11]  676 	push	bc
      0002F7 2Ar1Er00         [16]  677 	ld	hl, (_WLevelx)
      0002FA E5               [11]  678 	push	hl
      0002FB 3Ar28r00         [13]  679 	ld	a, (_page+0)
      0002FE 6F               [ 4]  680 	ld	l, a
                                    681 ;	spillPairReg hl
                                    682 ;	spillPairReg hl
      0002FF 79               [ 4]  683 	ld	a, c
      000300 CDrE8r04         [17]  684 	call	_BorderLinesL
      000303 C1               [10]  685 	pop	bc
                                    686 ;src\mytestrom.c:186: }
      000304                        687 00103$:
                                    688 ;src\mytestrom.c:187: if (step==0) PatchPlotOneTile(16,page^1,WLevelx);				
      000304 79               [ 4]  689 	ld	a, c
      000305 B7               [ 4]  690 	or	a, a
      000306 C0               [11]  691 	ret	NZ
      000307 3Ar28r00         [13]  692 	ld	a, (_page+0)
      00030A EE 01            [ 7]  693 	xor	a, #0x01
      00030C 4F               [ 4]  694 	ld	c, a
      00030D 2Ar1Er00         [16]  695 	ld	hl, (_WLevelx)
      000310 E5               [11]  696 	push	hl
      000311 69               [ 4]  697 	ld	l, c
                                    698 ;	spillPairReg hl
                                    699 ;	spillPairReg hl
      000312 3E 10            [ 7]  700 	ld	a, #0x10
      000314 CDr80r06         [17]  701 	call	_PatchPlotOneTile
                                    702 ;src\mytestrom.c:188: }
      000317 C9               [10]  703 	ret
                                    704 ;src\mytestrom.c:208: void PlotOneColumnTile(void) __sdcccall(1) 
                                    705 ;	---------------------------------
                                    706 ; Function PlotOneColumnTile
                                    707 ; ---------------------------------
      000318                        708 _PlotOneColumnTile::
                                    709 ;src\mytestrom.c:240: __endasm;
      000318 D9               [ 4]  710 	exx
      000319 2Ar2Dr0B         [16]  711 	ld	hl,(_p)
      00031C 7E               [ 7]  712 	ld	a,(hl)
      00031D 07               [ 4]  713 	rlca
      00031E 07               [ 4]  714 	rlca
      00031F E6 03            [ 7]  715 	and	a,#3
      000321 87               [ 4]  716 	add	a,a
      000322 C6r00            [ 7]  717 	add	a,#b_data0
      000324 32 00 90         [13]  718 	ld	(#0x9000),a
      000327 3C               [ 4]  719 	inc	a
      000328 32 00 B0         [13]  720 	ld	(#0xb000),a
      00032B 7E               [ 7]  721 	ld	a,(hl)
      00032C 23               [ 6]  722 	inc	hl
      00032D 22r2Dr0B         [16]  723 	ld	(_p),hl ; save next tile
      000330 E6 3F            [ 7]  724 	and	a,#0x3F ; tile number
      000332 C6 80            [ 7]  725 	add	a,#0x80 ; address of the segment
      000334 67               [ 4]  726 	ld	h,a ; address of the tile in the segment
      000335 6A               [ 4]  727 	ld	l,d
      000336 D9               [ 4]  728 	exx
                                    729 	.rept	#16
                                    730 	out	(c),e ; set vram address in 14 bits
                                    731 	out	(c),d
                                    732 	inc	d ; new line
                                    733 	exx
                                    734 	outi	; write data
                                    735 	exx
                                    736 	.endm
      000337 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000339 ED 51            [12]    2 	out	(c),d
      00033B 14               [ 4]    3 	inc	d ; new line
      00033C D9               [ 4]    4 	exx
      00033D ED A3            [16]    5 	outi	; write data
      00033F D9               [ 4]    6 	exx
      000340 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000342 ED 51            [12]    2 	out	(c),d
      000344 14               [ 4]    3 	inc	d ; new line
      000345 D9               [ 4]    4 	exx
      000346 ED A3            [16]    5 	outi	; write data
      000348 D9               [ 4]    6 	exx
      000349 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00034B ED 51            [12]    2 	out	(c),d
      00034D 14               [ 4]    3 	inc	d ; new line
      00034E D9               [ 4]    4 	exx
      00034F ED A3            [16]    5 	outi	; write data
      000351 D9               [ 4]    6 	exx
      000352 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000354 ED 51            [12]    2 	out	(c),d
      000356 14               [ 4]    3 	inc	d ; new line
      000357 D9               [ 4]    4 	exx
      000358 ED A3            [16]    5 	outi	; write data
      00035A D9               [ 4]    6 	exx
      00035B ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00035D ED 51            [12]    2 	out	(c),d
      00035F 14               [ 4]    3 	inc	d ; new line
      000360 D9               [ 4]    4 	exx
      000361 ED A3            [16]    5 	outi	; write data
      000363 D9               [ 4]    6 	exx
      000364 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000366 ED 51            [12]    2 	out	(c),d
      000368 14               [ 4]    3 	inc	d ; new line
      000369 D9               [ 4]    4 	exx
      00036A ED A3            [16]    5 	outi	; write data
      00036C D9               [ 4]    6 	exx
      00036D ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00036F ED 51            [12]    2 	out	(c),d
      000371 14               [ 4]    3 	inc	d ; new line
      000372 D9               [ 4]    4 	exx
      000373 ED A3            [16]    5 	outi	; write data
      000375 D9               [ 4]    6 	exx
      000376 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000378 ED 51            [12]    2 	out	(c),d
      00037A 14               [ 4]    3 	inc	d ; new line
      00037B D9               [ 4]    4 	exx
      00037C ED A3            [16]    5 	outi	; write data
      00037E D9               [ 4]    6 	exx
      00037F ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000381 ED 51            [12]    2 	out	(c),d
      000383 14               [ 4]    3 	inc	d ; new line
      000384 D9               [ 4]    4 	exx
      000385 ED A3            [16]    5 	outi	; write data
      000387 D9               [ 4]    6 	exx
      000388 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00038A ED 51            [12]    2 	out	(c),d
      00038C 14               [ 4]    3 	inc	d ; new line
      00038D D9               [ 4]    4 	exx
      00038E ED A3            [16]    5 	outi	; write data
      000390 D9               [ 4]    6 	exx
      000391 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000393 ED 51            [12]    2 	out	(c),d
      000395 14               [ 4]    3 	inc	d ; new line
      000396 D9               [ 4]    4 	exx
      000397 ED A3            [16]    5 	outi	; write data
      000399 D9               [ 4]    6 	exx
      00039A ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00039C ED 51            [12]    2 	out	(c),d
      00039E 14               [ 4]    3 	inc	d ; new line
      00039F D9               [ 4]    4 	exx
      0003A0 ED A3            [16]    5 	outi	; write data
      0003A2 D9               [ 4]    6 	exx
      0003A3 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003A5 ED 51            [12]    2 	out	(c),d
      0003A7 14               [ 4]    3 	inc	d ; new line
      0003A8 D9               [ 4]    4 	exx
      0003A9 ED A3            [16]    5 	outi	; write data
      0003AB D9               [ 4]    6 	exx
      0003AC ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003AE ED 51            [12]    2 	out	(c),d
      0003B0 14               [ 4]    3 	inc	d ; new line
      0003B1 D9               [ 4]    4 	exx
      0003B2 ED A3            [16]    5 	outi	; write data
      0003B4 D9               [ 4]    6 	exx
      0003B5 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003B7 ED 51            [12]    2 	out	(c),d
      0003B9 14               [ 4]    3 	inc	d ; new line
      0003BA D9               [ 4]    4 	exx
      0003BB ED A3            [16]    5 	outi	; write data
      0003BD D9               [ 4]    6 	exx
      0003BE ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003C0 ED 51            [12]    2 	out	(c),d
      0003C2 14               [ 4]    3 	inc	d ; new line
      0003C3 D9               [ 4]    4 	exx
      0003C4 ED A3            [16]    5 	outi	; write data
      0003C6 D9               [ 4]    6 	exx
                                    737 ;src\mytestrom.c:241: }
      0003C7 C9               [10]  738 	ret
                                    739 ;src\mytestrom.c:243: void PlotOneColumnTileAndMask(void) __sdcccall(1) 
                                    740 ;	---------------------------------
                                    741 ; Function PlotOneColumnTileAndMask
                                    742 ; ---------------------------------
      0003C8                        743 _PlotOneColumnTileAndMask::
                                    744 ;src\mytestrom.c:279: __endasm;
      0003C8 D9               [ 4]  745 	exx
      0003C9 2Ar2Dr0B         [16]  746 	ld	hl,(_p)
      0003CC 7E               [ 7]  747 	ld	a,(hl)
      0003CD 07               [ 4]  748 	rlca
      0003CE 07               [ 4]  749 	rlca
      0003CF E6 03            [ 7]  750 	and	a,#3
      0003D1 87               [ 4]  751 	add	a,a
      0003D2 C6r00            [ 7]  752 	add	a,#b_data0
      0003D4 32 00 90         [13]  753 	ld	(#0x9000),a
      0003D7 3C               [ 4]  754 	inc	a
      0003D8 32 00 B0         [13]  755 	ld	(#0xb000),a
      0003DB 7E               [ 7]  756 	ld	a,(hl)
      0003DC 23               [ 6]  757 	inc	hl
      0003DD 22r2Dr0B         [16]  758 	ld	(_p),hl ; save next tile
      0003E0 E6 3F            [ 7]  759 	and	a,#0x3F ; tile number
      0003E2 C6 80            [ 7]  760 	add	a,#0x80 ; address of the segment
      0003E4 67               [ 4]  761 	ld	h,a ; address of the tile in the segment
      0003E5 6A               [ 4]  762 	ld	l,d
      0003E6 D9               [ 4]  763 	exx
                                    764 	.rept	#16
                                    765 	out	(c),e ; set vram address in 14 bits
                                    766 	out	(c),d
                                    767 	exx
                                    768 	outi	; write data
                                    769 	exx
                                    770 	out	(c),l ; set vram address in 14 bits for border
                                    771 	out	(c),d
                                    772 	inc	d ; new line
                                    773 	xor	a,a ; write border
                                    774 	out	(#0x98),a
                                    775 	.endm
      0003E7 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003E9 ED 51            [12]    2 	out	(c),d
      0003EB D9               [ 4]    3 	exx
      0003EC ED A3            [16]    4 	outi	; write data
      0003EE D9               [ 4]    5 	exx
      0003EF ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0003F1 ED 51            [12]    7 	out	(c),d
      0003F3 14               [ 4]    8 	inc	d ; new line
      0003F4 AF               [ 4]    9 	xor	a,a ; write border
      0003F5 D3 98            [11]   10 	out	(#0x98),a
      0003F7 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003F9 ED 51            [12]    2 	out	(c),d
      0003FB D9               [ 4]    3 	exx
      0003FC ED A3            [16]    4 	outi	; write data
      0003FE D9               [ 4]    5 	exx
      0003FF ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000401 ED 51            [12]    7 	out	(c),d
      000403 14               [ 4]    8 	inc	d ; new line
      000404 AF               [ 4]    9 	xor	a,a ; write border
      000405 D3 98            [11]   10 	out	(#0x98),a
      000407 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000409 ED 51            [12]    2 	out	(c),d
      00040B D9               [ 4]    3 	exx
      00040C ED A3            [16]    4 	outi	; write data
      00040E D9               [ 4]    5 	exx
      00040F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000411 ED 51            [12]    7 	out	(c),d
      000413 14               [ 4]    8 	inc	d ; new line
      000414 AF               [ 4]    9 	xor	a,a ; write border
      000415 D3 98            [11]   10 	out	(#0x98),a
      000417 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000419 ED 51            [12]    2 	out	(c),d
      00041B D9               [ 4]    3 	exx
      00041C ED A3            [16]    4 	outi	; write data
      00041E D9               [ 4]    5 	exx
      00041F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000421 ED 51            [12]    7 	out	(c),d
      000423 14               [ 4]    8 	inc	d ; new line
      000424 AF               [ 4]    9 	xor	a,a ; write border
      000425 D3 98            [11]   10 	out	(#0x98),a
      000427 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000429 ED 51            [12]    2 	out	(c),d
      00042B D9               [ 4]    3 	exx
      00042C ED A3            [16]    4 	outi	; write data
      00042E D9               [ 4]    5 	exx
      00042F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000431 ED 51            [12]    7 	out	(c),d
      000433 14               [ 4]    8 	inc	d ; new line
      000434 AF               [ 4]    9 	xor	a,a ; write border
      000435 D3 98            [11]   10 	out	(#0x98),a
      000437 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000439 ED 51            [12]    2 	out	(c),d
      00043B D9               [ 4]    3 	exx
      00043C ED A3            [16]    4 	outi	; write data
      00043E D9               [ 4]    5 	exx
      00043F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000441 ED 51            [12]    7 	out	(c),d
      000443 14               [ 4]    8 	inc	d ; new line
      000444 AF               [ 4]    9 	xor	a,a ; write border
      000445 D3 98            [11]   10 	out	(#0x98),a
      000447 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000449 ED 51            [12]    2 	out	(c),d
      00044B D9               [ 4]    3 	exx
      00044C ED A3            [16]    4 	outi	; write data
      00044E D9               [ 4]    5 	exx
      00044F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000451 ED 51            [12]    7 	out	(c),d
      000453 14               [ 4]    8 	inc	d ; new line
      000454 AF               [ 4]    9 	xor	a,a ; write border
      000455 D3 98            [11]   10 	out	(#0x98),a
      000457 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000459 ED 51            [12]    2 	out	(c),d
      00045B D9               [ 4]    3 	exx
      00045C ED A3            [16]    4 	outi	; write data
      00045E D9               [ 4]    5 	exx
      00045F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000461 ED 51            [12]    7 	out	(c),d
      000463 14               [ 4]    8 	inc	d ; new line
      000464 AF               [ 4]    9 	xor	a,a ; write border
      000465 D3 98            [11]   10 	out	(#0x98),a
      000467 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000469 ED 51            [12]    2 	out	(c),d
      00046B D9               [ 4]    3 	exx
      00046C ED A3            [16]    4 	outi	; write data
      00046E D9               [ 4]    5 	exx
      00046F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000471 ED 51            [12]    7 	out	(c),d
      000473 14               [ 4]    8 	inc	d ; new line
      000474 AF               [ 4]    9 	xor	a,a ; write border
      000475 D3 98            [11]   10 	out	(#0x98),a
      000477 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000479 ED 51            [12]    2 	out	(c),d
      00047B D9               [ 4]    3 	exx
      00047C ED A3            [16]    4 	outi	; write data
      00047E D9               [ 4]    5 	exx
      00047F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000481 ED 51            [12]    7 	out	(c),d
      000483 14               [ 4]    8 	inc	d ; new line
      000484 AF               [ 4]    9 	xor	a,a ; write border
      000485 D3 98            [11]   10 	out	(#0x98),a
      000487 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000489 ED 51            [12]    2 	out	(c),d
      00048B D9               [ 4]    3 	exx
      00048C ED A3            [16]    4 	outi	; write data
      00048E D9               [ 4]    5 	exx
      00048F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000491 ED 51            [12]    7 	out	(c),d
      000493 14               [ 4]    8 	inc	d ; new line
      000494 AF               [ 4]    9 	xor	a,a ; write border
      000495 D3 98            [11]   10 	out	(#0x98),a
      000497 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000499 ED 51            [12]    2 	out	(c),d
      00049B D9               [ 4]    3 	exx
      00049C ED A3            [16]    4 	outi	; write data
      00049E D9               [ 4]    5 	exx
      00049F ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004A1 ED 51            [12]    7 	out	(c),d
      0004A3 14               [ 4]    8 	inc	d ; new line
      0004A4 AF               [ 4]    9 	xor	a,a ; write border
      0004A5 D3 98            [11]   10 	out	(#0x98),a
      0004A7 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004A9 ED 51            [12]    2 	out	(c),d
      0004AB D9               [ 4]    3 	exx
      0004AC ED A3            [16]    4 	outi	; write data
      0004AE D9               [ 4]    5 	exx
      0004AF ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004B1 ED 51            [12]    7 	out	(c),d
      0004B3 14               [ 4]    8 	inc	d ; new line
      0004B4 AF               [ 4]    9 	xor	a,a ; write border
      0004B5 D3 98            [11]   10 	out	(#0x98),a
      0004B7 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004B9 ED 51            [12]    2 	out	(c),d
      0004BB D9               [ 4]    3 	exx
      0004BC ED A3            [16]    4 	outi	; write data
      0004BE D9               [ 4]    5 	exx
      0004BF ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004C1 ED 51            [12]    7 	out	(c),d
      0004C3 14               [ 4]    8 	inc	d ; new line
      0004C4 AF               [ 4]    9 	xor	a,a ; write border
      0004C5 D3 98            [11]   10 	out	(#0x98),a
      0004C7 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004C9 ED 51            [12]    2 	out	(c),d
      0004CB D9               [ 4]    3 	exx
      0004CC ED A3            [16]    4 	outi	; write data
      0004CE D9               [ 4]    5 	exx
      0004CF ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004D1 ED 51            [12]    7 	out	(c),d
      0004D3 14               [ 4]    8 	inc	d ; new line
      0004D4 AF               [ 4]    9 	xor	a,a ; write border
      0004D5 D3 98            [11]   10 	out	(#0x98),a
      0004D7 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004D9 ED 51            [12]    2 	out	(c),d
      0004DB D9               [ 4]    3 	exx
      0004DC ED A3            [16]    4 	outi	; write data
      0004DE D9               [ 4]    5 	exx
      0004DF ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004E1 ED 51            [12]    7 	out	(c),d
      0004E3 14               [ 4]    8 	inc	d ; new line
      0004E4 AF               [ 4]    9 	xor	a,a ; write border
      0004E5 D3 98            [11]   10 	out	(#0x98),a
                                    776 ;src\mytestrom.c:280: }
      0004E7 C9               [10]  777 	ret
                                    778 ;src\mytestrom.c:282: void BorderLinesL(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    779 ;	---------------------------------
                                    780 ; Function BorderLinesL
                                    781 ; ---------------------------------
      0004E8                        782 _BorderLinesL::
                                    783 ;src\mytestrom.c:386: __endasm;
      0004E8 C1               [10]  784 	pop	bc ; get ret address
      0004E9 D1               [10]  785 	pop	de ; de = MapX
      0004EA C5               [11]  786 	push	bc ; save ret address
      0004EB 08               [ 4]  787 	ex	af,af'			; a' = ScrnX
      0004EC 7D               [ 4]  788 	ld	a,l ; l = page
      0004ED 87               [ 4]  789 	add	a,a
      0004EE 87               [ 4]  790 	add	a,a
      0004EF 32 ED FF         [13]  791 	ld	(_RG14SA),a
      0004F2 4B               [ 4]  792 	ld	c,e ; C = low(mapx)
      0004F3 CB 2A            [ 8]  793 	sra	d ; DE/16
      0004F5 CB 1B            [ 8]  794 	rr	e
      0004F7 CB 2A            [ 8]  795 	sra	d
      0004F9 CB 1B            [ 8]  796 	rr	e
      0004FB CB 2A            [ 8]  797 	sra	d
      0004FD CB 1B            [ 8]  798 	rr	e
      0004FF CB 2A            [ 8]  799 	sra	d
      000501 CB 1B            [ 8]  800 	rr	e
      000503 6B               [ 4]  801 	ld	l,e
      000504 62               [ 4]  802 	ld	h,d
      000505 29               [11]  803 	add	hl,hl
      000506 29               [11]  804 	add	hl,hl
      000507 19               [11]  805 	add	hl,de
      000508 29               [11]  806 	add	hl,hl
      000509 19               [11]  807 	add	hl,de ; DE/16 * 11
      00050A 11r2Dr00         [10]  808 	ld	de,#_LevelMap
      00050D 19               [11]  809 	add	hl,de
      00050E 22r2Dr0B         [16]  810 	ld	(_p), hl
      000511 08               [ 4]  811 	ex	af,af'				; a' = ScrnX
      000512 5F               [ 4]  812 	ld	e,a ; DE vramm address for new border data
      000513 C6 F0            [ 7]  813 	add	a,#240 ; L = E +/- 240U according to the scroll direction
      000515 6F               [ 4]  814 	ld	l,a ; DL hold vramm address for blank border
      000516 79               [ 4]  815 	ld	a,c ; C = low(MapX)
      000517 E6 0F            [ 7]  816 	and	a,#15
      000519 87               [ 4]  817 	add	a,a
      00051A 87               [ 4]  818 	add	a,a
      00051B 87               [ 4]  819 	add	a,a
      00051C 87               [ 4]  820 	add	a,a
      00051D D9               [ 4]  821 	exx
      00051E 57               [ 4]  822 	ld	d,a ; common offeset of the address in the tile
      00051F 0E 98            [ 7]  823 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      000521 D9               [ 4]  824 	exx
      000522 F3               [ 4]  825 	di
      000523 3A ED FF         [13]  826 	ld	a,(_RG14SA) ; set address in vdp(14)
      000526 D3 99            [11]  827 	out	(#0x99), a
      000528 3C               [ 4]  828 	inc	a
      000529 32 ED FF         [13]  829 	ld	(_RG14SA),a ; save next block
      00052C 3E 8E            [ 7]  830 	ld	a,#0x8E
      00052E D3 99            [11]  831 	out	(#0x99), a
      000530 0E 99            [ 7]  832 	ld	c,#0x99
      000532 16 40            [ 7]  833 	ld	d,#0x40
      000534 CDrC8r03         [17]  834 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000537 CDrC8r03         [17]  835 	call	_PlotOneColumnTileAndMask
      00053A CDrC8r03         [17]  836 	call	_PlotOneColumnTileAndMask
      00053D CDrC8r03         [17]  837 	call	_PlotOneColumnTileAndMask
      000540 3A ED FF         [13]  838 	ld	a,(_RG14SA) ; set address in vdp(14)
      000543 D3 99            [11]  839 	out	(#0x99), a
      000545 3C               [ 4]  840 	inc	a
      000546 32 ED FF         [13]  841 	ld	(_RG14SA),a ; save next block
      000549 3E 8E            [ 7]  842 	ld	a,#0x8E
      00054B D3 99            [11]  843 	out	(#0x99), a
      00054D 16 40            [ 7]  844 	ld	d,#0x40
      00054F CDrC8r03         [17]  845 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000552 CDrC8r03         [17]  846 	call	_PlotOneColumnTileAndMask
      000555 CDrC8r03         [17]  847 	call	_PlotOneColumnTileAndMask
      000558 CDrC8r03         [17]  848 	call	_PlotOneColumnTileAndMask
      00055B 3A ED FF         [13]  849 	ld	a,(_RG14SA) ; set address in vdp(14)
      00055E D3 99            [11]  850 	out	(#0x99), a
      000560 3E 8E            [ 7]  851 	ld	a,#0x8E
      000562 D3 99            [11]  852 	out	(#0x99), a
      000564 16 40            [ 7]  853 	ld	d,#0x40
      000566 CDrC8r03         [17]  854 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      000569 CDrC8r03         [17]  855 	call	_PlotOneColumnTileAndMask
      00056C CDrC8r03         [17]  856 	call	_PlotOneColumnTileAndMask
      00056F FB               [ 4]  857 	ei
      000570 C9               [10]  858 	ret
                                    859 ;src\mytestrom.c:387: }
                                    860 ;src\mytestrom.c:389: void BorderLinesR(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    861 ;	---------------------------------
                                    862 ; Function BorderLinesR
                                    863 ; ---------------------------------
      000571                        864 _BorderLinesR::
                                    865 ;src\mytestrom.c:493: __endasm;
      000571 C1               [10]  866 	pop	bc ; get ret address
      000572 D1               [10]  867 	pop	de ; DE = MapX+240U
      000573 C5               [11]  868 	push	bc ; save ret address
      000574 08               [ 4]  869 	ex	af,af'			; a' = ScrnX
      000575 7D               [ 4]  870 	ld	a,l ; l = page
      000576 87               [ 4]  871 	add	a,a
      000577 87               [ 4]  872 	add	a,a
      000578 32 ED FF         [13]  873 	ld	(_RG14SA),a
      00057B 4B               [ 4]  874 	ld	c,e ; C = low(mapx)
      00057C CB 2A            [ 8]  875 	sra	d ; DE/16
      00057E CB 1B            [ 8]  876 	rr	e
      000580 CB 2A            [ 8]  877 	sra	d
      000582 CB 1B            [ 8]  878 	rr	e
      000584 CB 2A            [ 8]  879 	sra	d
      000586 CB 1B            [ 8]  880 	rr	e
      000588 CB 2A            [ 8]  881 	sra	d
      00058A CB 1B            [ 8]  882 	rr	e
      00058C 6B               [ 4]  883 	ld	l,e
      00058D 62               [ 4]  884 	ld	h,d
      00058E 29               [11]  885 	add	hl,hl
      00058F 29               [11]  886 	add	hl,hl
      000590 19               [11]  887 	add	hl,de
      000591 29               [11]  888 	add	hl,hl
      000592 19               [11]  889 	add	hl,de ; DE/16 * 11
      000593 11r2Dr00         [10]  890 	ld	de,#_LevelMap
      000596 19               [11]  891 	add	hl,de
      000597 22r2Dr0B         [16]  892 	ld	(_p), hl
      00059A 08               [ 4]  893 	ex	af,af'				; a' = ScrnX
      00059B 5F               [ 4]  894 	ld	e,a ; DE vramm address for new border data
      00059C D6 F0            [ 7]  895 	sub	a,#240 ; L = E +/- 240U according to the scroll direction
      00059E 6F               [ 4]  896 	ld	l,a ; DL hold vramm address for blank border
      00059F 79               [ 4]  897 	ld	a,c ; C = low(MapX)
      0005A0 E6 0F            [ 7]  898 	and	a,#15
      0005A2 87               [ 4]  899 	add	a,a
      0005A3 87               [ 4]  900 	add	a,a
      0005A4 87               [ 4]  901 	add	a,a
      0005A5 87               [ 4]  902 	add	a,a
      0005A6 D9               [ 4]  903 	exx
      0005A7 57               [ 4]  904 	ld	d,a ; common offeset of the address in the tile
      0005A8 0E 98            [ 7]  905 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      0005AA D9               [ 4]  906 	exx
      0005AB F3               [ 4]  907 	di
      0005AC 3A ED FF         [13]  908 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005AF D3 99            [11]  909 	out	(#0x99), a
      0005B1 3C               [ 4]  910 	inc	a
      0005B2 32 ED FF         [13]  911 	ld	(_RG14SA),a ; save next block
      0005B5 3E 8E            [ 7]  912 	ld	a,#0x8E
      0005B7 D3 99            [11]  913 	out	(#0x99), a
      0005B9 0E 99            [ 7]  914 	ld	c,#0x99
      0005BB 16 40            [ 7]  915 	ld	d,#0x40
      0005BD CDrC8r03         [17]  916 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005C0 CDrC8r03         [17]  917 	call	_PlotOneColumnTileAndMask
      0005C3 CDrC8r03         [17]  918 	call	_PlotOneColumnTileAndMask
      0005C6 CDrC8r03         [17]  919 	call	_PlotOneColumnTileAndMask
      0005C9 3A ED FF         [13]  920 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005CC D3 99            [11]  921 	out	(#0x99), a
      0005CE 3C               [ 4]  922 	inc	a
      0005CF 32 ED FF         [13]  923 	ld	(_RG14SA),a ; save next block
      0005D2 3E 8E            [ 7]  924 	ld	a,#0x8E
      0005D4 D3 99            [11]  925 	out	(#0x99), a
      0005D6 16 40            [ 7]  926 	ld	d,#0x40
      0005D8 CDrC8r03         [17]  927 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005DB CDrC8r03         [17]  928 	call	_PlotOneColumnTileAndMask
      0005DE CDrC8r03         [17]  929 	call	_PlotOneColumnTileAndMask
      0005E1 CDrC8r03         [17]  930 	call	_PlotOneColumnTileAndMask
      0005E4 3A ED FF         [13]  931 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005E7 D3 99            [11]  932 	out	(#0x99), a
      0005E9 3E 8E            [ 7]  933 	ld	a,#0x8E
      0005EB D3 99            [11]  934 	out	(#0x99), a
      0005ED 16 40            [ 7]  935 	ld	d,#0x40
      0005EF CDrC8r03         [17]  936 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      0005F2 CDrC8r03         [17]  937 	call	_PlotOneColumnTileAndMask
      0005F5 CDrC8r03         [17]  938 	call	_PlotOneColumnTileAndMask
      0005F8 FB               [ 4]  939 	ei
      0005F9 C9               [10]  940 	ret
                                    941 ;src\mytestrom.c:494: }
                                    942 ;src\mytestrom.c:496: void NewLine(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    943 ;	---------------------------------
                                    944 ; Function NewLine
                                    945 ; ---------------------------------
      0005FA                        946 _NewLine::
                                    947 ;src\mytestrom.c:605: __endasm;
      0005FA C1               [10]  948 	pop	bc ; get ret address
      0005FB D1               [10]  949 	pop	de ; de = MapX
      0005FC C5               [11]  950 	push	bc ; save ret address
      0005FD 08               [ 4]  951 	ex	af,af'			; a' = ScrnX
      0005FE 7D               [ 4]  952 	ld	a,l ; l = page
      0005FF 87               [ 4]  953 	add	a,a
      000600 87               [ 4]  954 	add	a,a
      000601 32 ED FF         [13]  955 	ld	(_RG14SA),a
      000604 4B               [ 4]  956 	ld	c,e ; C = low(mapx)
      000605 CB 2A            [ 8]  957 	sra	d ; DE/16
      000607 CB 1B            [ 8]  958 	rr	e
      000609 CB 2A            [ 8]  959 	sra	d
      00060B CB 1B            [ 8]  960 	rr	e
      00060D CB 2A            [ 8]  961 	sra	d
      00060F CB 1B            [ 8]  962 	rr	e
      000611 CB 2A            [ 8]  963 	sra	d
      000613 CB 1B            [ 8]  964 	rr	e
      000615 6B               [ 4]  965 	ld	l,e
      000616 62               [ 4]  966 	ld	h,d
      000617 29               [11]  967 	add	hl,hl
      000618 29               [11]  968 	add	hl,hl
      000619 19               [11]  969 	add	hl,de
      00061A 29               [11]  970 	add	hl,hl
      00061B 19               [11]  971 	add	hl,de ; DE/16 * 11
      00061C 11r2Dr00         [10]  972 	ld	de,#_LevelMap
      00061F 19               [11]  973 	add	hl,de
      000620 22r2Dr0B         [16]  974 	ld	(_p), hl
      000623 08               [ 4]  975 	ex	af,af'			; a' = ScrnX
      000624 5F               [ 4]  976 	ld	e,a ; DE vramm address for new border data
      000625 79               [ 4]  977 	ld	a,c ; C = low(MapX)
      000626 E6 0F            [ 7]  978 	and	a,#15
      000628 87               [ 4]  979 	add	a,a
      000629 87               [ 4]  980 	add	a,a
      00062A 87               [ 4]  981 	add	a,a
      00062B 87               [ 4]  982 	add	a,a
      00062C D9               [ 4]  983 	exx
      00062D 57               [ 4]  984 	ld	d,a ; common offeset of the address in the tile
      00062E 0E 98            [ 7]  985 	ld	c,#0x98 ; used by _PlotOneColumnTile
      000630 D9               [ 4]  986 	exx
      000631 F3               [ 4]  987 	di
      000632 3A ED FF         [13]  988 	ld	a,(_RG14SA) ; set address in vdp(14)
      000635 D3 99            [11]  989 	out	(#0x99), a
      000637 3C               [ 4]  990 	inc	a
      000638 32 ED FF         [13]  991 	ld	(_RG14SA),a ; save next block
      00063B 3E 8E            [ 7]  992 	ld	a,#0x8E
      00063D D3 99            [11]  993 	out	(#0x99), a
      00063F 0E 99            [ 7]  994 	ld	c,#0x99
      000641 16 40            [ 7]  995 	ld	d,#0x40
      000643 CDr18r03         [17]  996 	call	_PlotOneColumnTile ; 4 tiles
      000646 CDr18r03         [17]  997 	call	_PlotOneColumnTile
      000649 CDr18r03         [17]  998 	call	_PlotOneColumnTile
      00064C CDr18r03         [17]  999 	call	_PlotOneColumnTile
      00064F 3A ED FF         [13] 1000 	ld	a,(_RG14SA) ; set address in vdp(14)
      000652 D3 99            [11] 1001 	out	(#0x99), a
      000654 3C               [ 4] 1002 	inc	a
      000655 32 ED FF         [13] 1003 	ld	(_RG14SA),a ; save next block
      000658 3E 8E            [ 7] 1004 	ld	a,#0x8E
      00065A D3 99            [11] 1005 	out	(#0x99), a
      00065C 16 40            [ 7] 1006 	ld	d,#0x40
      00065E CDr18r03         [17] 1007 	call	_PlotOneColumnTile ; 4 tiles
      000661 CDr18r03         [17] 1008 	call	_PlotOneColumnTile
      000664 CDr18r03         [17] 1009 	call	_PlotOneColumnTile
      000667 CDr18r03         [17] 1010 	call	_PlotOneColumnTile
      00066A 3A ED FF         [13] 1011 	ld	a,(_RG14SA) ; set address in vdp(14)
      00066D D3 99            [11] 1012 	out	(#0x99), a
      00066F 3E 8E            [ 7] 1013 	ld	a,#0x8E
      000671 D3 99            [11] 1014 	out	(#0x99), a
      000673 16 40            [ 7] 1015 	ld	d,#0x40
      000675 CDr18r03         [17] 1016 	call	_PlotOneColumnTile ; 3 tiles
      000678 CDr18r03         [17] 1017 	call	_PlotOneColumnTile
      00067B CDr18r03         [17] 1018 	call	_PlotOneColumnTile
      00067E FB               [ 4] 1019 	ei
      00067F C9               [10] 1020 	ret
                                   1021 ;src\mytestrom.c:606: }
                                   1022 ;src\mytestrom.c:608: void PatchPlotOneTile(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                   1023 ;	---------------------------------
                                   1024 ; Function PatchPlotOneTile
                                   1025 ; ---------------------------------
      000680                       1026 _PatchPlotOneTile::
                                   1027 ;src\mytestrom.c:691: __endasm;
      000680 C1               [10] 1028 	pop	bc ; get ret address
      000681 D1               [10] 1029 	pop	de ; DE = MapX
      000682 C5               [11] 1030 	push	bc ; save ret address
      000683 08               [ 4] 1031 	ex	af,af'			; a' = ScrnX
      000684 7D               [ 4] 1032 	ld	a,l ; l = page
      000685 87               [ 4] 1033 	add	a,a
      000686 87               [ 4] 1034 	add	a,a
      000687 32 ED FF         [13] 1035 	ld	(_RG14SA),a
      00068A 4B               [ 4] 1036 	ld	c,e ; C = low(mapx)
      00068B CB 2A            [ 8] 1037 	sra	d ; DE/16
      00068D CB 1B            [ 8] 1038 	rr	e
      00068F CB 2A            [ 8] 1039 	sra	d
      000691 CB 1B            [ 8] 1040 	rr	e
      000693 CB 2A            [ 8] 1041 	sra	d
      000695 CB 1B            [ 8] 1042 	rr	e
      000697 CB 2A            [ 8] 1043 	sra	d
      000699 CB 1B            [ 8] 1044 	rr	e
      00069B 6B               [ 4] 1045 	ld	l,e
      00069C 62               [ 4] 1046 	ld	h,d
      00069D 29               [11] 1047 	add	hl,hl
      00069E 29               [11] 1048 	add	hl,hl
      00069F 19               [11] 1049 	add	hl,de
      0006A0 29               [11] 1050 	add	hl,hl
      0006A1 19               [11] 1051 	add	hl,de ; DE/16 * 11
      0006A2 11r2Dr00         [10] 1052 	ld	de,#_LevelMap
      0006A5 19               [11] 1053 	add	hl,de
      0006A6 22r2Dr0B         [16] 1054 	ld	(_p), hl
      0006A9 08               [ 4] 1055 	ex	af,af'				; a' = ScrnX
      0006AA 5F               [ 4] 1056 	ld	e,a ; DE vramm address for new border data
      0006AB 79               [ 4] 1057 	ld	a,c ; C = low(MapX)
      0006AC E6 0F            [ 7] 1058 	and	a,#15
      0006AE 87               [ 4] 1059 	add	a,a
      0006AF 87               [ 4] 1060 	add	a,a
      0006B0 87               [ 4] 1061 	add	a,a
      0006B1 87               [ 4] 1062 	add	a,a
      0006B2 D9               [ 4] 1063 	exx
      0006B3 57               [ 4] 1064 	ld	d,a ; common offeset of the address in the tile
      0006B4 0E 98            [ 7] 1065 	ld	c,#0x98 ; used by _PlotOneColumnTile
      0006B6 D9               [ 4] 1066 	exx
      0006B7 F3               [ 4] 1067 	di
      0006B8 3A ED FF         [13] 1068 	ld	a,(_RG14SA) ; set address in vdp(14)
      0006BB D3 99            [11] 1069 	out	(#0x99), a
      0006BD 3E 8E            [ 7] 1070 	ld	a,#0x8E
      0006BF D3 99            [11] 1071 	out	(#0x99), a
      0006C1 16 40            [ 7] 1072 	ld	d,#0x40
      0006C3 0E 99            [ 7] 1073 	ld	c,#0x99
      0006C5 CDr18r03         [17] 1074 	call	_PlotOneColumnTile ; 1 tile
      0006C8 FB               [ 4] 1075 	ei
      0006C9 C9               [10] 1076 	ret
                                   1077 ;src\mytestrom.c:692: }
                                   1078 ;src\mytestrom.c:694: void 	myVDPwrite(char data, char vdpreg) __sdcccall(1) __naked
                                   1079 ;	---------------------------------
                                   1080 ; Function myVDPwrite
                                   1081 ; ---------------------------------
      0006CA                       1082 _myVDPwrite::
                                   1083 ;src\mytestrom.c:706: __endasm;
      0006CA F3               [ 4] 1084 	di
      0006CB D3 99            [11] 1085 	out	(#0x99),a
      0006CD 3E 80            [ 7] 1086 	ld	a,#128
      0006CF B5               [ 4] 1087 	or	a,l
      0006D0 D3 99            [11] 1088 	out	(#0x99),a ;R#A := L
      0006D2 FB               [ 4] 1089 	ei
      0006D3 C9               [10] 1090 	ret
                                   1091 ;src\mytestrom.c:708: }	
                                   1092 ;src\mytestrom.c:731: void  	myfVDP(void *Address)  __sdcccall(1)  __naked
                                   1093 ;	---------------------------------
                                   1094 ; Function myfVDP
                                   1095 ; ---------------------------------
      0006D4                       1096 _myfVDP::
                                   1097 ;src\mytestrom.c:763: __endasm;
      0006D4 F3               [ 4] 1098 	di
      0006D5 3E 20            [ 7] 1099 	ld	a,#32 ; Start with Reg 32
      0006D7 D3 99            [11] 1100 	out	(#0x99),a
      0006D9 3E 91            [ 7] 1101 	ld	a,#128+#17
      0006DB D3 99            [11] 1102 	out	(#0x99),a ;R#17 := 32
      0006DD 0E 9B            [ 7] 1103 	ld	c,#0x9b ; c=#0x9b
      0006DF                       1104 	fvdpWait:
      0006DF 3E 02            [ 7] 1105 	ld	a,#2
      0006E1 D3 99            [11] 1106 	out	(#0x99),a
      0006E3 3E 8F            [ 7] 1107 	ld	a,#128+#15
      0006E5 D3 99            [11] 1108 	out	(#0x99),a
      0006E7 DB 99            [11] 1109 	in	a,(#0x99)
      0006E9 0F               [ 4] 1110 	rrca
      0006EA DArDFr06         [10] 1111 	jp	c, fvdpWait ; wait CE
                                   1112 	.rept	#15
                                   1113 	OUTI
                                   1114 	.endm
      0006ED ED A3            [16]    1 	OUTI
      0006EF ED A3            [16]    1 	OUTI
      0006F1 ED A3            [16]    1 	OUTI
      0006F3 ED A3            [16]    1 	OUTI
      0006F5 ED A3            [16]    1 	OUTI
      0006F7 ED A3            [16]    1 	OUTI
      0006F9 ED A3            [16]    1 	OUTI
      0006FB ED A3            [16]    1 	OUTI
      0006FD ED A3            [16]    1 	OUTI
      0006FF ED A3            [16]    1 	OUTI
      000701 ED A3            [16]    1 	OUTI
      000703 ED A3            [16]    1 	OUTI
      000705 ED A3            [16]    1 	OUTI
      000707 ED A3            [16]    1 	OUTI
      000709 ED A3            [16]    1 	OUTI
      00070B AF               [ 4] 1115 	xor	a,a ; set Status Register #0 for reading
      00070C D3 99            [11] 1116 	out	(#0x99),a
      00070E 3E 8F            [ 7] 1117 	ld	a,#0x8f
      000710 D3 99            [11] 1118 	out	(#0x99),a
      000712 FB               [ 4] 1119 	ei
      000713 C9               [10] 1120 	ret
                                   1121 ;src\mytestrom.c:764: }
                                   1122 ;src\mytestrom.c:816: void mySetAdjust(signed char x, signed char y) __sdcccall(1)
                                   1123 ;	---------------------------------
                                   1124 ; Function mySetAdjust
                                   1125 ; ---------------------------------
      000714                       1126 _mySetAdjust::
                                   1127 ;src\mytestrom.c:818: unsigned char value = ((x-8) & 15) | (((y-8) & 15)<<4);
      000714 C6 F8            [ 7] 1128 	add	a, #0xf8
      000716 E6 0F            [ 7] 1129 	and	a, #0x0f
      000718 4F               [ 4] 1130 	ld	c, a
      000719 7D               [ 4] 1131 	ld	a, l
      00071A C6 F8            [ 7] 1132 	add	a, #0xf8
      00071C E6 0F            [ 7] 1133 	and	a, #0x0f
      00071E 87               [ 4] 1134 	add	a, a
      00071F 87               [ 4] 1135 	add	a, a
      000720 87               [ 4] 1136 	add	a, a
      000721 87               [ 4] 1137 	add	a, a
      000722 B1               [ 4] 1138 	or	a, c
      000723 4F               [ 4] 1139 	ld	c, a
                                   1140 ;src\mytestrom.c:819: RG18SA = value;			// Reg18 Save
      000724 FD 21 F1 FF      [14] 1141 	ld	iy, #_RG18SA
      000728 FD 71 00         [19] 1142 	ld	0 (iy), c
                                   1143 ;src\mytestrom.c:820: myVDPwrite(value,18);
      00072B 2E 12            [ 7] 1144 	ld	l, #0x12
                                   1145 ;	spillPairReg hl
                                   1146 ;	spillPairReg hl
      00072D 79               [ 4] 1147 	ld	a, c
                                   1148 ;src\mytestrom.c:821: }
      00072E C3rCAr06         [10] 1149 	jp	_myVDPwrite
                                   1150 ;src\mytestrom.c:828: void myFT_wait(unsigned char cicles) __sdcccall(1) __naked {
                                   1151 ;	---------------------------------
                                   1152 ; Function myFT_wait
                                   1153 ; ---------------------------------
      000731                       1154 _myFT_wait::
                                   1155 ;src\mytestrom.c:851: __endasm;
      000731 B7               [ 4] 1156 	or	a, a
      000732                       1157 	00004$:
      000732 C8               [11] 1158 	ret	Z
      000733 76               [ 4] 1159 	halt
      000734 3D               [ 4] 1160 	dec	a
      000735 C3r32r07         [10] 1161 	jp	00004$
                                   1162 ;src\mytestrom.c:852: }
                                   1163 ;src\mytestrom.c:854: void WaitLineInt(void) __sdcccall(1) __naked {
                                   1164 ;	---------------------------------
                                   1165 ; Function WaitLineInt
                                   1166 ; ---------------------------------
      000738                       1167 _WaitLineInt::
                                   1168 ;src\mytestrom.c:884: __endasm;
      000738 F3               [ 4] 1169 	di
      000739 3E 01            [ 7] 1170 	ld	a,#1 ; set Status Register #1 for reading
      00073B D3 99            [11] 1171 	out	(#0x99),a
      00073D 3E 8F            [ 7] 1172 	ld	a,#0x8f
      00073F D3 99            [11] 1173 	out	(#0x99),a
      000741                       1174 	WaitLI:
      000741 DB 99            [11] 1175 	in	a,(#0x99)
      000743 0F               [ 4] 1176 	rrca
      000744 30 FB            [12] 1177 	jr	nc,WaitLI
      000746 AF               [ 4] 1178 	xor	a,a ; set Status Register #0 for reading
      000747 D3 99            [11] 1179 	out	(#0x99),a
      000749 3E 8F            [ 7] 1180 	ld	a,#0x8f
      00074B D3 99            [11] 1181 	out	(#0x99),a
      00074D FB               [ 4] 1182 	ei
      00074E C9               [10] 1183 	ret
                                   1184 ;src\mytestrom.c:885: }
                                   1185 ;src\mytestrom.c:917: void FT_errorHandler(char n, char *name) __sdcccall(1) 
                                   1186 ;	---------------------------------
                                   1187 ; Function FT_errorHandler
                                   1188 ; ---------------------------------
      00074F                       1189 _FT_errorHandler::
      00074F 4F               [ 4] 1190 	ld	c, a
                                   1191 ;src\mytestrom.c:924: chgmod(0);
      000750 C5               [11] 1192 	push	bc
      000751 D5               [11] 1193 	push	de
      000752 AF               [ 4] 1194 	xor	a, a
      000753 CDr29r0C         [17] 1195 	call	_chgmod
      000756 D1               [10] 1196 	pop	de
      000757 C1               [10] 1197 	pop	bc
                                   1198 ;src\mytestrom.c:926: switch (n)
      000758 79               [ 4] 1199 	ld	a, c
      000759 3D               [ 4] 1200 	dec	a
      00075A 28 12            [12] 1201 	jr	Z, 00101$
      00075C 79               [ 4] 1202 	ld	a, c
      00075D D6 02            [ 7] 1203 	sub	a, #0x02
      00075F 28 1C            [12] 1204 	jr	Z, 00102$
      000761 79               [ 4] 1205 	ld	a, c
      000762 D6 03            [ 7] 1206 	sub	a, #0x03
      000764 28 26            [12] 1207 	jr	Z, 00103$
      000766 79               [ 4] 1208 	ld	a, c
      000767 D6 04            [ 7] 1209 	sub	a, #0x04
      000769 28 2A            [12] 1210 	jr	Z, 00104$
      00076B C3rA1r07         [10] 1211 	jp	00105$
                                   1212 ;src\mytestrom.c:928: case 1:
      00076E                       1213 00101$:
                                   1214 ;src\mytestrom.c:929: Print("\n\rFAILED: fcb_open(): ");
      00076E D5               [11] 1215 	push	de
      00076F 21rA3r07         [10] 1216 	ld	hl, #___str_1
      000772 CDrCEr0C         [17] 1217 	call	_Print
      000775 D1               [10] 1218 	pop	de
                                   1219 ;src\mytestrom.c:930: Print(name);
      000776 EB               [ 4] 1220 	ex	de, hl
      000777 CDrCEr0C         [17] 1221 	call	_Print
                                   1222 ;src\mytestrom.c:931: break;
      00077A C3rA1r07         [10] 1223 	jp	00105$
                                   1224 ;src\mytestrom.c:933: case 2:
      00077D                       1225 00102$:
                                   1226 ;src\mytestrom.c:934: Print("\n\rFAILED: fcb_close():");
      00077D D5               [11] 1227 	push	de
      00077E 21rBAr07         [10] 1228 	ld	hl, #___str_2
      000781 CDrCEr0C         [17] 1229 	call	_Print
      000784 D1               [10] 1230 	pop	de
                                   1231 ;src\mytestrom.c:935: Print(name);
      000785 EB               [ 4] 1232 	ex	de, hl
      000786 CDrCEr0C         [17] 1233 	call	_Print
                                   1234 ;src\mytestrom.c:936: break;  
      000789 C3rA1r07         [10] 1235 	jp	00105$
                                   1236 ;src\mytestrom.c:938: case 3:
      00078C                       1237 00103$:
                                   1238 ;src\mytestrom.c:939: Print("\n\rStop Kidding, run me on MSX2 !");
      00078C 21rD1r07         [10] 1239 	ld	hl, #___str_3
      00078F CDrCEr0C         [17] 1240 	call	_Print
                                   1241 ;src\mytestrom.c:940: break;
      000792 C3rA1r07         [10] 1242 	jp	00105$
                                   1243 ;src\mytestrom.c:942: case 4:
      000795                       1244 00104$:
                                   1245 ;src\mytestrom.c:943: Print("\n\rUnespected end of file:");
      000795 D5               [11] 1246 	push	de
      000796 21rF2r07         [10] 1247 	ld	hl, #___str_4
      000799 CDrCEr0C         [17] 1248 	call	_Print
      00079C D1               [10] 1249 	pop	de
                                   1250 ;src\mytestrom.c:944: Print(name);		  
      00079D EB               [ 4] 1251 	ex	de, hl
      00079E CDrCEr0C         [17] 1252 	call	_Print
                                   1253 ;src\mytestrom.c:946: }
      0007A1                       1254 00105$:
                                   1255 ;src\mytestrom.c:947: Reboot(0);
      0007A1 C7               [11] 1256 	rst	#0
                                   1257 ;src\mytestrom.c:948: }
      0007A2 C9               [10] 1258 	ret
      0007A3                       1259 ___str_1:
      0007A3 0A                    1260 	.db 0x0a
      0007A4 0D                    1261 	.db 0x0d
      0007A5 46 41 49 4C 45 44 3A  1262 	.ascii "FAILED: fcb_open(): "
             20 66 63 62 5F 6F 70
             65 6E 28 29 3A 20
      0007B9 00                    1263 	.db 0x00
      0007BA                       1264 ___str_2:
      0007BA 0A                    1265 	.db 0x0a
      0007BB 0D                    1266 	.db 0x0d
      0007BC 46 41 49 4C 45 44 3A  1267 	.ascii "FAILED: fcb_close():"
             20 66 63 62 5F 63 6C
             6F 73 65 28 29 3A
      0007D0 00                    1268 	.db 0x00
      0007D1                       1269 ___str_3:
      0007D1 0A                    1270 	.db 0x0a
      0007D2 0D                    1271 	.db 0x0d
      0007D3 53 74 6F 70 20 4B 69  1272 	.ascii "Stop Kidding, run me on MSX2 !"
             64 64 69 6E 67 2C 20
             72 75 6E 20 6D 65 20
             6F 6E 20 4D 53 58 32
             20 21
      0007F1 00                    1273 	.db 0x00
      0007F2                       1274 ___str_4:
      0007F2 0A                    1275 	.db 0x0a
      0007F3 0D                    1276 	.db 0x0d
      0007F4 55 6E 65 73 70 65 63  1277 	.ascii "Unespected end of file:"
             74 65 64 20 65 6E 64
             20 6F 66 20 66 69 6C
             65 3A
      00080B 00                    1278 	.db 0x00
                                   1279 ;src\mytestrom.c:950: void MyLoadMap(char mapnumber,unsigned char* p ) __sdcccall(1)
                                   1280 ;	---------------------------------
                                   1281 ; Function MyLoadMap
                                   1282 ; ---------------------------------
      00080C                       1283 _MyLoadMap::
      00080C DD E5            [15] 1284 	push	ix
      00080E DD 21 00 00      [14] 1285 	ld	ix,#0
      000812 DD 39            [15] 1286 	add	ix,sp
      000814 21 FB FF         [10] 1287 	ld	hl, #-5
      000817 39               [11] 1288 	add	hl, sp
      000818 F9               [ 6] 1289 	ld	sp, hl
      000819 6F               [ 4] 1290 	ld	l, a
                                   1291 ;	spillPairReg hl
                                   1292 ;	spillPairReg hl
      00081A DD 73 FD         [19] 1293 	ld	-3 (ix), e
      00081D DD 72 FE         [19] 1294 	ld	-2 (ix), d
                                   1295 ;src\mytestrom.c:952: char *q = &((char*)DataLevelMap)[2]+12*mapnumber;
      000820 01r00r00         [10] 1296 	ld	bc, #_DataLevelMap
      000823 59               [ 4] 1297 	ld	e, c
      000824 50               [ 4] 1298 	ld	d, b
      000825 13               [ 6] 1299 	inc	de
      000826 13               [ 6] 1300 	inc	de
      000827 26 00            [ 7] 1301 	ld	h, #0x00
                                   1302 ;	spillPairReg hl
                                   1303 ;	spillPairReg hl
      000829 D5               [11] 1304 	push	de
      00082A 5D               [ 4] 1305 	ld	e, l
      00082B 54               [ 4] 1306 	ld	d, h
      00082C 29               [11] 1307 	add	hl, hl
      00082D 19               [11] 1308 	add	hl, de
      00082E 29               [11] 1309 	add	hl, hl
      00082F 29               [11] 1310 	add	hl, hl
      000830 D1               [10] 1311 	pop	de
      000831 19               [11] 1312 	add	hl, de
      000832 EB               [ 4] 1313 	ex	de, hl
                                   1314 ;src\mytestrom.c:961: __endasm;	
      000833 3Er00            [ 7] 1315 	ld	a,#b_DataLevelMap
      000835 32 00 90         [13] 1316 	ld	(#0x9000),a
      000838 32r00r00         [13] 1317 	ld	(#_curr_bank),a
      00083B 3C               [ 4] 1318 	inc	a
      00083C 32 00 B0         [13] 1319 	ld	(#0xb000),a
                                   1320 ;src\mytestrom.c:963: LevelW = ((char*)DataLevelMap)[0];
      00083F 0A               [ 7] 1321 	ld	a, (bc)
      000840 32r21r00         [13] 1322 	ld	(_LevelW+0), a
                                   1323 ;src\mytestrom.c:965: LevelH = 11;
      000843 21r22r00         [10] 1324 	ld	hl, #_LevelH
      000846 36 0B            [10] 1325 	ld	(hl), #0x0b
                                   1326 ;src\mytestrom.c:967: for (char t=0;t<LevelW;t++) {
      000848 DD 4E FD         [19] 1327 	ld	c, -3 (ix)
      00084B DD 46 FE         [19] 1328 	ld	b, -2 (ix)
      00084E DD 36 FF 00      [19] 1329 	ld	-1 (ix), #0x00
      000852                       1330 00103$:
      000852 21r21r00         [10] 1331 	ld	hl, #_LevelW
      000855 DD 7E FF         [19] 1332 	ld	a, -1 (ix)
      000858 96               [ 7] 1333 	sub	a, (hl)
      000859 30 25            [12] 1334 	jr	NC, 00105$
                                   1335 ;src\mytestrom.c:968: memcpy(p,q,11);
      00085B 33               [ 6] 1336 	inc	sp
      00085C 33               [ 6] 1337 	inc	sp
      00085D C5               [11] 1338 	push	bc
      00085E 6B               [ 4] 1339 	ld	l, e
                                   1340 ;	spillPairReg hl
                                   1341 ;	spillPairReg hl
      00085F 62               [ 4] 1342 	ld	h, d
                                   1343 ;	spillPairReg hl
                                   1344 ;	spillPairReg hl
      000860 D5               [11] 1345 	push	de
      000861 C5               [11] 1346 	push	bc
      000862 DD 5E FB         [19] 1347 	ld	e, -5 (ix)
      000865 DD 56 FC         [19] 1348 	ld	d, -4 (ix)
      000868 01 0B 00         [10] 1349 	ld	bc, #0x000b
      00086B ED B0            [21] 1350 	ldir
      00086D C1               [10] 1351 	pop	bc
      00086E D1               [10] 1352 	pop	de
                                   1353 ;src\mytestrom.c:969: p +=11;
      00086F 21 0B 00         [10] 1354 	ld	hl, #0x000b
      000872 09               [11] 1355 	add	hl, bc
      000873 4D               [ 4] 1356 	ld	c, l
      000874 44               [ 4] 1357 	ld	b, h
                                   1358 ;src\mytestrom.c:970: q +=24;
      000875 21 18 00         [10] 1359 	ld	hl, #0x0018
      000878 19               [11] 1360 	add	hl, de
      000879 EB               [ 4] 1361 	ex	de, hl
                                   1362 ;src\mytestrom.c:967: for (char t=0;t<LevelW;t++) {
      00087A DD 34 FF         [23] 1363 	inc	-1 (ix)
      00087D C3r52r08         [10] 1364 	jp	00103$
      000880                       1365 00105$:
                                   1366 ;src\mytestrom.c:972: }
      000880 DD F9            [10] 1367 	ld	sp, ix
      000882 DD E1            [14] 1368 	pop	ix
      000884 C9               [10] 1369 	ret
                                   1370 ;src\mytestrom.c:974: void myISR(void) __sdcccall(1) __naked
                                   1371 ;	---------------------------------
                                   1372 ; Function myISR
                                   1373 ; ---------------------------------
      000885                       1374 _myISR::
                                   1375 ;src\mytestrom.c:1013: __endasm;
      000885 F5               [11] 1376 	push	af
      000886 AF               [ 4] 1377 	xor	a,a ; set Status Register #0 for reading
      000887 D3 99            [11] 1378 	out	(#0x99),a
      000889 3E 8F            [ 7] 1379 	ld	a,#0x8f
      00088B D3 99            [11] 1380 	out	(#0x99),a
      00088D DB 99            [11] 1381 	in	a,(#0x99) ; mimimum ISR
      00088F 3Ar2Cr00         [13] 1382 	ld	a,(#_cursat)
      000892 A7               [ 4] 1383 	and	a,a
      000893 3E 03            [ 7] 1384 	ld	a,#3
      000895 20 02            [12] 1385 	jr	nz,setsat1
      000897 3E 01            [ 7] 1386 	ld	a,#1
      000899                       1387 	setsat1:
      000899 D3 99            [11] 1388 	out	(#0x99),a
      00089B 3E 8B            [ 7] 1389 	ld	a,#128+#11
      00089D D3 99            [11] 1390 	out	(#0x99),a
      00089F F1               [10] 1391 	pop	af
      0008A0 FB               [ 4] 1392 	ei
      0008A1 C9               [10] 1393 	ret
                                   1394 ;src\mytestrom.c:1014: }
                                   1395 ;src\mytestrom.c:1016: void myInstISR(void) __sdcccall(1) __naked
                                   1396 ;	---------------------------------
                                   1397 ; Function myInstISR
                                   1398 ; ---------------------------------
      0008A2                       1399 _myInstISR::
                                   1400 ;src\mytestrom.c:1018: myVDPwrite(WindowH-8,19); // indagare sul glitch !!! xxx
      0008A2 2E 13            [ 7] 1401 	ld	l, #0x13
                                   1402 ;	spillPairReg hl
                                   1403 ;	spillPairReg hl
      0008A4 3E A8            [ 7] 1404 	ld	a, #0xa8
      0008A6 CDrCAr06         [17] 1405 	call	_myVDPwrite
                                   1406 ;src\mytestrom.c:1034: __endasm;
      0008A9 21 9A FD         [10] 1407 	ld	hl,#0xFD9A
      0008AC 11r29r00         [10] 1408 	ld	de,#_OldIsr
      0008AF 01 03 00         [10] 1409 	ld	bc,#3
      0008B2 ED B0            [21] 1410 	ldir
      0008B4 F3               [ 4] 1411 	di
      0008B5 3E C3            [ 7] 1412 	ld	a,#0xC3
      0008B7 32 9A FD         [13] 1413 	ld	(#0xFD9A+#0),a
      0008BA 21r85r08         [10] 1414 	ld	hl,#_myISR
      0008BD 22 9B FD         [16] 1415 	ld	(#0xFD9A+#1),hl
      0008C0 FB               [ 4] 1416 	ei
      0008C1 C9               [10] 1417 	ret
                                   1418 ;src\mytestrom.c:1035: }
                                   1419 ;src\mytestrom.c:1037: void myISRrestore(void) __sdcccall(1) __naked
                                   1420 ;	---------------------------------
                                   1421 ; Function myISRrestore
                                   1422 ; ---------------------------------
      0008C2                       1423 _myISRrestore::
                                   1424 ;src\mytestrom.c:1039: RG0SAV &= 0xEF;
      0008C2 3A DF F3         [13] 1425 	ld	a, (_RG0SAV+0)
      0008C5 E6 EF            [ 7] 1426 	and	a, #0xef
      0008C7 32 DF F3         [13] 1427 	ld	(_RG0SAV+0), a
                                   1428 ;src\mytestrom.c:1040: myVDPwrite(RG0SAV,0);
      0008CA 2E 00            [ 7] 1429 	ld	l, #0x00
                                   1430 ;	spillPairReg hl
                                   1431 ;	spillPairReg hl
      0008CC 3A DF F3         [13] 1432 	ld	a, (_RG0SAV+0)
      0008CF CDrCAr06         [17] 1433 	call	_myVDPwrite
                                   1434 ;src\mytestrom.c:1050: __endasm;
      0008D2 21r29r00         [10] 1435 	ld	hl,#_OldIsr
      0008D5 11 9A FD         [10] 1436 	ld	de,#0xFD9A
      0008D8 01 03 00         [10] 1437 	ld	bc,#3
      0008DB F3               [ 4] 1438 	di
      0008DC ED B0            [21] 1439 	ldir
      0008DE FB               [ 4] 1440 	ei
      0008DF C9               [10] 1441 	ret
                                   1442 ;src\mytestrom.c:1051: }
                                   1443 ;src\mytestrom.c:1055: unsigned char myCheckkbd(unsigned char nrow) __sdcccall(1) __naked
                                   1444 ;	---------------------------------
                                   1445 ; Function myCheckkbd
                                   1446 ; ---------------------------------
      0008E0                       1447 _myCheckkbd::
                                   1448 ;src\mytestrom.c:1081: __endasm;
                                   1449 ;
                                   1450 ;
                                   1451 ;
                                   1452 ;
                                   1453 ;
                                   1454 ;
                                   1455 ;
                                   1456 ;
                                   1457 ;
                                   1458 ;
                                   1459 ;	checkkbd:
      0008E0 5F               [ 4] 1460 	ld	e,a
      0008E1 F3               [ 4] 1461 	di
      0008E2 DB AA            [11] 1462 	in	a,(#0xaa)
      0008E4 E6 F0            [ 7] 1463 	and	a,#0b11110000 ; upper 4 bits contain info to preserve
      0008E6 B3               [ 4] 1464 	or	a,e
      0008E7 D3 AA            [11] 1465 	out	(#0xaa),a
      0008E9 DB A9            [11] 1466 	in	a,(#0xa9)
      0008EB 6F               [ 4] 1467 	ld	l,a
      0008EC FB               [ 4] 1468 	ei
      0008ED C9               [10] 1469 	ret
                                   1470 ;src\mytestrom.c:1082: }
                                   1471 ;src\mytestrom.c:1093: void ObjectsInit(void) {
                                   1472 ;	---------------------------------
                                   1473 ; Function ObjectsInit
                                   1474 ; ---------------------------------
      0008EE                       1475 _ObjectsInit::
      0008EE DD E5            [15] 1476 	push	ix
      0008F0 DD 21 00 00      [14] 1477 	ld	ix,#0
      0008F4 DD 39            [15] 1478 	add	ix,sp
      0008F6 F5               [11] 1479 	push	af
      0008F7 3B               [ 6] 1480 	dec	sp
                                   1481 ;src\mytestrom.c:1095: for (t=0;t<MaxObjNum;t++)
      0008F8 DD 36 FF 00      [19] 1482 	ld	-1 (ix), #0x00
      0008FC                       1483 00102$:
                                   1484 ;src\mytestrom.c:1097: object[t].x = t*LevelW*4/MaxObjNum + WindowW/2;
      0008FC DD 4E FF         [19] 1485 	ld	c, -1 (ix)
      0008FF 06 00            [ 7] 1486 	ld	b, #0x00
      000901 69               [ 4] 1487 	ld	l, c
      000902 60               [ 4] 1488 	ld	h, b
      000903 29               [11] 1489 	add	hl, hl
      000904 09               [11] 1490 	add	hl, bc
      000905 29               [11] 1491 	add	hl, hl
      000906 09               [11] 1492 	add	hl, bc
      000907 EB               [ 4] 1493 	ex	de, hl
      000908 21r2Fr0B         [10] 1494 	ld	hl, #_object
      00090B 19               [11] 1495 	add	hl, de
      00090C EB               [ 4] 1496 	ex	de, hl
      00090D 33               [ 6] 1497 	inc	sp
      00090E 33               [ 6] 1498 	inc	sp
      00090F D5               [11] 1499 	push	de
      000910 D5               [11] 1500 	push	de
      000911 3Ar21r00         [13] 1501 	ld	a, (#_LevelW + 0)
      000914 5F               [ 4] 1502 	ld	e, a
      000915 DD 66 FF         [19] 1503 	ld	h, -1 (ix)
                                   1504 ;	spillPairReg hl
                                   1505 ;	spillPairReg hl
      000918 2E 00            [ 7] 1506 	ld	l, #0x00
      00091A 55               [ 4] 1507 	ld	d, l
      00091B 06 08            [ 7] 1508 	ld	b, #0x08
      00091D                       1509 00125$:
      00091D 29               [11] 1510 	add	hl, hl
      00091E 30 01            [12] 1511 	jr	NC, 00126$
      000920 19               [11] 1512 	add	hl, de
      000921                       1513 00126$:
      000921 10 FA            [13] 1514 	djnz	00125$
      000923 D1               [10] 1515 	pop	de
      000924 29               [11] 1516 	add	hl, hl
      000925 29               [11] 1517 	add	hl, hl
                                   1518 ;	spillPairReg hl
                                   1519 ;	spillPairReg hl
      000926 4D               [ 4] 1520 	ld	c,l
      000927 44               [ 4] 1521 	ld	b,h
                                   1522 ;	spillPairReg hl
                                   1523 ;	spillPairReg hl
      000928 CB 78            [ 8] 1524 	bit	7, b
      00092A 28 04            [12] 1525 	jr	Z, 00106$
      00092C 21 07 00         [10] 1526 	ld	hl, #0x0007
      00092F 09               [11] 1527 	add	hl, bc
      000930                       1528 00106$:
      000930 CB 2C            [ 8] 1529 	sra	h
      000932 CB 1D            [ 8] 1530 	rr	l
      000934 CB 2C            [ 8] 1531 	sra	h
      000936 CB 1D            [ 8] 1532 	rr	l
      000938 CB 2C            [ 8] 1533 	sra	h
      00093A CB 1D            [ 8] 1534 	rr	l
      00093C 7D               [ 4] 1535 	ld	a, l
      00093D 44               [ 4] 1536 	ld	b, h
      00093E C6 78            [ 7] 1537 	add	a, #0x78
      000940 4F               [ 4] 1538 	ld	c, a
      000941 30 01            [12] 1539 	jr	NC, 00127$
      000943 04               [ 4] 1540 	inc	b
      000944                       1541 00127$:
      000944 E1               [10] 1542 	pop	hl
      000945 E5               [11] 1543 	push	hl
      000946 71               [ 7] 1544 	ld	(hl), c
      000947 23               [ 6] 1545 	inc	hl
      000948 70               [ 7] 1546 	ld	(hl), b
                                   1547 ;src\mytestrom.c:1098: object[t].y = (t & 1) ? LevelH*16-32 : 0;
      000949 6B               [ 4] 1548 	ld	l, e
                                   1549 ;	spillPairReg hl
                                   1550 ;	spillPairReg hl
      00094A 62               [ 4] 1551 	ld	h, d
                                   1552 ;	spillPairReg hl
                                   1553 ;	spillPairReg hl
      00094B 23               [ 6] 1554 	inc	hl
      00094C 23               [ 6] 1555 	inc	hl
      00094D DD CB FF 46      [20] 1556 	bit	0, -1 (ix)
      000951 28 1A            [12] 1557 	jr	Z, 00107$
      000953 3Ar22r00         [13] 1558 	ld	a, (_LevelH+0)
      000956 0E 00            [ 7] 1559 	ld	c, #0x00
      000958 87               [ 4] 1560 	add	a, a
      000959 CB 11            [ 8] 1561 	rl	c
      00095B 87               [ 4] 1562 	add	a, a
      00095C CB 11            [ 8] 1563 	rl	c
      00095E 87               [ 4] 1564 	add	a, a
      00095F CB 11            [ 8] 1565 	rl	c
      000961 87               [ 4] 1566 	add	a, a
      000962 CB 11            [ 8] 1567 	rl	c
      000964 C6 E0            [ 7] 1568 	add	a, #0xe0
      000966 47               [ 4] 1569 	ld	b, a
      000967 79               [ 4] 1570 	ld	a, c
      000968 CE FF            [ 7] 1571 	adc	a, #0xff
      00096A C3r6Fr09         [10] 1572 	jp	00108$
      00096D                       1573 00107$:
      00096D AF               [ 4] 1574 	xor	a, a
      00096E 47               [ 4] 1575 	ld	b, a
      00096F                       1576 00108$:
      00096F 70               [ 7] 1577 	ld	(hl), b
      000970 23               [ 6] 1578 	inc	hl
      000971 77               [ 7] 1579 	ld	(hl), a
                                   1580 ;src\mytestrom.c:1099: object[t].frame = t;
      000972 21 05 00         [10] 1581 	ld	hl, #0x0005
      000975 19               [11] 1582 	add	hl, de
      000976 DD 7E FF         [19] 1583 	ld	a, -1 (ix)
      000979 77               [ 7] 1584 	ld	(hl), a
                                   1585 ;src\mytestrom.c:1100: object[t].status = 255;		// 0 is for inactive
      00097A 21 06 00         [10] 1586 	ld	hl, #0x0006
      00097D 19               [11] 1587 	add	hl, de
      00097E 36 FF            [10] 1588 	ld	(hl), #0xff
                                   1589 ;src\mytestrom.c:1095: for (t=0;t<MaxObjNum;t++)
      000980 DD 34 FF         [23] 1590 	inc	-1 (ix)
      000983 DD 7E FF         [19] 1591 	ld	a, -1 (ix)
      000986 D6 08            [ 7] 1592 	sub	a, #0x08
      000988 DArFCr08         [10] 1593 	jp	C, 00102$
                                   1594 ;src\mytestrom.c:1102: }
      00098B DD F9            [10] 1595 	ld	sp, ix
      00098D DD E1            [14] 1596 	pop	ix
      00098F C9               [10] 1597 	ret
                                   1598 ;src\mytestrom.c:1110: void ObjectstoVRAM(int MapX) __sdcccall(1)
                                   1599 ;	---------------------------------
                                   1600 ; Function ObjectstoVRAM
                                   1601 ; ---------------------------------
      000990                       1602 _ObjectstoVRAM::
      000990 DD E5            [15] 1603 	push	ix
      000992 DD 21 00 00      [14] 1604 	ld	ix,#0
      000996 DD 39            [15] 1605 	add	ix,sp
      000998 F5               [11] 1606 	push	af
      000999 F5               [11] 1607 	push	af
      00099A 3B               [ 6] 1608 	dec	sp
      00099B DD 75 FD         [19] 1609 	ld	-3 (ix), l
      00099E DD 74 FE         [19] 1610 	ld	-2 (ix), h
                                   1611 ;src\mytestrom.c:1119: if (cursat==0) {
      0009A1 3Ar2Cr00         [13] 1612 	ld	a, (_cursat+0)
      0009A4 B7               [ 4] 1613 	or	a, a
      0009A5 20 0D            [12] 1614 	jr	NZ, 00102$
                                   1615 ;src\mytestrom.c:1120: SetVramW(0,0xFA00);	// sat 0
      0009A7 11 00 FA         [10] 1616 	ld	de, #0xfa00
      0009AA AF               [ 4] 1617 	xor	a, a
      0009AB CDr0Cr0C         [17] 1618 	call	_SetVramW
                                   1619 ;src\mytestrom.c:1121: q = &object[MaxObjNum-1];
      0009AE 11r60r0B         [10] 1620 	ld	de, #_object+49
      0009B1 C3rBFr09         [10] 1621 	jp	00122$
      0009B4                       1622 00102$:
                                   1623 ;src\mytestrom.c:1124: SetVramW(1,0xFA00);	// sat 1		
      0009B4 11 00 FA         [10] 1624 	ld	de, #0xfa00
      0009B7 3E 01            [ 7] 1625 	ld	a, #0x01
      0009B9 CDr0Cr0C         [17] 1626 	call	_SetVramW
                                   1627 ;src\mytestrom.c:1125: q = &object[0];		
      0009BC 11r2Fr0B         [10] 1628 	ld	de, #_object
                                   1629 ;src\mytestrom.c:1129: for (t=0; t<MaxObjNum; t++) 
      0009BF                       1630 00122$:
      0009BF DD 36 FF 00      [19] 1631 	ld	-1 (ix), #0x00
      0009C3                       1632 00113$:
                                   1633 ;src\mytestrom.c:1132: u = q->x-(((unsigned int) MapX) & 0xFFF0);
      0009C3 6B               [ 4] 1634 	ld	l, e
      0009C4 62               [ 4] 1635 	ld	h, d
      0009C5 4E               [ 7] 1636 	ld	c, (hl)
      0009C6 23               [ 6] 1637 	inc	hl
      0009C7 46               [ 7] 1638 	ld	b, (hl)
      0009C8 DD 7E FD         [19] 1639 	ld	a, -3 (ix)
      0009CB DD 6E FE         [19] 1640 	ld	l, -2 (ix)
                                   1641 ;	spillPairReg hl
                                   1642 ;	spillPairReg hl
      0009CE E6 F0            [ 7] 1643 	and	a, #0xf0
      0009D0 DD 77 FB         [19] 1644 	ld	-5 (ix), a
      0009D3 DD 75 FC         [19] 1645 	ld	-4 (ix), l
      0009D6 21r67r0B         [10] 1646 	ld	hl, #_u
      0009D9 79               [ 4] 1647 	ld	a, c
      0009DA DD 96 FB         [19] 1648 	sub	a, -5 (ix)
      0009DD 77               [ 7] 1649 	ld	(hl), a
      0009DE 78               [ 4] 1650 	ld	a, b
      0009DF DD 9E FC         [19] 1651 	sbc	a, -4 (ix)
      0009E2 23               [ 6] 1652 	inc	hl
      0009E3 77               [ 7] 1653 	ld	(hl), a
                                   1654 ;src\mytestrom.c:1133: y = q->y;
      0009E4 4B               [ 4] 1655 	ld	c, e
      0009E5 42               [ 4] 1656 	ld	b, d
      0009E6 03               [ 6] 1657 	inc	bc
      0009E7 03               [ 6] 1658 	inc	bc
      0009E8 0A               [ 7] 1659 	ld	a, (bc)
      0009E9 32r69r0B         [13] 1660 	ld	(_y+0), a
                                   1661 ;src\mytestrom.c:1134: x = u;
      0009EC 3Ar67r0B         [13] 1662 	ld	a, (_u+0)
      0009EF 32r6Ar0B         [13] 1663 	ld	(_x+0), a
                                   1664 ;src\mytestrom.c:1135: v = q->frame<<4;
      0009F2 D5               [11] 1665 	push	de
      0009F3 FD E1            [14] 1666 	pop	iy
      0009F5 FD 7E 05         [19] 1667 	ld	a, 5 (iy)
      0009F8 87               [ 4] 1668 	add	a, a
      0009F9 87               [ 4] 1669 	add	a, a
      0009FA 87               [ 4] 1670 	add	a, a
      0009FB 87               [ 4] 1671 	add	a, a
      0009FC 32r6Br0B         [13] 1672 	ld	(_v+0), a
                                   1673 ;src\mytestrom.c:1137: if (q->status && (q->x - MapX >= 0) && (q->x - MapX < WindowW-16)) 
      0009FF D5               [11] 1674 	push	de
      000A00 FD E1            [14] 1675 	pop	iy
      000A02 FD 7E 06         [19] 1676 	ld	a, 6 (iy)
      000A05 B7               [ 4] 1677 	or	a, a
      000A06 CAr74r0A         [10] 1678 	jp	Z, 00105$
      000A09 6B               [ 4] 1679 	ld	l, e
      000A0A 62               [ 4] 1680 	ld	h, d
      000A0B 4E               [ 7] 1681 	ld	c, (hl)
      000A0C 23               [ 6] 1682 	inc	hl
      000A0D 46               [ 7] 1683 	ld	b, (hl)
      000A0E 79               [ 4] 1684 	ld	a, c
      000A0F DD 96 FD         [19] 1685 	sub	a, -3 (ix)
      000A12 4F               [ 4] 1686 	ld	c, a
      000A13 78               [ 4] 1687 	ld	a, b
      000A14 DD 9E FE         [19] 1688 	sbc	a, -2 (ix)
      000A17 47               [ 4] 1689 	ld	b, a
      000A18 CB 78            [ 8] 1690 	bit	7, b
      000A1A C2r74r0A         [10] 1691 	jp	NZ, 00105$
      000A1D 79               [ 4] 1692 	ld	a, c
      000A1E D6 E0            [ 7] 1693 	sub	a, #0xe0
      000A20 78               [ 4] 1694 	ld	a, b
      000A21 DE 00            [ 7] 1695 	sbc	a, #0x00
      000A23 D2r74r0A         [10] 1696 	jp	NC, 00105$
                                   1697 ;src\mytestrom.c:1169: __endasm;
      000A26 0E 98            [ 7] 1698 	ld	c,#0x98
                                   1699 	.rept	2
                                   1700 	ld	hl,#_y
                                   1701 	outi
                                   1702 	outi
                                   1703 	outi
                                   1704 	ld	a, (_v)
                                   1705 	out	(#0x98),a
                                   1706 	add	a, #4
                                   1707 	ld	(_v),a
                                   1708 	.endm
      000A28 21r69r0B         [10]    1 	ld	hl,#_y
      000A2B ED A3            [16]    2 	outi
      000A2D ED A3            [16]    3 	outi
      000A2F ED A3            [16]    4 	outi
      000A31 3Ar6Br0B         [13]    5 	ld	a, (_v)
      000A34 D3 98            [11]    6 	out	(#0x98),a
      000A36 C6 04            [ 7]    7 	add	a, #4
      000A38 32r6Br0B         [13]    8 	ld	(_v),a
      000A3B 21r69r0B         [10]    1 	ld	hl,#_y
      000A3E ED A3            [16]    2 	outi
      000A40 ED A3            [16]    3 	outi
      000A42 ED A3            [16]    4 	outi
      000A44 3Ar6Br0B         [13]    5 	ld	a, (_v)
      000A47 D3 98            [11]    6 	out	(#0x98),a
      000A49 C6 04            [ 7]    7 	add	a, #4
      000A4B 32r6Br0B         [13]    8 	ld	(_v),a
      000A4E 21r69r0B         [10] 1709 	ld	hl,#_y
      000A51 3E 10            [ 7] 1710 	ld	a,#16
      000A53 86               [ 7] 1711 	add	a,(hl)
      000A54 77               [ 7] 1712 	ld	(hl),a
      000A55 ED A3            [16] 1713 	outi
      000A57 ED A3            [16] 1714 	outi
      000A59 ED A3            [16] 1715 	outi
      000A5B 3Ar6Br0B         [13] 1716 	ld	a,(_v)
      000A5E D3 98            [11] 1717 	out	(#0x98),a
      000A60 C6 04            [ 7] 1718 	add	a, #4
      000A62 32r6Br0B         [13] 1719 	ld	(_v),a
      000A65 21r69r0B         [10] 1720 	ld	hl,#_y
      000A68 ED A3            [16] 1721 	outi
      000A6A ED A3            [16] 1722 	outi
      000A6C ED A3            [16] 1723 	outi
      000A6E 00               [ 4] 1724 	nop
      000A6F D3 98            [11] 1725 	out	(#0x98),a
      000A71 C3rA6r0A         [10] 1726 	jp	00106$
      000A74                       1727 00105$:
                                   1728 ;src\mytestrom.c:1178: __endasm;
      000A74 3E D9            [ 7] 1729 	ld	a,#217
                                   1730 	.rept	16
                                   1731 	out	(#0x98),a
                                   1732 	nop
                                   1733 	.endm
      000A76 D3 98            [11]    1 	out	(#0x98),a
      000A78 00               [ 4]    2 	nop
      000A79 D3 98            [11]    1 	out	(#0x98),a
      000A7B 00               [ 4]    2 	nop
      000A7C D3 98            [11]    1 	out	(#0x98),a
      000A7E 00               [ 4]    2 	nop
      000A7F D3 98            [11]    1 	out	(#0x98),a
      000A81 00               [ 4]    2 	nop
      000A82 D3 98            [11]    1 	out	(#0x98),a
      000A84 00               [ 4]    2 	nop
      000A85 D3 98            [11]    1 	out	(#0x98),a
      000A87 00               [ 4]    2 	nop
      000A88 D3 98            [11]    1 	out	(#0x98),a
      000A8A 00               [ 4]    2 	nop
      000A8B D3 98            [11]    1 	out	(#0x98),a
      000A8D 00               [ 4]    2 	nop
      000A8E D3 98            [11]    1 	out	(#0x98),a
      000A90 00               [ 4]    2 	nop
      000A91 D3 98            [11]    1 	out	(#0x98),a
      000A93 00               [ 4]    2 	nop
      000A94 D3 98            [11]    1 	out	(#0x98),a
      000A96 00               [ 4]    2 	nop
      000A97 D3 98            [11]    1 	out	(#0x98),a
      000A99 00               [ 4]    2 	nop
      000A9A D3 98            [11]    1 	out	(#0x98),a
      000A9C 00               [ 4]    2 	nop
      000A9D D3 98            [11]    1 	out	(#0x98),a
      000A9F 00               [ 4]    2 	nop
      000AA0 D3 98            [11]    1 	out	(#0x98),a
      000AA2 00               [ 4]    2 	nop
      000AA3 D3 98            [11]    1 	out	(#0x98),a
      000AA5 00               [ 4]    2 	nop
      000AA6                       1734 00106$:
                                   1735 ;src\mytestrom.c:1180: if (cursat==0) {
      000AA6 3Ar2Cr00         [13] 1736 	ld	a, (_cursat+0)
      000AA9 B7               [ 4] 1737 	or	a, a
      000AAA 20 0B            [12] 1738 	jr	NZ, 00110$
                                   1739 ;src\mytestrom.c:1181: q--;
      000AAC 7B               [ 4] 1740 	ld	a, e
      000AAD C6 F9            [ 7] 1741 	add	a, #0xf9
      000AAF 5F               [ 4] 1742 	ld	e, a
      000AB0 7A               [ 4] 1743 	ld	a, d
      000AB1 CE FF            [ 7] 1744 	adc	a, #0xff
      000AB3 57               [ 4] 1745 	ld	d, a
      000AB4 C3rBCr0A         [10] 1746 	jp	00114$
      000AB7                       1747 00110$:
                                   1748 ;src\mytestrom.c:1184: q++;
      000AB7 21 07 00         [10] 1749 	ld	hl, #0x0007
      000ABA 19               [11] 1750 	add	hl, de
      000ABB EB               [ 4] 1751 	ex	de, hl
      000ABC                       1752 00114$:
                                   1753 ;src\mytestrom.c:1129: for (t=0; t<MaxObjNum; t++) 
      000ABC DD 34 FF         [23] 1754 	inc	-1 (ix)
      000ABF DD 7E FF         [19] 1755 	ld	a, -1 (ix)
      000AC2 D6 08            [ 7] 1756 	sub	a, #0x08
      000AC4 DArC3r09         [10] 1757 	jp	C, 00113$
                                   1758 ;src\mytestrom.c:1190: }
      000AC7 DD F9            [10] 1759 	ld	sp, ix
      000AC9 DD E1            [14] 1760 	pop	ix
      000ACB C9               [10] 1761 	ret
                                   1762 ;src\mytestrom.c:1194: void UpdateColor(char plane,char frame,char nsat) __sdcccall(1){
                                   1763 ;	---------------------------------
                                   1764 ; Function UpdateColor
                                   1765 ; ---------------------------------
      000ACC                       1766 _UpdateColor::
      000ACC DD E5            [15] 1767 	push	ix
      000ACE DD 21 00 00      [14] 1768 	ld	ix,#0
      000AD2 DD 39            [15] 1769 	add	ix,sp
      000AD4 5F               [ 4] 1770 	ld	e, a
                                   1771 ;src\mytestrom.c:1197: SetVramW(1,0xF800+plane*16);
      000AD5 16 00            [ 7] 1772 	ld	d, #0x00
      000AD7 EB               [ 4] 1773 	ex	de, hl
      000AD8 29               [11] 1774 	add	hl, hl
      000AD9 29               [11] 1775 	add	hl, hl
      000ADA 29               [11] 1776 	add	hl, hl
      000ADB 29               [11] 1777 	add	hl, hl
      000ADC EB               [ 4] 1778 	ex	de, hl
      000ADD 7A               [ 4] 1779 	ld	a, d
      000ADE C6 F8            [ 7] 1780 	add	a, #0xf8
      000AE0 57               [ 4] 1781 	ld	d, a
                                   1782 ;src\mytestrom.c:1196: if (nsat)
      000AE1 DD 7E 04         [19] 1783 	ld	a, 4 (ix)
      000AE4 B7               [ 4] 1784 	or	a, a
      000AE5 28 0A            [12] 1785 	jr	Z, 00102$
                                   1786 ;src\mytestrom.c:1197: SetVramW(1,0xF800+plane*16);
      000AE7 E5               [11] 1787 	push	hl
      000AE8 3E 01            [ 7] 1788 	ld	a, #0x01
      000AEA CDr0Cr0C         [17] 1789 	call	_SetVramW
      000AED E1               [10] 1790 	pop	hl
      000AEE C3rF7r0A         [10] 1791 	jp	00103$
      000AF1                       1792 00102$:
                                   1793 ;src\mytestrom.c:1199: SetVramW(0,0xF800+plane*16);
      000AF1 E5               [11] 1794 	push	hl
      000AF2 AF               [ 4] 1795 	xor	a, a
      000AF3 CDr0Cr0C         [17] 1796 	call	_SetVramW
      000AF6 E1               [10] 1797 	pop	hl
      000AF7                       1798 00103$:
                                   1799 ;src\mytestrom.c:1201: VramWrite(((unsigned int) &sprite_colors) + frame*64,64);
      000AF7 01r00r00         [10] 1800 	ld	bc, #_sprite_colors
      000AFA 26 00            [ 7] 1801 	ld	h, #0x00
                                   1802 ;	spillPairReg hl
                                   1803 ;	spillPairReg hl
      000AFC 29               [11] 1804 	add	hl, hl
      000AFD 29               [11] 1805 	add	hl, hl
      000AFE 29               [11] 1806 	add	hl, hl
      000AFF 29               [11] 1807 	add	hl, hl
      000B00 29               [11] 1808 	add	hl, hl
      000B01 29               [11] 1809 	add	hl, hl
      000B02 09               [11] 1810 	add	hl, bc
      000B03 11 40 00         [10] 1811 	ld	de, #0x0040
      000B06 CDr02r0C         [17] 1812 	call	_VramWrite
                                   1813 ;src\mytestrom.c:1202: }
      000B09 DD E1            [14] 1814 	pop	ix
      000B0B E1               [10] 1815 	pop	hl
      000B0C 33               [ 6] 1816 	inc	sp
      000B0D E9               [ 4] 1817 	jp	(hl)
                                   1818 ;src\mytestrom.c:1204: void UpdateFrame(char plane,char frame,char nsat) __sdcccall(1){
                                   1819 ;	---------------------------------
                                   1820 ; Function UpdateFrame
                                   1821 ; ---------------------------------
      000B0E                       1822 _UpdateFrame::
      000B0E DD E5            [15] 1823 	push	ix
      000B10 DD 21 00 00      [14] 1824 	ld	ix,#0
      000B14 DD 39            [15] 1825 	add	ix,sp
      000B16 5F               [ 4] 1826 	ld	e, a
                                   1827 ;src\mytestrom.c:1207: SetVramW(0,0xF000+plane*32);
      000B17 16 00            [ 7] 1828 	ld	d, #0x00
      000B19 EB               [ 4] 1829 	ex	de, hl
      000B1A 29               [11] 1830 	add	hl, hl
      000B1B 29               [11] 1831 	add	hl, hl
      000B1C 29               [11] 1832 	add	hl, hl
      000B1D 29               [11] 1833 	add	hl, hl
      000B1E 29               [11] 1834 	add	hl, hl
      000B1F EB               [ 4] 1835 	ex	de, hl
                                   1836 ;src\mytestrom.c:1206: if (nsat)
      000B20 DD 7E 04         [19] 1837 	ld	a, 4 (ix)
      000B23 B7               [ 4] 1838 	or	a, a
      000B24 28 0D            [12] 1839 	jr	Z, 00102$
                                   1840 ;src\mytestrom.c:1207: SetVramW(0,0xF000+plane*32);
      000B26 7A               [ 4] 1841 	ld	a, d
      000B27 C6 F0            [ 7] 1842 	add	a, #0xf0
      000B29 57               [ 4] 1843 	ld	d, a
      000B2A E5               [11] 1844 	push	hl
      000B2B AF               [ 4] 1845 	xor	a, a
      000B2C CDr0Cr0C         [17] 1846 	call	_SetVramW
      000B2F E1               [10] 1847 	pop	hl
      000B30 C3r3Dr0B         [10] 1848 	jp	00103$
      000B33                       1849 00102$:
                                   1850 ;src\mytestrom.c:1209: SetVramW(0,0xF000+32*32+plane*32);
      000B33 7A               [ 4] 1851 	ld	a, d
      000B34 C6 F4            [ 7] 1852 	add	a, #0xf4
      000B36 57               [ 4] 1853 	ld	d, a
      000B37 E5               [11] 1854 	push	hl
      000B38 AF               [ 4] 1855 	xor	a, a
      000B39 CDr0Cr0C         [17] 1856 	call	_SetVramW
      000B3C E1               [10] 1857 	pop	hl
      000B3D                       1858 00103$:
                                   1859 ;src\mytestrom.c:1211: VramWrite(((unsigned int) &sprite_patterns) + frame*128,128);
      000B3D 01r00r00         [10] 1860 	ld	bc, #_sprite_patterns
      000B40 AF               [ 4] 1861 	xor	a, a
      000B41 CB 1F            [ 8] 1862 	rr	a
      000B43 65               [ 4] 1863 	ld	h, l
      000B44 CB 1C            [ 8] 1864 	rr	h
      000B46 1F               [ 4] 1865 	rra
      000B47 6F               [ 4] 1866 	ld	l, a
      000B48 09               [11] 1867 	add	hl, bc
      000B49 11 80 00         [10] 1868 	ld	de, #0x0080
      000B4C CDr02r0C         [17] 1869 	call	_VramWrite
                                   1870 ;src\mytestrom.c:1212: }
      000B4F DD E1            [14] 1871 	pop	ix
      000B51 E1               [10] 1872 	pop	hl
      000B52 33               [ 6] 1873 	inc	sp
      000B53 E9               [ 4] 1874 	jp	(hl)
                                   1875 ;src\mytestrom.c:1267: void SprtInit(void) __sdcccall(1) 
                                   1876 ;	---------------------------------
                                   1877 ; Function SprtInit
                                   1878 ; ---------------------------------
      000B54                       1879 _SprtInit::
                                   1880 ;src\mytestrom.c:1271: RG1SAV |= 2;
      000B54 3A E0 F3         [13] 1881 	ld	a, (_RG1SAV+0)
      000B57 F6 02            [ 7] 1882 	or	a, #0x02
      000B59 32 E0 F3         [13] 1883 	ld	(_RG1SAV+0), a
                                   1884 ;src\mytestrom.c:1272: myVDPwrite(RG1SAV,1);
      000B5C 2E 01            [ 7] 1885 	ld	l, #0x01
                                   1886 ;	spillPairReg hl
                                   1887 ;	spillPairReg hl
      000B5E 3A E0 F3         [13] 1888 	ld	a, (_RG1SAV+0)
      000B61 CDrCAr06         [17] 1889 	call	_myVDPwrite
                                   1890 ;src\mytestrom.c:1273: RG8SAV |= 32;
      000B64 3A E7 FF         [13] 1891 	ld	a, (_RG8SAV+0)
      000B67 F6 20            [ 7] 1892 	or	a, #0x20
      000B69 32 E7 FF         [13] 1893 	ld	(_RG8SAV+0), a
                                   1894 ;src\mytestrom.c:1274: myVDPwrite(RG8SAV,8);
      000B6C 2E 08            [ 7] 1895 	ld	l, #0x08
                                   1896 ;	spillPairReg hl
                                   1897 ;	spillPairReg hl
      000B6E 3A E7 FF         [13] 1898 	ld	a, (_RG8SAV+0)
      000B71 CDrCAr06         [17] 1899 	call	_myVDPwrite
                                   1900 ;src\mytestrom.c:1284: __endasm;
      000B74 3Er00            [ 7] 1901 	ld	a,#b_sprite_colors
      000B76 32 00 90         [13] 1902 	ld	(#0x9000),a
      000B79 32r00r00         [13] 1903 	ld	(#_curr_bank),a
      000B7C 3C               [ 4] 1904 	inc	a
      000B7D 32 00 B0         [13] 1905 	ld	(#0xb000),a
                                   1906 ;src\mytestrom.c:1287: SetVramW(0,0xF800);					// sat 0
      000B80 11 00 F8         [10] 1907 	ld	de, #0xf800
      000B83 AF               [ 4] 1908 	xor	a, a
      000B84 CDr0Cr0C         [17] 1909 	call	_SetVramW
                                   1910 ;src\mytestrom.c:1288: for (t=0; t<MaxObjNum; t++) {
      000B87 0E 00            [ 7] 1911 	ld	c, #0x00
      000B89                       1912 00104$:
                                   1913 ;src\mytestrom.c:1289: VramWrite(((unsigned int) &sprite_colors) + (MaxObjNum-1-t)*64,64);
      000B89 11r00r00         [10] 1914 	ld	de, #_sprite_colors
      000B8C 69               [ 4] 1915 	ld	l, c
                                   1916 ;	spillPairReg hl
                                   1917 ;	spillPairReg hl
      000B8D 26 00            [ 7] 1918 	ld	h, #0x00
                                   1919 ;	spillPairReg hl
                                   1920 ;	spillPairReg hl
      000B8F 3E 07            [ 7] 1921 	ld	a, #0x07
      000B91 95               [ 4] 1922 	sub	a, l
      000B92 6F               [ 4] 1923 	ld	l, a
                                   1924 ;	spillPairReg hl
                                   1925 ;	spillPairReg hl
      000B93 9F               [ 4] 1926 	sbc	a, a
      000B94 94               [ 4] 1927 	sub	a, h
      000B95 67               [ 4] 1928 	ld	h, a
      000B96 29               [11] 1929 	add	hl, hl
      000B97 29               [11] 1930 	add	hl, hl
      000B98 29               [11] 1931 	add	hl, hl
      000B99 29               [11] 1932 	add	hl, hl
      000B9A 29               [11] 1933 	add	hl, hl
      000B9B 29               [11] 1934 	add	hl, hl
      000B9C 19               [11] 1935 	add	hl, de
      000B9D C5               [11] 1936 	push	bc
      000B9E 11 40 00         [10] 1937 	ld	de, #0x0040
      000BA1 CDr02r0C         [17] 1938 	call	_VramWrite
      000BA4 C1               [10] 1939 	pop	bc
                                   1940 ;src\mytestrom.c:1288: for (t=0; t<MaxObjNum; t++) {
      000BA5 0C               [ 4] 1941 	inc	c
      000BA6 79               [ 4] 1942 	ld	a, c
      000BA7 D6 08            [ 7] 1943 	sub	a, #0x08
      000BA9 38 DE            [12] 1944 	jr	C, 00104$
                                   1945 ;src\mytestrom.c:1292: SetVramW(1,0xF800);					// sat 1
      000BAB 11 00 F8         [10] 1946 	ld	de, #0xf800
      000BAE 3E 01            [ 7] 1947 	ld	a, #0x01
      000BB0 CDr0Cr0C         [17] 1948 	call	_SetVramW
                                   1949 ;src\mytestrom.c:1293: for (t=0; t<MaxObjNum; t++) {
      000BB3 0E 00            [ 7] 1950 	ld	c, #0x00
      000BB5                       1951 00106$:
                                   1952 ;src\mytestrom.c:1294: VramWrite(((unsigned int) &sprite_colors) + t*64,64);
      000BB5 11r00r00         [10] 1953 	ld	de, #_sprite_colors
      000BB8 69               [ 4] 1954 	ld	l, c
                                   1955 ;	spillPairReg hl
                                   1956 ;	spillPairReg hl
      000BB9 26 00            [ 7] 1957 	ld	h, #0x00
                                   1958 ;	spillPairReg hl
                                   1959 ;	spillPairReg hl
      000BBB 29               [11] 1960 	add	hl, hl
      000BBC 29               [11] 1961 	add	hl, hl
      000BBD 29               [11] 1962 	add	hl, hl
      000BBE 29               [11] 1963 	add	hl, hl
      000BBF 29               [11] 1964 	add	hl, hl
      000BC0 29               [11] 1965 	add	hl, hl
      000BC1 19               [11] 1966 	add	hl, de
      000BC2 C5               [11] 1967 	push	bc
      000BC3 11 40 00         [10] 1968 	ld	de, #0x0040
      000BC6 CDr02r0C         [17] 1969 	call	_VramWrite
      000BC9 C1               [10] 1970 	pop	bc
                                   1971 ;src\mytestrom.c:1293: for (t=0; t<MaxObjNum; t++) {
      000BCA 0C               [ 4] 1972 	inc	c
      000BCB 79               [ 4] 1973 	ld	a, c
      000BCC D6 08            [ 7] 1974 	sub	a, #0x08
      000BCE 38 E5            [12] 1975 	jr	C, 00106$
                                   1976 ;src\mytestrom.c:1304: __endasm;
      000BD0 3Er00            [ 7] 1977 	ld	a,#b_sprite_patterns
      000BD2 32 00 90         [13] 1978 	ld	(#0x9000),a
      000BD5 32r00r00         [13] 1979 	ld	(#_curr_bank),a
      000BD8 3C               [ 4] 1980 	inc	a
      000BD9 32 00 B0         [13] 1981 	ld	(#0xb000),a
                                   1982 ;src\mytestrom.c:1306: SetVramW(0,0xF000);					// sprite patterns	
      000BDC 11 00 F0         [10] 1983 	ld	de, #0xf000
      000BDF AF               [ 4] 1984 	xor	a, a
      000BE0 CDr0Cr0C         [17] 1985 	call	_SetVramW
                                   1986 ;src\mytestrom.c:1307: for (t=0; t<MaxObjNum; t++) {	
      000BE3 0E 00            [ 7] 1987 	ld	c, #0x00
      000BE5                       1988 00108$:
                                   1989 ;src\mytestrom.c:1308: VramWrite(((unsigned int) &sprite_patterns) + t*128,128);
      000BE5 11r00r00         [10] 1990 	ld	de, #_sprite_patterns
      000BE8 69               [ 4] 1991 	ld	l, c
                                   1992 ;	spillPairReg hl
                                   1993 ;	spillPairReg hl
                                   1994 ;	spillPairReg hl
                                   1995 ;	spillPairReg hl
      000BE9 AF               [ 4] 1996 	xor	a, a
      000BEA 67               [ 4] 1997 	ld	h, a
      000BEB CB 1C            [ 8] 1998 	rr	h
      000BED 65               [ 4] 1999 	ld	h, l
      000BEE CB 1C            [ 8] 2000 	rr	h
      000BF0 1F               [ 4] 2001 	rra
      000BF1 6F               [ 4] 2002 	ld	l, a
                                   2003 ;	spillPairReg hl
                                   2004 ;	spillPairReg hl
      000BF2 19               [11] 2005 	add	hl, de
      000BF3 C5               [11] 2006 	push	bc
      000BF4 11 80 00         [10] 2007 	ld	de, #0x0080
      000BF7 CDr02r0C         [17] 2008 	call	_VramWrite
      000BFA C1               [10] 2009 	pop	bc
                                   2010 ;src\mytestrom.c:1307: for (t=0; t<MaxObjNum; t++) {	
      000BFB 0C               [ 4] 2011 	inc	c
      000BFC 79               [ 4] 2012 	ld	a, c
      000BFD D6 08            [ 7] 2013 	sub	a, #0x08
      000BFF 38 E4            [12] 2014 	jr	C, 00108$
                                   2015 ;src\mytestrom.c:1310: }
      000C01 C9               [10] 2016 	ret
                                   2017 ;src\mytestrom.c:1312: void VramWrite(unsigned int addr, unsigned int len) __sdcccall(1) __naked
                                   2018 ;	---------------------------------
                                   2019 ; Function VramWrite
                                   2020 ; ---------------------------------
      000C02                       2021 _VramWrite::
                                   2022 ;src\mytestrom.c:1325: __endasm;		
      000C02 0E 98            [ 7] 2023 	ld	c,#0x98
      000C04                       2024 	095$:
      000C04 ED A3            [16] 2025 	outi
      000C06 1B               [ 6] 2026 	dec	de
      000C07 7A               [ 4] 2027 	ld	a,d
      000C08 B3               [ 4] 2028 	or	a,e
      000C09 20 F9            [12] 2029 	jr	nz,095$
      000C0B C9               [10] 2030 	ret
                                   2031 ;src\mytestrom.c:1326: }
                                   2032 ;src\mytestrom.c:1328: void SetVramW(char page, unsigned int addr) __sdcccall(1) __naked {
                                   2033 ;	---------------------------------
                                   2034 ; Function SetVramW
                                   2035 ; ---------------------------------
      000C0C                       2036 _SetVramW::
                                   2037 ;src\mytestrom.c:1353: __endasm;		
                                   2038 ;	Set VDP address counter to write from address ADE (17-bit)
                                   2039 ;	Enables the interrupts
      000C0C EB               [ 4] 2040 	ex	de,hl
      000C0D CB 04            [ 8] 2041 	rlc	h
      000C0F 17               [ 4] 2042 	rla
      000C10 CB 04            [ 8] 2043 	rlc	h
      000C12 17               [ 4] 2044 	rla
      000C13 CB 3C            [ 8] 2045 	srl	h
      000C15 CB 3C            [ 8] 2046 	srl	h
      000C17 F3               [ 4] 2047 	di
      000C18 D3 99            [11] 2048 	out	(#0x99),a
      000C1A 3E 8E            [ 7] 2049 	ld	a,#0x8E
      000C1C D3 99            [11] 2050 	out	(#0x99),a
      000C1E 7D               [ 4] 2051 	ld	a,l
      000C1F D3 99            [11] 2052 	out	(#0x99),a
      000C21 7C               [ 4] 2053 	ld	a,h
      000C22 F6 40            [ 7] 2054 	or	a,#0x40
      000C24 FB               [ 4] 2055 	ei
      000C25 D3 99            [11] 2056 	out	(#0x99),a
      000C27 EB               [ 4] 2057 	ex	de,hl
      000C28 C9               [10] 2058 	ret
                                   2059 ;src\mytestrom.c:1354: }
                                   2060 ;src\mytestrom.c:1357: void chgmod(char c) __sdcccall(1) __naked {
                                   2061 ;	---------------------------------
                                   2062 ; Function chgmod
                                   2063 ; ---------------------------------
      000C29                       2064 _chgmod::
                                   2065 ;src\mytestrom.c:1361: __endasm;
      000C29 C3 5F 00         [10] 2066 	jp	0x005f
                                   2067 ;src\mytestrom.c:1362: }
                                   2068 ;src\mytestrom.c:1364: void putch(char c) __sdcccall(1) __naked {
                                   2069 ;	---------------------------------
                                   2070 ; Function putch
                                   2071 ; ---------------------------------
      000C2C                       2072 _putch::
                                   2073 ;src\mytestrom.c:1368: __endasm;
      000C2C C3 A2 00         [10] 2074 	jp	0x00a2
                                   2075 ;src\mytestrom.c:1369: }
                                   2076 ;src\mytestrom.c:1372: void	myHMMV( unsigned int DX, unsigned int DY, unsigned int NX, unsigned int NY, char COL) __sdcccall(0) __naked
                                   2077 ;	---------------------------------
                                   2078 ; Function myHMMV
                                   2079 ; ---------------------------------
      000C2F                       2080 _myHMMV::
                                   2081 ;src\mytestrom.c:1435: __endasm;
                                   2082 ;****************************************************************
                                   2083 ;	HMMV painting the rectangle in high speed Eric
                                   2084 ;	void HMMV( unsigned int XS, unsigned int YS, unsigned int DX, unsigned int DY, char COL);
                                   2085 ;
                                   2086 ;****************************************************************
      000C2F DD E5            [15] 2087 	push	ix
      000C31 DD 21 00 00      [14] 2088 	ld	ix,#0
      000C35 DD 39            [15] 2089 	add	ix,sp
      000C37 F3               [ 4] 2090 	di
      000C38 CDrEFr0C         [17] 2091 	call	_myVDPready
      000C3B 3E 24            [ 7] 2092 	ld	a,#36
      000C3D D3 99            [11] 2093 	out	(#0x99),a
      000C3F 3E 91            [ 7] 2094 	ld	a,#128+#17
      000C41 D3 99            [11] 2095 	out	(#0x99),a ;R#17 := 36
      000C43 0E 9B            [ 7] 2096 	ld	c,#0x9b
      000C45 DD 7E 04         [19] 2097 	ld	a,4(ix) ;
      000C48 ED 79            [12] 2098 	out	(c),a ; R36 DX low byte
      000C4A DD 7E 05         [19] 2099 	ld	a,5(ix) ;
      000C4D ED 79            [12] 2100 	out	(c),a ; R37 DX high byte
      000C4F DD 7E 06         [19] 2101 	ld	a,6(ix) ;
      000C52 ED 79            [12] 2102 	out	(c),a ; R38 DY low byte
      000C54 DD 7E 07         [19] 2103 	ld	a,7(ix) ;
      000C57 ED 79            [12] 2104 	out	(c),a ; R39 DY high byte
      000C59 DD 7E 08         [19] 2105 	ld	a,8(ix) ;
      000C5C ED 79            [12] 2106 	out	(c),a ; R40 NX low byte
      000C5E DD 7E 09         [19] 2107 	ld	a,9(ix) ;
      000C61 ED 79            [12] 2108 	out	(c),a ; R41 NX high byte
      000C63 DD 7E 0A         [19] 2109 	ld	a,10(ix) ;
      000C66 ED 79            [12] 2110 	out	(c),a ; R42 NY low byte
      000C68 DD 7E 0B         [19] 2111 	ld	a,11(ix) ;
      000C6B ED 79            [12] 2112 	out	(c),a ; R43 NY high byte
      000C6D DD 7E 0C         [19] 2113 	ld	a,12(ix) ;
      000C70 ED 79            [12] 2114 	out	(c),a ; R44 COL low byte
      000C72 AF               [ 4] 2115 	xor	a ;
      000C73 ED 79            [12] 2116 	out	(c),a ; R45 DIX and DIY ! DX and DY express in incremental direction ! internal VRAM
      000C75 F6 C0            [ 7] 2117 	or	#0b11000000 ;HMMV command
      000C77 ED 79            [12] 2118 	out	(c),a ;do it
      000C79 FB               [ 4] 2119 	ei
      000C7A DD E1            [14] 2120 	pop	ix
      000C7C C9               [10] 2121 	ret
                                   2122 ;src\mytestrom.c:1436: }
                                   2123 ;src\mytestrom.c:1439: void SetDisplayPage(char n) __z88dk_fastcall
                                   2124 ;	---------------------------------
                                   2125 ; Function SetDisplayPage
                                   2126 ; ---------------------------------
      000C7D                       2127 _SetDisplayPage::
                                   2128 ;src\mytestrom.c:1466: __endasm;
                                   2129 ;----------------------------
                                   2130 ;	void SetDisplayPage(char n)
                                   2131 ;	MSX2 Show the specified VRAM Page at Screen
                                   2132 ;
      000C7D 7D               [ 4] 2133 	ld	a,l
      000C7E 17               [ 4] 2134 	rla
      000C7F 17               [ 4] 2135 	rla
      000C80 17               [ 4] 2136 	rla
      000C81 17               [ 4] 2137 	rla
      000C82 17               [ 4] 2138 	rla
      000C83 E6 7F            [ 7] 2139 	and	#0x7F
      000C85 F6 1F            [ 7] 2140 	or	#0x1F
      000C87 47               [ 4] 2141 	ld	b,a
      000C88 3E 02            [ 7] 2142 	ld	a,#2
      000C8A F6 80            [ 7] 2143 	or	#0x80
      000C8C 0E 99            [ 7] 2144 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C8E F3               [ 4] 2145 	di
      000C8F ED 41            [12] 2146 	out	(c), b ;; out data
      000C91 ED 79            [12] 2147 	out	(c), a ;; out VDP register number
      000C93 FB               [ 4] 2148 	ei
      000C94 32 F5 FA         [13] 2149 	ld	(#0xFAF5),a ;; DPPAGE
                                   2150 ;src\mytestrom.c:1467: }
      000C97 C9               [10] 2151 	ret
                                   2152 ;src\mytestrom.c:1472: void VDPlineSwitch(void) 
                                   2153 ;	---------------------------------
                                   2154 ; Function VDPlineSwitch
                                   2155 ; ---------------------------------
      000C98                       2156 _VDPlineSwitch::
                                   2157 ;src\mytestrom.c:1483: __endasm;
      000C98 3A E8 FF         [13] 2158 	ld	a,(#_RG9SAV)
      000C9B EE 80            [ 7] 2159 	xor	a,#0b10000000
      000C9D 32 E8 FF         [13] 2160 	ld	(#_RG9SAV),a
      000CA0 47               [ 4] 2161 	ld	b,a
      000CA1 3E 89            [ 7] 2162 	ld	a,#0x89
      000CA3 0E 99            [ 7] 2163 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000CA5 ED 41            [12] 2164 	out	(c), b ;; out data
      000CA7 ED 79            [12] 2165 	out	(c), a ;; out VDP register number
                                   2166 ;src\mytestrom.c:1484: }
      000CA9 C9               [10] 2167 	ret
                                   2168 ;src\mytestrom.c:1486: void VDP60Hz(void)
                                   2169 ;	---------------------------------
                                   2170 ; Function VDP60Hz
                                   2171 ; ---------------------------------
      000CAA                       2172 _VDP60Hz::
                                   2173 ;src\mytestrom.c:1497: __endasm;
      000CAA 3A E8 FF         [13] 2174 	ld	a,(#_RG9SAV)
      000CAD E6 FD            [ 7] 2175 	and	#0b11111101
      000CAF 32 E8 FF         [13] 2176 	ld	(#_RG9SAV),a
      000CB2 47               [ 4] 2177 	ld	b,a
      000CB3 3E 89            [ 7] 2178 	ld	a,#0x89
      000CB5 0E 99            [ 7] 2179 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000CB7 ED 41            [12] 2180 	out	(c), b ;; out data
      000CB9 ED 79            [12] 2181 	out	(c), a ;; out VDP register number
                                   2182 ;src\mytestrom.c:1498: }
      000CBB C9               [10] 2183 	ret
                                   2184 ;src\mytestrom.c:1500: void PrintChar(char c) 
                                   2185 ;	---------------------------------
                                   2186 ; Function PrintChar
                                   2187 ; ---------------------------------
      000CBC                       2188 _PrintChar::
                                   2189 ;src\mytestrom.c:1511: __endasm;
      000CBC DD E5            [15] 2190 	push	ix
      000CBE DD 21 00 00      [14] 2191 	ld	ix,#0
      000CC2 DD 39            [15] 2192 	add	ix,sp
      000CC4 DD 7E 04         [19] 2193 	ld	a,4(ix)
      000CC7 CD A2 00         [17] 2194 	call	#0xA2 ; Bios CHPUT
      000CCA FB               [ 4] 2195 	ei
      000CCB DD E1            [14] 2196 	pop	ix
                                   2197 ;src\mytestrom.c:1512: }
      000CCD C9               [10] 2198 	ret
                                   2199 ;src\mytestrom.c:1541: void Print(char* text)
                                   2200 ;	---------------------------------
                                   2201 ; Function Print
                                   2202 ; ---------------------------------
      000CCE                       2203 _Print::
                                   2204 ;src\mytestrom.c:1545: while(*(text)) 
      000CCE                       2205 00104$:
      000CCE 7E               [ 7] 2206 	ld	a, (hl)
      000CCF B7               [ 4] 2207 	or	a, a
      000CD0 C8               [11] 2208 	ret	Z
                                   2209 ;src\mytestrom.c:1547: character=*(text++);
      000CD1 23               [ 6] 2210 	inc	hl
                                   2211 ;src\mytestrom.c:1548: if (character=='\n')
      000CD2 4F               [ 4] 2212 	ld	c, a
      000CD3 D6 0A            [ 7] 2213 	sub	a, #0x0a
      000CD5 20 0F            [12] 2214 	jr	NZ, 00102$
                                   2215 ;src\mytestrom.c:1550: PrintChar(10); //LF (Line Feed)
      000CD7 E5               [11] 2216 	push	hl
      000CD8 3E 0A            [ 7] 2217 	ld	a, #0x0a
      000CDA CDrBCr0C         [17] 2218 	call	_PrintChar
      000CDD 3E 0D            [ 7] 2219 	ld	a, #0x0d
      000CDF CDrBCr0C         [17] 2220 	call	_PrintChar
      000CE2 E1               [10] 2221 	pop	hl
      000CE3 C3rCEr0C         [10] 2222 	jp	00104$
      000CE6                       2223 00102$:
                                   2224 ;src\mytestrom.c:1553: PrintChar(character);
      000CE6 E5               [11] 2225 	push	hl
      000CE7 79               [ 4] 2226 	ld	a, c
      000CE8 CDrBCr0C         [17] 2227 	call	_PrintChar
      000CEB E1               [10] 2228 	pop	hl
                                   2229 ;src\mytestrom.c:1556: }
      000CEC C3rCEr0C         [10] 2230 	jp	00104$
                                   2231 ;src\mytestrom.c:1559: void     myVDPready(void) __naked															// Check if MSX2 VDP is ready (Internal Use)
                                   2232 ;	---------------------------------
                                   2233 ; Function myVDPready
                                   2234 ; ---------------------------------
      000CEF                       2235 _myVDPready::
                                   2236 ;src\mytestrom.c:1575: __endasm; 
      000CEF                       2237 	    checkIfReady:
      000CEF 3E 02            [ 7] 2238 	ld	a,#2
      000CF1 D3 99            [11] 2239 	out	(#0x99),a ; wait till previous VDP execution is over (CE)
      000CF3 3E 8F            [ 7] 2240 	ld	a,#128+#15
      000CF5 D3 99            [11] 2241 	out	(#0x99),a
      000CF7 DB 99            [11] 2242 	in	a,(#0x99)
      000CF9 1F               [ 4] 2243 	rra	; check CE (bit#0)
      000CFA 3E 00            [ 7] 2244 	ld	a, #0
      000CFC D3 99            [11] 2245 	out	(#0x99),a
      000CFE 3E 8F            [ 7] 2246 	ld	a,#128+#15
      000D00 D3 99            [11] 2247 	out	(#0x99),a
      000D02 DArEFr0C         [10] 2248 	jp	c, checkIfReady
      000D05 C9               [10] 2249 	ret
                                   2250 ;src\mytestrom.c:1576: }
                                   2251 	.area _BANK0
                                   2252 	.area _INITIALIZER
                                   2253 	.area _CABS (ABS)
