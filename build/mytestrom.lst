                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13049 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module mytestrom
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _PrintChar
                                     12 	.globl _PlotOneColumnTileAndMask
                                     13 	.globl _PlotOneColumnTile
                                     14 	.globl _main
                                     15 	.globl _v
                                     16 	.globl _x
                                     17 	.globl _y
                                     18 	.globl _u
                                     19 	.globl _object
                                     20 	.globl _RG18SA
                                     21 	.globl _RG17SA
                                     22 	.globl _RG16SA
                                     23 	.globl _RG15SA
                                     24 	.globl _RG14SA
                                     25 	.globl _RG13SA
                                     26 	.globl _RG12SA
                                     27 	.globl _RG11SA
                                     28 	.globl _RG10SA
                                     29 	.globl _RG9SAV
                                     30 	.globl _RG8SAV
                                     31 	.globl _RG1SAV
                                     32 	.globl _RG0SAV
                                     33 	.globl _LevelMap
                                     34 	.globl _cursat
                                     35 	.globl _OldIsr
                                     36 	.globl _page
                                     37 	.globl _newx
                                     38 	.globl _WLevelDY
                                     39 	.globl _WLevelDX
                                     40 	.globl _LevelH
                                     41 	.globl _LevelW
                                     42 	.globl _WLevely
                                     43 	.globl _WLevelx
                                     44 	.globl _ScrollRight
                                     45 	.globl _ScrollLeft
                                     46 	.globl _BorderLinesL
                                     47 	.globl _BorderLinesR
                                     48 	.globl _NewLine
                                     49 	.globl _PatchPlotOneTile
                                     50 	.globl _myVDPwrite
                                     51 	.globl _myInPort
                                     52 	.globl _myOutPort
                                     53 	.globl _myfVDP
                                     54 	.globl _mySetAdjust
                                     55 	.globl _myFT_wait
                                     56 	.globl _WaitLineInt
                                     57 	.globl _FT_errorHandler
                                     58 	.globl _MyLoadMap
                                     59 	.globl _myISR
                                     60 	.globl _myInstISR
                                     61 	.globl _myISRrestore
                                     62 	.globl _myCheckkbd
                                     63 	.globl _ObjectsInit
                                     64 	.globl _ObjectstoVRAM
                                     65 	.globl _UpdateColor
                                     66 	.globl _UpdateFrame
                                     67 	.globl _SprtInit
                                     68 	.globl _VramWrite
                                     69 	.globl _SetVramW
                                     70 	.globl _chgmod
                                     71 	.globl _putch
                                     72 	.globl _myHMMV
                                     73 	.globl _SetDisplayPage
                                     74 	.globl _VDPlineSwitch
                                     75 	.globl _VDP60Hz
                                     76 	.globl _Print
                                     77 	.globl _myVDPready
                                     78 	.globl _sprite_patterns
                                     79 	.globl _sprite_colors
                                     80 	.globl _DataLevelMap
                                     81 ;--------------------------------------------------------
                                     82 ; special function registers
                                     83 ;--------------------------------------------------------
                                     84 ;--------------------------------------------------------
                                     85 ; ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area _DATA
      000000                         88 _MyCommand:
      000000                         89 	.ds 15
      00000F                         90 _MyBorder:
      00000F                         91 	.ds 15
      00001E                         92 _WLevelx::
      00001E                         93 	.ds 2
      000020                         94 _WLevely::
      000020                         95 	.ds 1
      000021                         96 _LevelW::
      000021                         97 	.ds 1
      000022                         98 _LevelH::
      000022                         99 	.ds 1
      000023                        100 _WLevelDX::
      000023                        101 	.ds 2
      000025                        102 _WLevelDY::
      000025                        103 	.ds 2
      000027                        104 _newx::
      000027                        105 	.ds 1
      000028                        106 _page::
      000028                        107 	.ds 1
      000029                        108 _OldIsr::
      000029                        109 	.ds 3
      00002C                        110 _cursat::
      00002C                        111 	.ds 1
      00002D                        112 _LevelMap::
      00002D                        113 	.ds 2816
      000B2D                        114 _p:
      000B2D                        115 	.ds 2
                           00F3DF   116 _RG0SAV	=	0xf3df
                           00F3E0   117 _RG1SAV	=	0xf3e0
                           00FFE7   118 _RG8SAV	=	0xffe7
                           00FFE8   119 _RG9SAV	=	0xffe8
                           00FFE9   120 _RG10SA	=	0xffe9
                           00FFEA   121 _RG11SA	=	0xffea
                           00FFEB   122 _RG12SA	=	0xffeb
                           00FFEC   123 _RG13SA	=	0xffec
                           00FFED   124 _RG14SA	=	0xffed
                           00FFEE   125 _RG15SA	=	0xffee
                           00FFEF   126 _RG16SA	=	0xffef
                           00FFF0   127 _RG17SA	=	0xfff0
                           00FFF1   128 _RG18SA	=	0xfff1
      000B2F                        129 _object::
      000B2F                        130 	.ds 56
      000B67                        131 _u::
      000B67                        132 	.ds 2
      000B69                        133 _y::
      000B69                        134 	.ds 1
      000B6A                        135 _x::
      000B6A                        136 	.ds 1
      000B6B                        137 _v::
      000B6B                        138 	.ds 1
                                    139 ;--------------------------------------------------------
                                    140 ; ram data
                                    141 ;--------------------------------------------------------
                                    142 	.area _INITIALIZED
                                    143 ;--------------------------------------------------------
                                    144 ; absolute external ram data
                                    145 ;--------------------------------------------------------
                                    146 	.area _DABS (ABS)
                                    147 ;--------------------------------------------------------
                                    148 ; global & static initialisations
                                    149 ;--------------------------------------------------------
                                    150 	.area _HOME
                                    151 	.area _GSINIT
                                    152 	.area _GSFINAL
                                    153 	.area _GSINIT
                                    154 ;--------------------------------------------------------
                                    155 ; Home
                                    156 ;--------------------------------------------------------
                                    157 	.area _HOME
                                    158 	.area _HOME
                                    159 ;--------------------------------------------------------
                                    160 ; code
                                    161 ;--------------------------------------------------------
                                    162 	.area _BANK0
                                    163 ;src\mytestrom.c:62: void main(void) 
                                    164 ;	---------------------------------
                                    165 ; Function main
                                    166 ; ---------------------------------
      000000                        167 _main::
                                    168 ;src\mytestrom.c:66: rd = ReadMSXtype();					  	// Read MSX Type
      000000 3A 2D 00         [13]  169 	ld	a, (#0x002d)
                                    170 ;src\mytestrom.c:68: if (rd==0) FT_errorHandler(3,"msx 1 ");	// If MSX1 got to Error !
      000003 B7               [ 4]  171 	or	a, a
      000004 20 08            [12]  172 	jr	NZ, 00102$
      000006 11r91r01         [10]  173 	ld	de, #___str_0
      000009 3E 03            [ 7]  174 	ld	a, #0x03
      00000B CDr56r07         [17]  175 	call	_FT_errorHandler
      00000E                        176 00102$:
                                    177 ;src\mytestrom.c:70: MyLoadMap(0,LevelMap);					// load level map 256x11 arranged by columns
      00000E 11r2Dr00         [10]  178 	ld	de, #_LevelMap
      000011 AF               [ 4]  179 	xor	a, a
      000012 CDr13r08         [17]  180 	call	_MyLoadMap
                                    181 ;src\mytestrom.c:72: chgmod(8);						  		// Init Screen 8
      000015 3E 08            [ 7]  182 	ld	a, #0x08
      000017 CDrB7r0B         [17]  183 	call	_chgmod
                                    184 ;src\mytestrom.c:73: myVDPwrite(0,7);						// borders	
      00001A 2E 07            [ 7]  185 	ld	l, #0x07
                                    186 ;	spillPairReg hl
                                    187 ;	spillPairReg hl
      00001C AF               [ 4]  188 	xor	a, a
      00001D CDrC9r06         [17]  189 	call	_myVDPwrite
                                    190 ;src\mytestrom.c:74: VDPlineSwitch();						// 192 lines
      000020 CDr26r0C         [17]  191 	call	_VDPlineSwitch
                                    192 ;src\mytestrom.c:76: VDP60Hz();
      000023 CDr38r0C         [17]  193 	call	_VDP60Hz
                                    194 ;src\mytestrom.c:78: myHMMV(0,0,256,512, 0);					// Clear all VRAM  by Byte 0 (Black)
      000026 AF               [ 4]  195 	xor	a, a
      000027 F5               [11]  196 	push	af
      000028 33               [ 6]  197 	inc	sp
      000029 21 00 02         [10]  198 	ld	hl, #0x0200
      00002C E5               [11]  199 	push	hl
      00002D 26 01            [ 7]  200 	ld	h, #0x01
      00002F E5               [11]  201 	push	hl
      000030 65               [ 4]  202 	ld	h, l
      000031 E5               [11]  203 	push	hl
      000032 E5               [11]  204 	push	hl
      000033 CDrBDr0B         [17]  205 	call	_myHMMV
      000036 21 09 00         [10]  206 	ld	hl, #9
      000039 39               [11]  207 	add	hl, sp
      00003A F9               [ 6]  208 	ld	sp, hl
                                    209 ;src\/myheader.h:13: __endasm; 
      00003B F3               [ 4]  210 	di
                                    211 ;src\mytestrom.c:80: myVDPready();								// wait for command completion
      00003C CDr7Dr0C         [17]  212 	call	_myVDPready
                                    213 ;src\/myheader.h:7: __endasm; 
      00003F FB               [ 4]  214 	ei
                                    215 ;src\mytestrom.c:83: ObjectsInit();							// initialize logical object 
      000040 CDr94r08         [17]  216 	call	_ObjectsInit
                                    217 ;src\mytestrom.c:84: SprtInit();								// initialize sprites in VRAM 
      000043 CDrFAr0A         [17]  218 	call	_SprtInit
                                    219 ;src\mytestrom.c:86: myInstISR();							// install a fake ISR to cut the overhead
      000046 CDr48r08         [17]  220 	call	_myInstISR
                                    221 ;src\mytestrom.c:88: page = 0;
      000049 21r28r00         [10]  222 	ld	hl, #_page
      00004C 36 00            [10]  223 	ld	(hl), #0x00
                                    224 ;src\mytestrom.c:89: mySetAdjust(0,8);						// same as myVDPwrite((0-8) & 15,18);	
      00004E 2E 08            [ 7]  225 	ld	l, #0x08
                                    226 ;	spillPairReg hl
                                    227 ;	spillPairReg hl
      000050 AF               [ 4]  228 	xor	a, a
      000051 CDr1Br07         [17]  229 	call	_mySetAdjust
                                    230 ;src\mytestrom.c:91: for (WLevelx = 0;WLevelx<0+WindowW;) {
      000054 21 00 00         [10]  231 	ld	hl, #0x0000
      000057 22r1Er00         [16]  232 	ld	(_WLevelx), hl
      00005A                        233 00117$:
                                    234 ;src\mytestrom.c:92: myFT_wait(1);		
      00005A 3E 01            [ 7]  235 	ld	a, #0x01
      00005C CDr38r07         [17]  236 	call	_myFT_wait
                                    237 ;src\mytestrom.c:93: NewLine(WLevelx,0,WLevelx);WLevelx++;
      00005F 3Ar1Er00         [13]  238 	ld	a, (_WLevelx+0)
      000062 4F               [ 4]  239 	ld	c, a
      000063 2Ar1Er00         [16]  240 	ld	hl, (_WLevelx)
      000066 E5               [11]  241 	push	hl
      000067 2E 00            [ 7]  242 	ld	l, #0x00
                                    243 ;	spillPairReg hl
                                    244 ;	spillPairReg hl
      000069 79               [ 4]  245 	ld	a, c
      00006A CDrF9r05         [17]  246 	call	_NewLine
      00006D 2Ar1Er00         [16]  247 	ld	hl, (_WLevelx)
      000070 23               [ 6]  248 	inc	hl
                                    249 ;src\mytestrom.c:94: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      000071 22r1Er00         [16]  250 	ld	(_WLevelx), hl
      000074 3E F0            [ 7]  251 	ld	a, #0xf0
      000076 95               [ 4]  252 	sub	a, l
      000077 5F               [ 4]  253 	ld	e, a
      000078 9F               [ 4]  254 	sbc	a, a
      000079 94               [ 4]  255 	sub	a, h
      00007A 57               [ 4]  256 	ld	d, a
      00007B 3Ar1Er00         [13]  257 	ld	a, (_WLevelx+0)
      00007E 4F               [ 4]  258 	ld	c, a
      00007F 3E F0            [ 7]  259 	ld	a, #0xf0
      000081 91               [ 4]  260 	sub	a, c
      000082 4F               [ 4]  261 	ld	c, a
      000083 D5               [11]  262 	push	de
      000084 2E 00            [ 7]  263 	ld	l, #0x00
                                    264 ;	spillPairReg hl
                                    265 ;	spillPairReg hl
      000086 79               [ 4]  266 	ld	a, c
      000087 CDrF9r05         [17]  267 	call	_NewLine
      00008A 2Ar1Er00         [16]  268 	ld	hl, (_WLevelx)
      00008D 23               [ 6]  269 	inc	hl
      00008E 22r1Er00         [16]  270 	ld	(_WLevelx), hl
                                    271 ;src\mytestrom.c:95: NewLine(WLevelx,0,WLevelx);WLevelx++;
      000091 3Ar1Er00         [13]  272 	ld	a, (_WLevelx+0)
      000094 4F               [ 4]  273 	ld	c, a
      000095 2Ar1Er00         [16]  274 	ld	hl, (_WLevelx)
      000098 E5               [11]  275 	push	hl
      000099 2E 00            [ 7]  276 	ld	l, #0x00
                                    277 ;	spillPairReg hl
                                    278 ;	spillPairReg hl
      00009B 79               [ 4]  279 	ld	a, c
      00009C CDrF9r05         [17]  280 	call	_NewLine
      00009F 2Ar1Er00         [16]  281 	ld	hl, (_WLevelx)
      0000A2 23               [ 6]  282 	inc	hl
                                    283 ;src\mytestrom.c:96: NewLine(WindowW-WLevelx,0,WindowW-WLevelx);	WLevelx++;
      0000A3 22r1Er00         [16]  284 	ld	(_WLevelx), hl
      0000A6 3E F0            [ 7]  285 	ld	a, #0xf0
      0000A8 95               [ 4]  286 	sub	a, l
      0000A9 5F               [ 4]  287 	ld	e, a
      0000AA 9F               [ 4]  288 	sbc	a, a
      0000AB 94               [ 4]  289 	sub	a, h
      0000AC 57               [ 4]  290 	ld	d, a
      0000AD 3Ar1Er00         [13]  291 	ld	a, (_WLevelx+0)
      0000B0 4F               [ 4]  292 	ld	c, a
      0000B1 3E F0            [ 7]  293 	ld	a, #0xf0
      0000B3 91               [ 4]  294 	sub	a, c
      0000B4 4F               [ 4]  295 	ld	c, a
      0000B5 D5               [11]  296 	push	de
      0000B6 2E 00            [ 7]  297 	ld	l, #0x00
                                    298 ;	spillPairReg hl
                                    299 ;	spillPairReg hl
      0000B8 79               [ 4]  300 	ld	a, c
      0000B9 CDrF9r05         [17]  301 	call	_NewLine
      0000BC 2Ar1Er00         [16]  302 	ld	hl, (_WLevelx)
      0000BF 23               [ 6]  303 	inc	hl
                                    304 ;src\mytestrom.c:91: for (WLevelx = 0;WLevelx<0+WindowW;) {
      0000C0 22r1Er00         [16]  305 	ld	(_WLevelx), hl
      0000C3 11 F0 00         [10]  306 	ld	de, #0x00f0
      0000C6 BF               [ 4]  307 	cp	a, a
      0000C7 ED 52            [15]  308 	sbc	hl, de
      0000C9 38 8F            [12]  309 	jr	C, 00117$
                                    310 ;src\mytestrom.c:99: WLevelx = 0;	
      0000CB 21 00 00         [10]  311 	ld	hl, #0x0000
      0000CE 22r1Er00         [16]  312 	ld	(_WLevelx), hl
                                    313 ;src\mytestrom.c:101: MyBorder.ny = WindowH;
      0000D1 2E B0            [ 7]  314 	ld	l, #0xb0
      0000D3 22r19r00         [16]  315 	ld	((_MyBorder + 10)), hl
                                    316 ;src\mytestrom.c:102: MyBorder.col = 0;
      0000D6 21r1Br00         [10]  317 	ld	hl, #(_MyBorder + 12)
      0000D9 36 00            [10]  318 	ld	(hl), #0x00
                                    319 ;src\mytestrom.c:103: MyBorder.param = 0;
      0000DB 21r1Cr00         [10]  320 	ld	hl, #(_MyBorder + 13)
      0000DE 36 00            [10]  321 	ld	(hl), #0x00
                                    322 ;src\mytestrom.c:104: MyBorder.cmd = opHMMV;
      0000E0 21r1Dr00         [10]  323 	ld	hl, #(_MyBorder + 14)
      0000E3 36 C0            [10]  324 	ld	(hl), #0xc0
                                    325 ;src\mytestrom.c:106: MyCommand.ny = WindowH;
      0000E5 21 B0 00         [10]  326 	ld	hl, #0x00b0
      0000E8 22r0Ar00         [16]  327 	ld	((_MyCommand + 10)), hl
                                    328 ;src\mytestrom.c:107: MyCommand.col = 0;
      0000EB 21r0Cr00         [10]  329 	ld	hl, #(_MyCommand + 12)
      0000EE 36 00            [10]  330 	ld	(hl), #0x00
                                    331 ;src\mytestrom.c:108: MyCommand.param = 0;
      0000F0 21r0Dr00         [10]  332 	ld	hl, #(_MyCommand + 13)
      0000F3 36 00            [10]  333 	ld	(hl), #0x00
                                    334 ;src\mytestrom.c:109: MyCommand.cmd = opHMMM;
      0000F5 21r0Er00         [10]  335 	ld	hl, #(_MyCommand + 14)
      0000F8 36 D0            [10]  336 	ld	(hl), #0xd0
                                    337 ;src\mytestrom.c:112: while (myCheckkbd(7)==0xFF)
      0000FA                        338 00112$:
      0000FA 3E 07            [ 7]  339 	ld	a, #0x07
      0000FC CDr86r08         [17]  340 	call	_myCheckkbd
      0000FF 3C               [ 4]  341 	inc	a
      000100 C2r88r01         [10]  342 	jp	NZ,00114$
                                    343 ;src\mytestrom.c:114: WaitLineInt();			// wait for line 176-16
      000103 CDr3Fr07         [17]  344 	call	_WaitLineInt
                                    345 ;src\mytestrom.c:115: cursat^=1;				// swap sat 0 and sat 1
      000106 3Ar2Cr00         [13]  346 	ld	a, (_cursat+0)
      000109 EE 01            [ 7]  347 	xor	a, #0x01
      00010B 32r2Cr00         [13]  348 	ld	(_cursat+0), a
                                    349 ;src\mytestrom.c:117: if ((myCheckkbd(8)==0x7F) && (WLevelx<16*(LevelW-15)))  { 
      00010E 3E 08            [ 7]  350 	ld	a, #0x08
      000110 CDr86r08         [17]  351 	call	_myCheckkbd
      000113 D6 7F            [ 7]  352 	sub	a, #0x7f
      000115 20 37            [12]  353 	jr	NZ, 00109$
      000117 3Ar21r00         [13]  354 	ld	a, (_LevelW+0)
      00011A 0E 00            [ 7]  355 	ld	c, #0x00
      00011C C6 F1            [ 7]  356 	add	a, #0xf1
      00011E 5F               [ 4]  357 	ld	e, a
      00011F 79               [ 4]  358 	ld	a, c
      000120 CE FF            [ 7]  359 	adc	a, #0xff
      000122 57               [ 4]  360 	ld	d, a
      000123 EB               [ 4]  361 	ex	de, hl
      000124 29               [11]  362 	add	hl, hl
      000125 29               [11]  363 	add	hl, hl
      000126 29               [11]  364 	add	hl, hl
      000127 29               [11]  365 	add	hl, hl
      000128 EB               [ 4]  366 	ex	de, hl
      000129 3Ar1Er00         [13]  367 	ld	a, (_WLevelx+0)
      00012C 93               [ 4]  368 	sub	a, e
      00012D 3Ar1Fr00         [13]  369 	ld	a, (_WLevelx+1)
      000130 9A               [ 4]  370 	sbc	a, d
      000131 E2r36r01         [10]  371 	jp	PO, 00170$
      000134 EE 80            [ 7]  372 	xor	a, #0x80
      000136                        373 00170$:
      000136 F2r4Er01         [10]  374 	jp	P, 00109$
                                    375 ;src\mytestrom.c:118: WLevelx++;
      000139 2Ar1Er00         [16]  376 	ld	hl, (_WLevelx)
      00013C 23               [ 6]  377 	inc	hl
                                    378 ;src\mytestrom.c:119: ObjectstoVRAM(WLevelx);			
      00013D 22r1Er00         [16]  379 	ld	(_WLevelx), hl
      000140 CDr36r09         [17]  380 	call	_ObjectstoVRAM
                                    381 ;src\mytestrom.c:120: ScrollRight(WLevelx & 15);
      000143 3Ar1Er00         [13]  382 	ld	a, (_WLevelx+0)
      000146 E6 0F            [ 7]  383 	and	a, #0x0f
      000148 CDr98r01         [17]  384 	call	_ScrollRight
      00014B C3rFAr00         [10]  385 	jp	00112$
      00014E                        386 00109$:
                                    387 ;src\mytestrom.c:122: else if ((myCheckkbd(8)==0xEF) && (WLevelx>0)) { 
      00014E 3E 08            [ 7]  388 	ld	a, #0x08
      000150 CDr86r08         [17]  389 	call	_myCheckkbd
      000153 D6 EF            [ 7]  390 	sub	a, #0xef
      000155 20 28            [12]  391 	jr	NZ, 00105$
      000157 AF               [ 4]  392 	xor	a, a
      000158 FD 21r1Er00      [14]  393 	ld	iy, #_WLevelx
      00015C FD BE 00         [19]  394 	cp	a, 0 (iy)
      00015F FD 9E 01         [19]  395 	sbc	a, 1 (iy)
      000162 E2r67r01         [10]  396 	jp	PO, 00173$
      000165 EE 80            [ 7]  397 	xor	a, #0x80
      000167                        398 00173$:
      000167 F2r7Fr01         [10]  399 	jp	P, 00105$
                                    400 ;src\mytestrom.c:123: WLevelx--;
      00016A 2Ar1Er00         [16]  401 	ld	hl, (_WLevelx)
      00016D 2B               [ 6]  402 	dec	hl
                                    403 ;src\mytestrom.c:124: ObjectstoVRAM(WLevelx);			
      00016E 22r1Er00         [16]  404 	ld	(_WLevelx), hl
      000171 CDr36r09         [17]  405 	call	_ObjectstoVRAM
                                    406 ;src\mytestrom.c:125: ScrollLeft(WLevelx & 15);
      000174 3Ar1Er00         [13]  407 	ld	a, (_WLevelx+0)
      000177 E6 0F            [ 7]  408 	and	a, #0x0f
      000179 CDr61r02         [17]  409 	call	_ScrollLeft
      00017C C3rFAr00         [10]  410 	jp	00112$
      00017F                        411 00105$:
                                    412 ;src\mytestrom.c:128: ObjectstoVRAM(WLevelx);						
      00017F 2Ar1Er00         [16]  413 	ld	hl, (_WLevelx)
      000182 CDr36r09         [17]  414 	call	_ObjectstoVRAM
      000185 C3rFAr00         [10]  415 	jp	00112$
      000188                        416 00114$:
                                    417 ;src\mytestrom.c:132: myISRrestore();
      000188 CDr68r08         [17]  418 	call	_myISRrestore
                                    419 ;src\mytestrom.c:133: chgmod(0);
      00018B AF               [ 4]  420 	xor	a, a
      00018C CDrB7r0B         [17]  421 	call	_chgmod
                                    422 ;src\mytestrom.c:134: Reboot(0);
      00018F C7               [11]  423 	rst	#0
                                    424 ;src\mytestrom.c:135: }
      000190 C9               [10]  425 	ret
      000191                        426 ___str_0:
      000191 6D 73 78 20 31 20      427 	.ascii "msx 1 "
      000197 00                     428 	.db 0x00
                                    429 ;src\mytestrom.c:137: void ScrollRight(char step) __sdcccall(1) 
                                    430 ;	---------------------------------
                                    431 ; Function ScrollRight
                                    432 ; ---------------------------------
      000198                        433 _ScrollRight::
      000198 4F               [ 4]  434 	ld	c, a
                                    435 ;src\mytestrom.c:140: myVDPwrite((step-8) & 15,18);			
      000199 41               [ 4]  436 	ld	b, c
      00019A 78               [ 4]  437 	ld	a, b
      00019B C6 F8            [ 7]  438 	add	a, #0xf8
      00019D E6 0F            [ 7]  439 	and	a, #0x0f
      00019F 5F               [ 4]  440 	ld	e, a
      0001A0 C5               [11]  441 	push	bc
      0001A1 2E 12            [ 7]  442 	ld	l, #0x12
                                    443 ;	spillPairReg hl
                                    444 ;	spillPairReg hl
      0001A3 7B               [ 4]  445 	ld	a, e
      0001A4 CDrC9r06         [17]  446 	call	_myVDPwrite
      0001A7 C1               [10]  447 	pop	bc
                                    448 ;src\mytestrom.c:141: switch (step) {
      0001A8 79               [ 4]  449 	ld	a, c
      0001A9 B7               [ 4]  450 	or	a, a
      0001AA 20 44            [12]  451 	jr	NZ, 00102$
                                    452 ;src\mytestrom.c:143: page ^=1;							// case 0
      0001AC 3Ar28r00         [13]  453 	ld	a, (_page+0)
      0001AF EE 01            [ 7]  454 	xor	a, #0x01
      0001B1 32r28r00         [13]  455 	ld	(_page+0), a
                                    456 ;src\mytestrom.c:144: SetDisplayPage(page);
      0001B4 C5               [11]  457 	push	bc
      0001B5 3Ar28r00         [13]  458 	ld	a, (_page+0)
      0001B8 6F               [ 4]  459 	ld	l, a
                                    460 ;	spillPairReg hl
                                    461 ;	spillPairReg hl
      0001B9 CDr0Br0C         [17]  462 	call	_SetDisplayPage
      0001BC C1               [10]  463 	pop	bc
                                    464 ;src\mytestrom.c:145: MyBorder.dx = 240;
      0001BD 21 F0 00         [10]  465 	ld	hl, #0x00f0
      0001C0 22r13r00         [16]  466 	ld	((_MyBorder + 4)), hl
                                    467 ;src\mytestrom.c:146: MyBorder.nx = 15;
      0001C3 2E 0F            [ 7]  468 	ld	l, #0x0f
      0001C5 22r17r00         [16]  469 	ld	((_MyBorder + 8)), hl
                                    470 ;src\mytestrom.c:147: MyBorder.dy = 256*page;
      0001C8 3Ar28r00         [13]  471 	ld	a, (_page+0)
      0001CB 57               [ 4]  472 	ld	d, a
      0001CC 1E 00            [ 7]  473 	ld	e, #0x00
      0001CE ED 53r15r00      [20]  474 	ld	((_MyBorder + 6)), de
                                    475 ;src\mytestrom.c:148: myfVDP(&MyBorder);
      0001D2 C5               [11]  476 	push	bc
      0001D3 21r0Fr00         [10]  477 	ld	hl, #_MyBorder
      0001D6 CDrDBr06         [17]  478 	call	_myfVDP
      0001D9 C1               [10]  479 	pop	bc
                                    480 ;src\mytestrom.c:149: BorderLinesR(WindowW-1,page, WLevelx+WindowW-1);		
      0001DA 2Ar1Er00         [16]  481 	ld	hl, (_WLevelx)
      0001DD 11 EF 00         [10]  482 	ld	de, #0x00ef
      0001E0 19               [11]  483 	add	hl, de
      0001E1 C5               [11]  484 	push	bc
      0001E2 E5               [11]  485 	push	hl
      0001E3 3Ar28r00         [13]  486 	ld	a, (_page+0)
      0001E6 6F               [ 4]  487 	ld	l, a
                                    488 ;	spillPairReg hl
                                    489 ;	spillPairReg hl
      0001E7 3E EF            [ 7]  490 	ld	a, #0xef
      0001E9 CDr70r05         [17]  491 	call	_BorderLinesR
      0001EC C1               [10]  492 	pop	bc
                                    493 ;src\mytestrom.c:150: break;
      0001ED C3r45r02         [10]  494 	jp	00103$
                                    495 ;src\mytestrom.c:151: default:								// case 1-15
      0001F0                        496 00102$:
                                    497 ;src\mytestrom.c:152: MyCommand.sx = 16*step;
      0001F0 59               [ 4]  498 	ld	e, c
      0001F1 16 00            [ 7]  499 	ld	d, #0x00
      0001F3 EB               [ 4]  500 	ex	de, hl
      0001F4 29               [11]  501 	add	hl, hl
      0001F5 29               [11]  502 	add	hl, hl
      0001F6 29               [11]  503 	add	hl, hl
      0001F7 29               [11]  504 	add	hl, hl
      0001F8 EB               [ 4]  505 	ex	de, hl
      0001F9 ED 53r00r00      [20]  506 	ld	(_MyCommand), de
                                    507 ;src\mytestrom.c:153: MyCommand.dx = MyCommand.sx - 16;;
      0001FD 2Ar00r00         [16]  508 	ld	hl, (#_MyCommand + 0)
      000200 11 F0 FF         [10]  509 	ld	de, #0xfff0
      000203 19               [11]  510 	add	hl, de
      000204 5D               [ 4]  511 	ld	e, l
      000205 7C               [ 4]  512 	ld	a,h
      000206 57               [ 4]  513 	ld	d,a
      000207 ED 53r04r00      [20]  514 	ld	((_MyCommand + 4)), de
                                    515 ;src\mytestrom.c:154: MyCommand.sy = 256*page;
      00020B 3Ar28r00         [13]  516 	ld	a, (_page+0)
      00020E 57               [ 4]  517 	ld	d, a
      00020F 1E 00            [ 7]  518 	ld	e, #0x00
      000211 ED 53r02r00      [20]  519 	ld	((_MyCommand + 2)), de
                                    520 ;src\mytestrom.c:155: MyCommand.dy = MyCommand.sy ^ 256;
      000215 ED 5Br02r00      [20]  521 	ld	de, (#(_MyCommand + 2) + 0)
      000219 7A               [ 4]  522 	ld	a, d
      00021A EE 01            [ 7]  523 	xor	a, #0x01
      00021C 57               [ 4]  524 	ld	d, a
      00021D ED 53r06r00      [20]  525 	ld	((_MyCommand + 6)), de
                                    526 ;src\mytestrom.c:156: MyCommand.nx = 16;
      000221 21 10 00         [10]  527 	ld	hl, #0x0010
      000224 22r08r00         [16]  528 	ld	((_MyCommand + 8)), hl
                                    529 ;src\mytestrom.c:157: myfVDP(&MyCommand);		
      000227 C5               [11]  530 	push	bc
      000228 21r00r00         [10]  531 	ld	hl, #_MyCommand
      00022B CDrDBr06         [17]  532 	call	_myfVDP
      00022E C1               [10]  533 	pop	bc
                                    534 ;src\mytestrom.c:158: BorderLinesR(step+WindowW-1,page,WLevelx+WindowW-1);
      00022F 2Ar1Er00         [16]  535 	ld	hl, (_WLevelx)
      000232 11 EF 00         [10]  536 	ld	de, #0x00ef
      000235 19               [11]  537 	add	hl, de
      000236 78               [ 4]  538 	ld	a, b
      000237 C6 EF            [ 7]  539 	add	a, #0xef
      000239 5F               [ 4]  540 	ld	e, a
      00023A C5               [11]  541 	push	bc
      00023B E5               [11]  542 	push	hl
      00023C 3Ar28r00         [13]  543 	ld	a, (_page+0)
      00023F 6F               [ 4]  544 	ld	l, a
                                    545 ;	spillPairReg hl
                                    546 ;	spillPairReg hl
      000240 7B               [ 4]  547 	ld	a, e
      000241 CDr70r05         [17]  548 	call	_BorderLinesR
      000244 C1               [10]  549 	pop	bc
                                    550 ;src\mytestrom.c:160: }
      000245                        551 00103$:
                                    552 ;src\mytestrom.c:161: if (step==15) PatchPlotOneTile(step+WindowW-1-16,page^1,WLevelx+WindowW-1);		
      000245 79               [ 4]  553 	ld	a, c
      000246 D6 0F            [ 7]  554 	sub	a, #0x0f
      000248 C0               [11]  555 	ret	NZ
      000249 2Ar1Er00         [16]  556 	ld	hl, (_WLevelx)
      00024C 11 EF 00         [10]  557 	ld	de, #0x00ef
      00024F 19               [11]  558 	add	hl, de
      000250 3Ar28r00         [13]  559 	ld	a, (_page+0)
      000253 EE 01            [ 7]  560 	xor	a, #0x01
      000255 4F               [ 4]  561 	ld	c, a
      000256 78               [ 4]  562 	ld	a, b
      000257 C6 DF            [ 7]  563 	add	a, #0xdf
      000259 47               [ 4]  564 	ld	b, a
      00025A E5               [11]  565 	push	hl
      00025B 69               [ 4]  566 	ld	l, c
                                    567 ;	spillPairReg hl
                                    568 ;	spillPairReg hl
      00025C 78               [ 4]  569 	ld	a, b
      00025D CDr7Fr06         [17]  570 	call	_PatchPlotOneTile
                                    571 ;src\mytestrom.c:162: }
      000260 C9               [10]  572 	ret
                                    573 ;src\mytestrom.c:164: void ScrollLeft(char step) __sdcccall(1)
                                    574 ;	---------------------------------
                                    575 ; Function ScrollLeft
                                    576 ; ---------------------------------
      000261                        577 _ScrollLeft::
                                    578 ;src\mytestrom.c:167: myVDPwrite((step-8) & 15,18);	
      000261 4F               [ 4]  579 	ld	c, a
      000262 C6 F8            [ 7]  580 	add	a, #0xf8
      000264 E6 0F            [ 7]  581 	and	a, #0x0f
      000266 47               [ 4]  582 	ld	b, a
      000267 C5               [11]  583 	push	bc
      000268 2E 12            [ 7]  584 	ld	l, #0x12
                                    585 ;	spillPairReg hl
                                    586 ;	spillPairReg hl
      00026A 78               [ 4]  587 	ld	a, b
      00026B CDrC9r06         [17]  588 	call	_myVDPwrite
      00026E C1               [10]  589 	pop	bc
                                    590 ;src\mytestrom.c:168: switch (step) {
      00026F 79               [ 4]  591 	ld	a, c
      000270 D6 0F            [ 7]  592 	sub	a, #0x0f
      000272 20 41            [12]  593 	jr	NZ, 00102$
                                    594 ;src\mytestrom.c:170: page ^=1;					
      000274 3Ar28r00         [13]  595 	ld	a, (_page+0)
      000277 EE 01            [ 7]  596 	xor	a, #0x01
      000279 32r28r00         [13]  597 	ld	(_page+0), a
                                    598 ;src\mytestrom.c:171: SetDisplayPage(page);				// case 15
      00027C C5               [11]  599 	push	bc
      00027D 3Ar28r00         [13]  600 	ld	a, (_page+0)
      000280 6F               [ 4]  601 	ld	l, a
                                    602 ;	spillPairReg hl
                                    603 ;	spillPairReg hl
      000281 CDr0Br0C         [17]  604 	call	_SetDisplayPage
      000284 C1               [10]  605 	pop	bc
                                    606 ;src\mytestrom.c:172: MyBorder.dx = 0;	
      000285 21 00 00         [10]  607 	ld	hl, #0x0000
      000288 22r13r00         [16]  608 	ld	((_MyBorder + 4)), hl
                                    609 ;src\mytestrom.c:173: MyBorder.nx = 15;
      00028B 2E 0F            [ 7]  610 	ld	l, #0x0f
      00028D 22r17r00         [16]  611 	ld	((_MyBorder + 8)), hl
                                    612 ;src\mytestrom.c:174: MyBorder.dy = 256*page;
      000290 3Ar28r00         [13]  613 	ld	a, (_page+0)
      000293 06 00            [ 7]  614 	ld	b, #0x00
      000295 57               [ 4]  615 	ld	d, a
      000296 1E 00            [ 7]  616 	ld	e, #0x00
      000298 ED 53r15r00      [20]  617 	ld	((_MyBorder + 6)), de
                                    618 ;src\mytestrom.c:175: myfVDP(&MyBorder);
      00029C C5               [11]  619 	push	bc
      00029D 21r0Fr00         [10]  620 	ld	hl, #_MyBorder
      0002A0 CDrDBr06         [17]  621 	call	_myfVDP
      0002A3 C1               [10]  622 	pop	bc
                                    623 ;src\mytestrom.c:176: BorderLinesL(step,page,WLevelx);		
      0002A4 C5               [11]  624 	push	bc
      0002A5 2Ar1Er00         [16]  625 	ld	hl, (_WLevelx)
      0002A8 E5               [11]  626 	push	hl
      0002A9 3Ar28r00         [13]  627 	ld	a, (_page+0)
      0002AC 6F               [ 4]  628 	ld	l, a
                                    629 ;	spillPairReg hl
                                    630 ;	spillPairReg hl
      0002AD 79               [ 4]  631 	ld	a, c
      0002AE CDrE7r04         [17]  632 	call	_BorderLinesL
      0002B1 C1               [10]  633 	pop	bc
                                    634 ;src\mytestrom.c:177: break;				
      0002B2 C3r03r03         [10]  635 	jp	00103$
                                    636 ;src\mytestrom.c:178: default:								// case 14-0
      0002B5                        637 00102$:
                                    638 ;src\mytestrom.c:179: MyCommand.sx = 16*step;
      0002B5 59               [ 4]  639 	ld	e, c
      0002B6 16 00            [ 7]  640 	ld	d, #0x00
      0002B8 EB               [ 4]  641 	ex	de, hl
      0002B9 29               [11]  642 	add	hl, hl
      0002BA 29               [11]  643 	add	hl, hl
      0002BB 29               [11]  644 	add	hl, hl
      0002BC 29               [11]  645 	add	hl, hl
      0002BD EB               [ 4]  646 	ex	de, hl
      0002BE ED 53r00r00      [20]  647 	ld	(_MyCommand), de
                                    648 ;src\mytestrom.c:180: MyCommand.dx = MyCommand.sx + 16;
      0002C2 ED 5Br00r00      [20]  649 	ld	de, (#_MyCommand + 0)
      0002C6 21 10 00         [10]  650 	ld	hl, #0x0010
      0002C9 19               [11]  651 	add	hl, de
      0002CA EB               [ 4]  652 	ex	de, hl
      0002CB ED 53r04r00      [20]  653 	ld	((_MyCommand + 4)), de
                                    654 ;src\mytestrom.c:181: MyCommand.sy = 256*page;
      0002CF 3Ar28r00         [13]  655 	ld	a, (_page+0)
      0002D2 06 00            [ 7]  656 	ld	b, #0x00
      0002D4 57               [ 4]  657 	ld	d, a
      0002D5 1E 00            [ 7]  658 	ld	e, #0x00
      0002D7 ED 53r02r00      [20]  659 	ld	((_MyCommand + 2)), de
                                    660 ;src\mytestrom.c:182: MyCommand.dy = MyCommand.sy ^ 256;		
      0002DB ED 5Br02r00      [20]  661 	ld	de, (#(_MyCommand + 2) + 0)
      0002DF 7A               [ 4]  662 	ld	a, d
      0002E0 EE 01            [ 7]  663 	xor	a, #0x01
      0002E2 57               [ 4]  664 	ld	d, a
      0002E3 ED 53r06r00      [20]  665 	ld	((_MyCommand + 6)), de
                                    666 ;src\mytestrom.c:183: MyCommand.nx = 16;						
      0002E7 21 10 00         [10]  667 	ld	hl, #0x0010
      0002EA 22r08r00         [16]  668 	ld	((_MyCommand + 8)), hl
                                    669 ;src\mytestrom.c:184: myfVDP(&MyCommand);					
      0002ED C5               [11]  670 	push	bc
      0002EE 21r00r00         [10]  671 	ld	hl, #_MyCommand
      0002F1 CDrDBr06         [17]  672 	call	_myfVDP
      0002F4 C1               [10]  673 	pop	bc
                                    674 ;src\mytestrom.c:185: BorderLinesL(step,page,WLevelx);			
      0002F5 C5               [11]  675 	push	bc
      0002F6 2Ar1Er00         [16]  676 	ld	hl, (_WLevelx)
      0002F9 E5               [11]  677 	push	hl
      0002FA 3Ar28r00         [13]  678 	ld	a, (_page+0)
      0002FD 6F               [ 4]  679 	ld	l, a
                                    680 ;	spillPairReg hl
                                    681 ;	spillPairReg hl
      0002FE 79               [ 4]  682 	ld	a, c
      0002FF CDrE7r04         [17]  683 	call	_BorderLinesL
      000302 C1               [10]  684 	pop	bc
                                    685 ;src\mytestrom.c:187: }
      000303                        686 00103$:
                                    687 ;src\mytestrom.c:188: if (step==0) PatchPlotOneTile(16,page^1,WLevelx);				
      000303 79               [ 4]  688 	ld	a, c
      000304 B7               [ 4]  689 	or	a, a
      000305 C0               [11]  690 	ret	NZ
      000306 3Ar28r00         [13]  691 	ld	a, (_page+0)
      000309 EE 01            [ 7]  692 	xor	a, #0x01
      00030B 4F               [ 4]  693 	ld	c, a
      00030C 2Ar1Er00         [16]  694 	ld	hl, (_WLevelx)
      00030F E5               [11]  695 	push	hl
      000310 69               [ 4]  696 	ld	l, c
                                    697 ;	spillPairReg hl
                                    698 ;	spillPairReg hl
      000311 3E 10            [ 7]  699 	ld	a, #0x10
      000313 CDr7Fr06         [17]  700 	call	_PatchPlotOneTile
                                    701 ;src\mytestrom.c:189: }
      000316 C9               [10]  702 	ret
                                    703 ;src\mytestrom.c:209: void PlotOneColumnTile(void) __sdcccall(1) 
                                    704 ;	---------------------------------
                                    705 ; Function PlotOneColumnTile
                                    706 ; ---------------------------------
      000317                        707 _PlotOneColumnTile::
                                    708 ;src\mytestrom.c:241: __endasm;
      000317 D9               [ 4]  709 	exx
      000318 2Ar2Dr0B         [16]  710 	ld	hl,(_p)
      00031B 7E               [ 7]  711 	ld	a,(hl)
      00031C 07               [ 4]  712 	rlca
      00031D 07               [ 4]  713 	rlca
      00031E E6 03            [ 7]  714 	and	a,#3
      000320 87               [ 4]  715 	add	a,a
      000321 C6r00            [ 7]  716 	add	a,#b_data0
      000323 32 00 90         [13]  717 	ld	(#0x9000),a
      000326 3C               [ 4]  718 	inc	a
      000327 32 00 B0         [13]  719 	ld	(#0xb000),a
      00032A 7E               [ 7]  720 	ld	a,(hl)
      00032B 23               [ 6]  721 	inc	hl
      00032C 22r2Dr0B         [16]  722 	ld	(_p),hl ; save next tile
      00032F E6 3F            [ 7]  723 	and	a,#0x3F ; tile number
      000331 C6 80            [ 7]  724 	add	a,#0x80 ; address of the segment
      000333 67               [ 4]  725 	ld	h,a ; address of the tile in the segment
      000334 6A               [ 4]  726 	ld	l,d
      000335 D9               [ 4]  727 	exx
                                    728 	.rept	#16
                                    729 	out	(c),e ; set vram address in 14 bits
                                    730 	out	(c),d
                                    731 	inc	d ; new line
                                    732 	exx
                                    733 	outi	; write data
                                    734 	exx
                                    735 	.endm
      000336 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000338 ED 51            [12]    2 	out	(c),d
      00033A 14               [ 4]    3 	inc	d ; new line
      00033B D9               [ 4]    4 	exx
      00033C ED A3            [16]    5 	outi	; write data
      00033E D9               [ 4]    6 	exx
      00033F ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000341 ED 51            [12]    2 	out	(c),d
      000343 14               [ 4]    3 	inc	d ; new line
      000344 D9               [ 4]    4 	exx
      000345 ED A3            [16]    5 	outi	; write data
      000347 D9               [ 4]    6 	exx
      000348 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00034A ED 51            [12]    2 	out	(c),d
      00034C 14               [ 4]    3 	inc	d ; new line
      00034D D9               [ 4]    4 	exx
      00034E ED A3            [16]    5 	outi	; write data
      000350 D9               [ 4]    6 	exx
      000351 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000353 ED 51            [12]    2 	out	(c),d
      000355 14               [ 4]    3 	inc	d ; new line
      000356 D9               [ 4]    4 	exx
      000357 ED A3            [16]    5 	outi	; write data
      000359 D9               [ 4]    6 	exx
      00035A ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00035C ED 51            [12]    2 	out	(c),d
      00035E 14               [ 4]    3 	inc	d ; new line
      00035F D9               [ 4]    4 	exx
      000360 ED A3            [16]    5 	outi	; write data
      000362 D9               [ 4]    6 	exx
      000363 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000365 ED 51            [12]    2 	out	(c),d
      000367 14               [ 4]    3 	inc	d ; new line
      000368 D9               [ 4]    4 	exx
      000369 ED A3            [16]    5 	outi	; write data
      00036B D9               [ 4]    6 	exx
      00036C ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00036E ED 51            [12]    2 	out	(c),d
      000370 14               [ 4]    3 	inc	d ; new line
      000371 D9               [ 4]    4 	exx
      000372 ED A3            [16]    5 	outi	; write data
      000374 D9               [ 4]    6 	exx
      000375 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000377 ED 51            [12]    2 	out	(c),d
      000379 14               [ 4]    3 	inc	d ; new line
      00037A D9               [ 4]    4 	exx
      00037B ED A3            [16]    5 	outi	; write data
      00037D D9               [ 4]    6 	exx
      00037E ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000380 ED 51            [12]    2 	out	(c),d
      000382 14               [ 4]    3 	inc	d ; new line
      000383 D9               [ 4]    4 	exx
      000384 ED A3            [16]    5 	outi	; write data
      000386 D9               [ 4]    6 	exx
      000387 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000389 ED 51            [12]    2 	out	(c),d
      00038B 14               [ 4]    3 	inc	d ; new line
      00038C D9               [ 4]    4 	exx
      00038D ED A3            [16]    5 	outi	; write data
      00038F D9               [ 4]    6 	exx
      000390 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000392 ED 51            [12]    2 	out	(c),d
      000394 14               [ 4]    3 	inc	d ; new line
      000395 D9               [ 4]    4 	exx
      000396 ED A3            [16]    5 	outi	; write data
      000398 D9               [ 4]    6 	exx
      000399 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      00039B ED 51            [12]    2 	out	(c),d
      00039D 14               [ 4]    3 	inc	d ; new line
      00039E D9               [ 4]    4 	exx
      00039F ED A3            [16]    5 	outi	; write data
      0003A1 D9               [ 4]    6 	exx
      0003A2 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003A4 ED 51            [12]    2 	out	(c),d
      0003A6 14               [ 4]    3 	inc	d ; new line
      0003A7 D9               [ 4]    4 	exx
      0003A8 ED A3            [16]    5 	outi	; write data
      0003AA D9               [ 4]    6 	exx
      0003AB ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003AD ED 51            [12]    2 	out	(c),d
      0003AF 14               [ 4]    3 	inc	d ; new line
      0003B0 D9               [ 4]    4 	exx
      0003B1 ED A3            [16]    5 	outi	; write data
      0003B3 D9               [ 4]    6 	exx
      0003B4 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003B6 ED 51            [12]    2 	out	(c),d
      0003B8 14               [ 4]    3 	inc	d ; new line
      0003B9 D9               [ 4]    4 	exx
      0003BA ED A3            [16]    5 	outi	; write data
      0003BC D9               [ 4]    6 	exx
      0003BD ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003BF ED 51            [12]    2 	out	(c),d
      0003C1 14               [ 4]    3 	inc	d ; new line
      0003C2 D9               [ 4]    4 	exx
      0003C3 ED A3            [16]    5 	outi	; write data
      0003C5 D9               [ 4]    6 	exx
                                    736 ;src\mytestrom.c:242: }
      0003C6 C9               [10]  737 	ret
                                    738 ;src\mytestrom.c:244: void PlotOneColumnTileAndMask(void) __sdcccall(1) 
                                    739 ;	---------------------------------
                                    740 ; Function PlotOneColumnTileAndMask
                                    741 ; ---------------------------------
      0003C7                        742 _PlotOneColumnTileAndMask::
                                    743 ;src\mytestrom.c:280: __endasm;
      0003C7 D9               [ 4]  744 	exx
      0003C8 2Ar2Dr0B         [16]  745 	ld	hl,(_p)
      0003CB 7E               [ 7]  746 	ld	a,(hl)
      0003CC 07               [ 4]  747 	rlca
      0003CD 07               [ 4]  748 	rlca
      0003CE E6 03            [ 7]  749 	and	a,#3
      0003D0 87               [ 4]  750 	add	a,a
      0003D1 C6r00            [ 7]  751 	add	a,#b_data0
      0003D3 32 00 90         [13]  752 	ld	(#0x9000),a
      0003D6 3C               [ 4]  753 	inc	a
      0003D7 32 00 B0         [13]  754 	ld	(#0xb000),a
      0003DA 7E               [ 7]  755 	ld	a,(hl)
      0003DB 23               [ 6]  756 	inc	hl
      0003DC 22r2Dr0B         [16]  757 	ld	(_p),hl ; save next tile
      0003DF E6 3F            [ 7]  758 	and	a,#0x3F ; tile number
      0003E1 C6 80            [ 7]  759 	add	a,#0x80 ; address of the segment
      0003E3 67               [ 4]  760 	ld	h,a ; address of the tile in the segment
      0003E4 6A               [ 4]  761 	ld	l,d
      0003E5 D9               [ 4]  762 	exx
                                    763 	.rept	#16
                                    764 	out	(c),e ; set vram address in 14 bits
                                    765 	out	(c),d
                                    766 	exx
                                    767 	outi	; write data
                                    768 	exx
                                    769 	out	(c),l ; set vram address in 14 bits for border
                                    770 	out	(c),d
                                    771 	inc	d ; new line
                                    772 	xor	a,a ; write border
                                    773 	out	(#0x98),a
                                    774 	.endm
      0003E6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003E8 ED 51            [12]    2 	out	(c),d
      0003EA D9               [ 4]    3 	exx
      0003EB ED A3            [16]    4 	outi	; write data
      0003ED D9               [ 4]    5 	exx
      0003EE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0003F0 ED 51            [12]    7 	out	(c),d
      0003F2 14               [ 4]    8 	inc	d ; new line
      0003F3 AF               [ 4]    9 	xor	a,a ; write border
      0003F4 D3 98            [11]   10 	out	(#0x98),a
      0003F6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0003F8 ED 51            [12]    2 	out	(c),d
      0003FA D9               [ 4]    3 	exx
      0003FB ED A3            [16]    4 	outi	; write data
      0003FD D9               [ 4]    5 	exx
      0003FE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000400 ED 51            [12]    7 	out	(c),d
      000402 14               [ 4]    8 	inc	d ; new line
      000403 AF               [ 4]    9 	xor	a,a ; write border
      000404 D3 98            [11]   10 	out	(#0x98),a
      000406 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000408 ED 51            [12]    2 	out	(c),d
      00040A D9               [ 4]    3 	exx
      00040B ED A3            [16]    4 	outi	; write data
      00040D D9               [ 4]    5 	exx
      00040E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000410 ED 51            [12]    7 	out	(c),d
      000412 14               [ 4]    8 	inc	d ; new line
      000413 AF               [ 4]    9 	xor	a,a ; write border
      000414 D3 98            [11]   10 	out	(#0x98),a
      000416 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000418 ED 51            [12]    2 	out	(c),d
      00041A D9               [ 4]    3 	exx
      00041B ED A3            [16]    4 	outi	; write data
      00041D D9               [ 4]    5 	exx
      00041E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000420 ED 51            [12]    7 	out	(c),d
      000422 14               [ 4]    8 	inc	d ; new line
      000423 AF               [ 4]    9 	xor	a,a ; write border
      000424 D3 98            [11]   10 	out	(#0x98),a
      000426 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000428 ED 51            [12]    2 	out	(c),d
      00042A D9               [ 4]    3 	exx
      00042B ED A3            [16]    4 	outi	; write data
      00042D D9               [ 4]    5 	exx
      00042E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000430 ED 51            [12]    7 	out	(c),d
      000432 14               [ 4]    8 	inc	d ; new line
      000433 AF               [ 4]    9 	xor	a,a ; write border
      000434 D3 98            [11]   10 	out	(#0x98),a
      000436 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000438 ED 51            [12]    2 	out	(c),d
      00043A D9               [ 4]    3 	exx
      00043B ED A3            [16]    4 	outi	; write data
      00043D D9               [ 4]    5 	exx
      00043E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000440 ED 51            [12]    7 	out	(c),d
      000442 14               [ 4]    8 	inc	d ; new line
      000443 AF               [ 4]    9 	xor	a,a ; write border
      000444 D3 98            [11]   10 	out	(#0x98),a
      000446 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000448 ED 51            [12]    2 	out	(c),d
      00044A D9               [ 4]    3 	exx
      00044B ED A3            [16]    4 	outi	; write data
      00044D D9               [ 4]    5 	exx
      00044E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000450 ED 51            [12]    7 	out	(c),d
      000452 14               [ 4]    8 	inc	d ; new line
      000453 AF               [ 4]    9 	xor	a,a ; write border
      000454 D3 98            [11]   10 	out	(#0x98),a
      000456 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000458 ED 51            [12]    2 	out	(c),d
      00045A D9               [ 4]    3 	exx
      00045B ED A3            [16]    4 	outi	; write data
      00045D D9               [ 4]    5 	exx
      00045E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000460 ED 51            [12]    7 	out	(c),d
      000462 14               [ 4]    8 	inc	d ; new line
      000463 AF               [ 4]    9 	xor	a,a ; write border
      000464 D3 98            [11]   10 	out	(#0x98),a
      000466 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000468 ED 51            [12]    2 	out	(c),d
      00046A D9               [ 4]    3 	exx
      00046B ED A3            [16]    4 	outi	; write data
      00046D D9               [ 4]    5 	exx
      00046E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000470 ED 51            [12]    7 	out	(c),d
      000472 14               [ 4]    8 	inc	d ; new line
      000473 AF               [ 4]    9 	xor	a,a ; write border
      000474 D3 98            [11]   10 	out	(#0x98),a
      000476 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000478 ED 51            [12]    2 	out	(c),d
      00047A D9               [ 4]    3 	exx
      00047B ED A3            [16]    4 	outi	; write data
      00047D D9               [ 4]    5 	exx
      00047E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000480 ED 51            [12]    7 	out	(c),d
      000482 14               [ 4]    8 	inc	d ; new line
      000483 AF               [ 4]    9 	xor	a,a ; write border
      000484 D3 98            [11]   10 	out	(#0x98),a
      000486 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000488 ED 51            [12]    2 	out	(c),d
      00048A D9               [ 4]    3 	exx
      00048B ED A3            [16]    4 	outi	; write data
      00048D D9               [ 4]    5 	exx
      00048E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      000490 ED 51            [12]    7 	out	(c),d
      000492 14               [ 4]    8 	inc	d ; new line
      000493 AF               [ 4]    9 	xor	a,a ; write border
      000494 D3 98            [11]   10 	out	(#0x98),a
      000496 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      000498 ED 51            [12]    2 	out	(c),d
      00049A D9               [ 4]    3 	exx
      00049B ED A3            [16]    4 	outi	; write data
      00049D D9               [ 4]    5 	exx
      00049E ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004A0 ED 51            [12]    7 	out	(c),d
      0004A2 14               [ 4]    8 	inc	d ; new line
      0004A3 AF               [ 4]    9 	xor	a,a ; write border
      0004A4 D3 98            [11]   10 	out	(#0x98),a
      0004A6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004A8 ED 51            [12]    2 	out	(c),d
      0004AA D9               [ 4]    3 	exx
      0004AB ED A3            [16]    4 	outi	; write data
      0004AD D9               [ 4]    5 	exx
      0004AE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004B0 ED 51            [12]    7 	out	(c),d
      0004B2 14               [ 4]    8 	inc	d ; new line
      0004B3 AF               [ 4]    9 	xor	a,a ; write border
      0004B4 D3 98            [11]   10 	out	(#0x98),a
      0004B6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004B8 ED 51            [12]    2 	out	(c),d
      0004BA D9               [ 4]    3 	exx
      0004BB ED A3            [16]    4 	outi	; write data
      0004BD D9               [ 4]    5 	exx
      0004BE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004C0 ED 51            [12]    7 	out	(c),d
      0004C2 14               [ 4]    8 	inc	d ; new line
      0004C3 AF               [ 4]    9 	xor	a,a ; write border
      0004C4 D3 98            [11]   10 	out	(#0x98),a
      0004C6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004C8 ED 51            [12]    2 	out	(c),d
      0004CA D9               [ 4]    3 	exx
      0004CB ED A3            [16]    4 	outi	; write data
      0004CD D9               [ 4]    5 	exx
      0004CE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004D0 ED 51            [12]    7 	out	(c),d
      0004D2 14               [ 4]    8 	inc	d ; new line
      0004D3 AF               [ 4]    9 	xor	a,a ; write border
      0004D4 D3 98            [11]   10 	out	(#0x98),a
      0004D6 ED 59            [12]    1 	out	(c),e ; set vram address in 14 bits
      0004D8 ED 51            [12]    2 	out	(c),d
      0004DA D9               [ 4]    3 	exx
      0004DB ED A3            [16]    4 	outi	; write data
      0004DD D9               [ 4]    5 	exx
      0004DE ED 69            [12]    6 	out	(c),l ; set vram address in 14 bits for border
      0004E0 ED 51            [12]    7 	out	(c),d
      0004E2 14               [ 4]    8 	inc	d ; new line
      0004E3 AF               [ 4]    9 	xor	a,a ; write border
      0004E4 D3 98            [11]   10 	out	(#0x98),a
                                    775 ;src\mytestrom.c:281: }
      0004E6 C9               [10]  776 	ret
                                    777 ;src\mytestrom.c:283: void BorderLinesL(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    778 ;	---------------------------------
                                    779 ; Function BorderLinesL
                                    780 ; ---------------------------------
      0004E7                        781 _BorderLinesL::
                                    782 ;src\mytestrom.c:387: __endasm;
      0004E7 C1               [10]  783 	pop	bc ; get ret address
      0004E8 D1               [10]  784 	pop	de ; de = MapX
      0004E9 C5               [11]  785 	push	bc ; save ret address
      0004EA 08               [ 4]  786 	ex	af,af'			; a' = ScrnX
      0004EB 7D               [ 4]  787 	ld	a,l ; l = page
      0004EC 87               [ 4]  788 	add	a,a
      0004ED 87               [ 4]  789 	add	a,a
      0004EE 32 ED FF         [13]  790 	ld	(_RG14SA),a
      0004F1 4B               [ 4]  791 	ld	c,e ; C = low(mapx)
      0004F2 CB 2A            [ 8]  792 	sra	d ; DE/16
      0004F4 CB 1B            [ 8]  793 	rr	e
      0004F6 CB 2A            [ 8]  794 	sra	d
      0004F8 CB 1B            [ 8]  795 	rr	e
      0004FA CB 2A            [ 8]  796 	sra	d
      0004FC CB 1B            [ 8]  797 	rr	e
      0004FE CB 2A            [ 8]  798 	sra	d
      000500 CB 1B            [ 8]  799 	rr	e
      000502 6B               [ 4]  800 	ld	l,e
      000503 62               [ 4]  801 	ld	h,d
      000504 29               [11]  802 	add	hl,hl
      000505 29               [11]  803 	add	hl,hl
      000506 19               [11]  804 	add	hl,de
      000507 29               [11]  805 	add	hl,hl
      000508 19               [11]  806 	add	hl,de ; DE/16 * 11
      000509 11r2Dr00         [10]  807 	ld	de,#_LevelMap
      00050C 19               [11]  808 	add	hl,de
      00050D 22r2Dr0B         [16]  809 	ld	(_p), hl
      000510 08               [ 4]  810 	ex	af,af'				; a' = ScrnX
      000511 5F               [ 4]  811 	ld	e,a ; DE vramm address for new border data
      000512 C6 F0            [ 7]  812 	add	a,#240 ; L = E +/- 240U according to the scroll direction
      000514 6F               [ 4]  813 	ld	l,a ; DL hold vramm address for blank border
      000515 79               [ 4]  814 	ld	a,c ; C = low(MapX)
      000516 E6 0F            [ 7]  815 	and	a,#15
      000518 87               [ 4]  816 	add	a,a
      000519 87               [ 4]  817 	add	a,a
      00051A 87               [ 4]  818 	add	a,a
      00051B 87               [ 4]  819 	add	a,a
      00051C D9               [ 4]  820 	exx
      00051D 57               [ 4]  821 	ld	d,a ; common offeset of the address in the tile
      00051E 0E 98            [ 7]  822 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      000520 D9               [ 4]  823 	exx
      000521 F3               [ 4]  824 	di
      000522 3A ED FF         [13]  825 	ld	a,(_RG14SA) ; set address in vdp(14)
      000525 D3 99            [11]  826 	out	(#0x99), a
      000527 3C               [ 4]  827 	inc	a
      000528 32 ED FF         [13]  828 	ld	(_RG14SA),a ; save next block
      00052B 3E 8E            [ 7]  829 	ld	a,#0x8E
      00052D D3 99            [11]  830 	out	(#0x99), a
      00052F 0E 99            [ 7]  831 	ld	c,#0x99
      000531 16 40            [ 7]  832 	ld	d,#0x40
      000533 CDrC7r03         [17]  833 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000536 CDrC7r03         [17]  834 	call	_PlotOneColumnTileAndMask
      000539 CDrC7r03         [17]  835 	call	_PlotOneColumnTileAndMask
      00053C CDrC7r03         [17]  836 	call	_PlotOneColumnTileAndMask
      00053F 3A ED FF         [13]  837 	ld	a,(_RG14SA) ; set address in vdp(14)
      000542 D3 99            [11]  838 	out	(#0x99), a
      000544 3C               [ 4]  839 	inc	a
      000545 32 ED FF         [13]  840 	ld	(_RG14SA),a ; save next block
      000548 3E 8E            [ 7]  841 	ld	a,#0x8E
      00054A D3 99            [11]  842 	out	(#0x99), a
      00054C 16 40            [ 7]  843 	ld	d,#0x40
      00054E CDrC7r03         [17]  844 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      000551 CDrC7r03         [17]  845 	call	_PlotOneColumnTileAndMask
      000554 CDrC7r03         [17]  846 	call	_PlotOneColumnTileAndMask
      000557 CDrC7r03         [17]  847 	call	_PlotOneColumnTileAndMask
      00055A 3A ED FF         [13]  848 	ld	a,(_RG14SA) ; set address in vdp(14)
      00055D D3 99            [11]  849 	out	(#0x99), a
      00055F 3E 8E            [ 7]  850 	ld	a,#0x8E
      000561 D3 99            [11]  851 	out	(#0x99), a
      000563 16 40            [ 7]  852 	ld	d,#0x40
      000565 CDrC7r03         [17]  853 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      000568 CDrC7r03         [17]  854 	call	_PlotOneColumnTileAndMask
      00056B CDrC7r03         [17]  855 	call	_PlotOneColumnTileAndMask
      00056E FB               [ 4]  856 	ei
      00056F C9               [10]  857 	ret
                                    858 ;src\mytestrom.c:388: }
                                    859 ;src\mytestrom.c:390: void BorderLinesR(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    860 ;	---------------------------------
                                    861 ; Function BorderLinesR
                                    862 ; ---------------------------------
      000570                        863 _BorderLinesR::
                                    864 ;src\mytestrom.c:494: __endasm;
      000570 C1               [10]  865 	pop	bc ; get ret address
      000571 D1               [10]  866 	pop	de ; DE = MapX+240U
      000572 C5               [11]  867 	push	bc ; save ret address
      000573 08               [ 4]  868 	ex	af,af'			; a' = ScrnX
      000574 7D               [ 4]  869 	ld	a,l ; l = page
      000575 87               [ 4]  870 	add	a,a
      000576 87               [ 4]  871 	add	a,a
      000577 32 ED FF         [13]  872 	ld	(_RG14SA),a
      00057A 4B               [ 4]  873 	ld	c,e ; C = low(mapx)
      00057B CB 2A            [ 8]  874 	sra	d ; DE/16
      00057D CB 1B            [ 8]  875 	rr	e
      00057F CB 2A            [ 8]  876 	sra	d
      000581 CB 1B            [ 8]  877 	rr	e
      000583 CB 2A            [ 8]  878 	sra	d
      000585 CB 1B            [ 8]  879 	rr	e
      000587 CB 2A            [ 8]  880 	sra	d
      000589 CB 1B            [ 8]  881 	rr	e
      00058B 6B               [ 4]  882 	ld	l,e
      00058C 62               [ 4]  883 	ld	h,d
      00058D 29               [11]  884 	add	hl,hl
      00058E 29               [11]  885 	add	hl,hl
      00058F 19               [11]  886 	add	hl,de
      000590 29               [11]  887 	add	hl,hl
      000591 19               [11]  888 	add	hl,de ; DE/16 * 11
      000592 11r2Dr00         [10]  889 	ld	de,#_LevelMap
      000595 19               [11]  890 	add	hl,de
      000596 22r2Dr0B         [16]  891 	ld	(_p), hl
      000599 08               [ 4]  892 	ex	af,af'				; a' = ScrnX
      00059A 5F               [ 4]  893 	ld	e,a ; DE vramm address for new border data
      00059B D6 F0            [ 7]  894 	sub	a,#240 ; L = E +/- 240U according to the scroll direction
      00059D 6F               [ 4]  895 	ld	l,a ; DL hold vramm address for blank border
      00059E 79               [ 4]  896 	ld	a,c ; C = low(MapX)
      00059F E6 0F            [ 7]  897 	and	a,#15
      0005A1 87               [ 4]  898 	add	a,a
      0005A2 87               [ 4]  899 	add	a,a
      0005A3 87               [ 4]  900 	add	a,a
      0005A4 87               [ 4]  901 	add	a,a
      0005A5 D9               [ 4]  902 	exx
      0005A6 57               [ 4]  903 	ld	d,a ; common offeset of the address in the tile
      0005A7 0E 98            [ 7]  904 	ld	c,#0x98 ; used by _PlotOneColumnTileAndMask
      0005A9 D9               [ 4]  905 	exx
      0005AA F3               [ 4]  906 	di
      0005AB 3A ED FF         [13]  907 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005AE D3 99            [11]  908 	out	(#0x99), a
      0005B0 3C               [ 4]  909 	inc	a
      0005B1 32 ED FF         [13]  910 	ld	(_RG14SA),a ; save next block
      0005B4 3E 8E            [ 7]  911 	ld	a,#0x8E
      0005B6 D3 99            [11]  912 	out	(#0x99), a
      0005B8 0E 99            [ 7]  913 	ld	c,#0x99
      0005BA 16 40            [ 7]  914 	ld	d,#0x40
      0005BC CDrC7r03         [17]  915 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005BF CDrC7r03         [17]  916 	call	_PlotOneColumnTileAndMask
      0005C2 CDrC7r03         [17]  917 	call	_PlotOneColumnTileAndMask
      0005C5 CDrC7r03         [17]  918 	call	_PlotOneColumnTileAndMask
      0005C8 3A ED FF         [13]  919 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005CB D3 99            [11]  920 	out	(#0x99), a
      0005CD 3C               [ 4]  921 	inc	a
      0005CE 32 ED FF         [13]  922 	ld	(_RG14SA),a ; save next block
      0005D1 3E 8E            [ 7]  923 	ld	a,#0x8E
      0005D3 D3 99            [11]  924 	out	(#0x99), a
      0005D5 16 40            [ 7]  925 	ld	d,#0x40
      0005D7 CDrC7r03         [17]  926 	call	_PlotOneColumnTileAndMask ; plot 4 tiles
      0005DA CDrC7r03         [17]  927 	call	_PlotOneColumnTileAndMask
      0005DD CDrC7r03         [17]  928 	call	_PlotOneColumnTileAndMask
      0005E0 CDrC7r03         [17]  929 	call	_PlotOneColumnTileAndMask
      0005E3 3A ED FF         [13]  930 	ld	a,(_RG14SA) ; set address in vdp(14)
      0005E6 D3 99            [11]  931 	out	(#0x99), a
      0005E8 3E 8E            [ 7]  932 	ld	a,#0x8E
      0005EA D3 99            [11]  933 	out	(#0x99), a
      0005EC 16 40            [ 7]  934 	ld	d,#0x40
      0005EE CDrC7r03         [17]  935 	call	_PlotOneColumnTileAndMask ; plot 3 tiles
      0005F1 CDrC7r03         [17]  936 	call	_PlotOneColumnTileAndMask
      0005F4 CDrC7r03         [17]  937 	call	_PlotOneColumnTileAndMask
      0005F7 FB               [ 4]  938 	ei
      0005F8 C9               [10]  939 	ret
                                    940 ;src\mytestrom.c:495: }
                                    941 ;src\mytestrom.c:497: void NewLine(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                    942 ;	---------------------------------
                                    943 ; Function NewLine
                                    944 ; ---------------------------------
      0005F9                        945 _NewLine::
                                    946 ;src\mytestrom.c:606: __endasm;
      0005F9 C1               [10]  947 	pop	bc ; get ret address
      0005FA D1               [10]  948 	pop	de ; de = MapX
      0005FB C5               [11]  949 	push	bc ; save ret address
      0005FC 08               [ 4]  950 	ex	af,af'			; a' = ScrnX
      0005FD 7D               [ 4]  951 	ld	a,l ; l = page
      0005FE 87               [ 4]  952 	add	a,a
      0005FF 87               [ 4]  953 	add	a,a
      000600 32 ED FF         [13]  954 	ld	(_RG14SA),a
      000603 4B               [ 4]  955 	ld	c,e ; C = low(mapx)
      000604 CB 2A            [ 8]  956 	sra	d ; DE/16
      000606 CB 1B            [ 8]  957 	rr	e
      000608 CB 2A            [ 8]  958 	sra	d
      00060A CB 1B            [ 8]  959 	rr	e
      00060C CB 2A            [ 8]  960 	sra	d
      00060E CB 1B            [ 8]  961 	rr	e
      000610 CB 2A            [ 8]  962 	sra	d
      000612 CB 1B            [ 8]  963 	rr	e
      000614 6B               [ 4]  964 	ld	l,e
      000615 62               [ 4]  965 	ld	h,d
      000616 29               [11]  966 	add	hl,hl
      000617 29               [11]  967 	add	hl,hl
      000618 19               [11]  968 	add	hl,de
      000619 29               [11]  969 	add	hl,hl
      00061A 19               [11]  970 	add	hl,de ; DE/16 * 11
      00061B 11r2Dr00         [10]  971 	ld	de,#_LevelMap
      00061E 19               [11]  972 	add	hl,de
      00061F 22r2Dr0B         [16]  973 	ld	(_p), hl
      000622 08               [ 4]  974 	ex	af,af'			; a' = ScrnX
      000623 5F               [ 4]  975 	ld	e,a ; DE vramm address for new border data
      000624 79               [ 4]  976 	ld	a,c ; C = low(MapX)
      000625 E6 0F            [ 7]  977 	and	a,#15
      000627 87               [ 4]  978 	add	a,a
      000628 87               [ 4]  979 	add	a,a
      000629 87               [ 4]  980 	add	a,a
      00062A 87               [ 4]  981 	add	a,a
      00062B D9               [ 4]  982 	exx
      00062C 57               [ 4]  983 	ld	d,a ; common offeset of the address in the tile
      00062D 0E 98            [ 7]  984 	ld	c,#0x98 ; used by _PlotOneColumnTile
      00062F D9               [ 4]  985 	exx
      000630 F3               [ 4]  986 	di
      000631 3A ED FF         [13]  987 	ld	a,(_RG14SA) ; set address in vdp(14)
      000634 D3 99            [11]  988 	out	(#0x99), a
      000636 3C               [ 4]  989 	inc	a
      000637 32 ED FF         [13]  990 	ld	(_RG14SA),a ; save next block
      00063A 3E 8E            [ 7]  991 	ld	a,#0x8E
      00063C D3 99            [11]  992 	out	(#0x99), a
      00063E 0E 99            [ 7]  993 	ld	c,#0x99
      000640 16 40            [ 7]  994 	ld	d,#0x40
      000642 CDr17r03         [17]  995 	call	_PlotOneColumnTile ; 4 tiles
      000645 CDr17r03         [17]  996 	call	_PlotOneColumnTile
      000648 CDr17r03         [17]  997 	call	_PlotOneColumnTile
      00064B CDr17r03         [17]  998 	call	_PlotOneColumnTile
      00064E 3A ED FF         [13]  999 	ld	a,(_RG14SA) ; set address in vdp(14)
      000651 D3 99            [11] 1000 	out	(#0x99), a
      000653 3C               [ 4] 1001 	inc	a
      000654 32 ED FF         [13] 1002 	ld	(_RG14SA),a ; save next block
      000657 3E 8E            [ 7] 1003 	ld	a,#0x8E
      000659 D3 99            [11] 1004 	out	(#0x99), a
      00065B 16 40            [ 7] 1005 	ld	d,#0x40
      00065D CDr17r03         [17] 1006 	call	_PlotOneColumnTile ; 4 tiles
      000660 CDr17r03         [17] 1007 	call	_PlotOneColumnTile
      000663 CDr17r03         [17] 1008 	call	_PlotOneColumnTile
      000666 CDr17r03         [17] 1009 	call	_PlotOneColumnTile
      000669 3A ED FF         [13] 1010 	ld	a,(_RG14SA) ; set address in vdp(14)
      00066C D3 99            [11] 1011 	out	(#0x99), a
      00066E 3E 8E            [ 7] 1012 	ld	a,#0x8E
      000670 D3 99            [11] 1013 	out	(#0x99), a
      000672 16 40            [ 7] 1014 	ld	d,#0x40
      000674 CDr17r03         [17] 1015 	call	_PlotOneColumnTile ; 3 tiles
      000677 CDr17r03         [17] 1016 	call	_PlotOneColumnTile
      00067A CDr17r03         [17] 1017 	call	_PlotOneColumnTile
      00067D FB               [ 4] 1018 	ei
      00067E C9               [10] 1019 	ret
                                   1020 ;src\mytestrom.c:607: }
                                   1021 ;src\mytestrom.c:609: void PatchPlotOneTile(unsigned char ScrnX,char page, int MapX) __sdcccall(1) __naked
                                   1022 ;	---------------------------------
                                   1023 ; Function PatchPlotOneTile
                                   1024 ; ---------------------------------
      00067F                       1025 _PatchPlotOneTile::
                                   1026 ;src\mytestrom.c:692: __endasm;
      00067F C1               [10] 1027 	pop	bc ; get ret address
      000680 D1               [10] 1028 	pop	de ; DE = MapX
      000681 C5               [11] 1029 	push	bc ; save ret address
      000682 08               [ 4] 1030 	ex	af,af'			; a' = ScrnX
      000683 7D               [ 4] 1031 	ld	a,l ; l = page
      000684 87               [ 4] 1032 	add	a,a
      000685 87               [ 4] 1033 	add	a,a
      000686 32 ED FF         [13] 1034 	ld	(_RG14SA),a
      000689 4B               [ 4] 1035 	ld	c,e ; C = low(mapx)
      00068A CB 2A            [ 8] 1036 	sra	d ; DE/16
      00068C CB 1B            [ 8] 1037 	rr	e
      00068E CB 2A            [ 8] 1038 	sra	d
      000690 CB 1B            [ 8] 1039 	rr	e
      000692 CB 2A            [ 8] 1040 	sra	d
      000694 CB 1B            [ 8] 1041 	rr	e
      000696 CB 2A            [ 8] 1042 	sra	d
      000698 CB 1B            [ 8] 1043 	rr	e
      00069A 6B               [ 4] 1044 	ld	l,e
      00069B 62               [ 4] 1045 	ld	h,d
      00069C 29               [11] 1046 	add	hl,hl
      00069D 29               [11] 1047 	add	hl,hl
      00069E 19               [11] 1048 	add	hl,de
      00069F 29               [11] 1049 	add	hl,hl
      0006A0 19               [11] 1050 	add	hl,de ; DE/16 * 11
      0006A1 11r2Dr00         [10] 1051 	ld	de,#_LevelMap
      0006A4 19               [11] 1052 	add	hl,de
      0006A5 22r2Dr0B         [16] 1053 	ld	(_p), hl
      0006A8 08               [ 4] 1054 	ex	af,af'				; a' = ScrnX
      0006A9 5F               [ 4] 1055 	ld	e,a ; DE vramm address for new border data
      0006AA 79               [ 4] 1056 	ld	a,c ; C = low(MapX)
      0006AB E6 0F            [ 7] 1057 	and	a,#15
      0006AD 87               [ 4] 1058 	add	a,a
      0006AE 87               [ 4] 1059 	add	a,a
      0006AF 87               [ 4] 1060 	add	a,a
      0006B0 87               [ 4] 1061 	add	a,a
      0006B1 D9               [ 4] 1062 	exx
      0006B2 57               [ 4] 1063 	ld	d,a ; common offeset of the address in the tile
      0006B3 0E 98            [ 7] 1064 	ld	c,#0x98 ; used by _PlotOneColumnTile
      0006B5 D9               [ 4] 1065 	exx
      0006B6 F3               [ 4] 1066 	di
      0006B7 3A ED FF         [13] 1067 	ld	a,(_RG14SA) ; set address in vdp(14)
      0006BA D3 99            [11] 1068 	out	(#0x99), a
      0006BC 3E 8E            [ 7] 1069 	ld	a,#0x8E
      0006BE D3 99            [11] 1070 	out	(#0x99), a
      0006C0 16 40            [ 7] 1071 	ld	d,#0x40
      0006C2 0E 99            [ 7] 1072 	ld	c,#0x99
      0006C4 CDr17r03         [17] 1073 	call	_PlotOneColumnTile ; 1 tile
      0006C7 FB               [ 4] 1074 	ei
      0006C8 C9               [10] 1075 	ret
                                   1076 ;src\mytestrom.c:693: }
                                   1077 ;src\mytestrom.c:695: void 	myVDPwrite(char data, char vdpreg) __sdcccall(1) __naked
                                   1078 ;	---------------------------------
                                   1079 ; Function myVDPwrite
                                   1080 ; ---------------------------------
      0006C9                       1081 _myVDPwrite::
                                   1082 ;src\mytestrom.c:707: __endasm;
      0006C9 F3               [ 4] 1083 	di
      0006CA D3 99            [11] 1084 	out	(#0x99),a
      0006CC 3E 80            [ 7] 1085 	ld	a,#128
      0006CE B5               [ 4] 1086 	or	a,l
      0006CF D3 99            [11] 1087 	out	(#0x99),a ;R#A := L
      0006D1 FB               [ 4] 1088 	ei
      0006D2 C9               [10] 1089 	ret
                                   1090 ;src\mytestrom.c:709: }	
                                   1091 ;src\mytestrom.c:711: unsigned char myInPort(unsigned char port) __sdcccall(1) __naked __preserves_regs(b,h,l,d,e,iyl,iyh)
                                   1092 ;	---------------------------------
                                   1093 ; Function myInPort
                                   1094 ; ---------------------------------
      0006D3                       1095 _myInPort::
                                   1096 ;src\mytestrom.c:718: __endasm;
      0006D3 4F               [ 4] 1097 	ld	c, a ; port
      0006D4 ED 78            [12] 1098 	in	a, (c) ; return value in A
      0006D6 C9               [10] 1099 	ret
                                   1100 ;src\mytestrom.c:719: }
                                   1101 ;src\mytestrom.c:721: void myOutPort(unsigned char port,unsigned char data) __sdcccall(1) __naked __preserves_regs(a,b,h,l,d,e,iyl,iyh)
                                   1102 ;	---------------------------------
                                   1103 ; Function myOutPort
                                   1104 ; ---------------------------------
      0006D7                       1105 _myOutPort::
                                   1106 ;src\mytestrom.c:729: __endasm;
      0006D7 4F               [ 4] 1107 	ld	c, a ; port in A
      0006D8 ED 69            [12] 1108 	out	(c),l ; value in L
      0006DA C9               [10] 1109 	ret
                                   1110 ;src\mytestrom.c:730: }
                                   1111 ;src\mytestrom.c:732: void  	myfVDP(void *Address)  __sdcccall(1)  __naked
                                   1112 ;	---------------------------------
                                   1113 ; Function myfVDP
                                   1114 ; ---------------------------------
      0006DB                       1115 _myfVDP::
                                   1116 ;src\mytestrom.c:764: __endasm;
      0006DB F3               [ 4] 1117 	di
      0006DC 3E 20            [ 7] 1118 	ld	a,#32 ; Start with Reg 32
      0006DE D3 99            [11] 1119 	out	(#0x99),a
      0006E0 3E 91            [ 7] 1120 	ld	a,#128+#17
      0006E2 D3 99            [11] 1121 	out	(#0x99),a ;R#17 := 32
      0006E4 0E 9B            [ 7] 1122 	ld	c,#0x9b ; c=#0x9b
      0006E6                       1123 	fvdpWait:
      0006E6 3E 02            [ 7] 1124 	ld	a,#2
      0006E8 D3 99            [11] 1125 	out	(#0x99),a
      0006EA 3E 8F            [ 7] 1126 	ld	a,#128+#15
      0006EC D3 99            [11] 1127 	out	(#0x99),a
      0006EE DB 99            [11] 1128 	in	a,(#0x99)
      0006F0 0F               [ 4] 1129 	rrca
      0006F1 DArE6r06         [10] 1130 	jp	c, fvdpWait ; wait CE
                                   1131 	.rept	#15
                                   1132 	OUTI
                                   1133 	.endm
      0006F4 ED A3            [16]    1 	OUTI
      0006F6 ED A3            [16]    1 	OUTI
      0006F8 ED A3            [16]    1 	OUTI
      0006FA ED A3            [16]    1 	OUTI
      0006FC ED A3            [16]    1 	OUTI
      0006FE ED A3            [16]    1 	OUTI
      000700 ED A3            [16]    1 	OUTI
      000702 ED A3            [16]    1 	OUTI
      000704 ED A3            [16]    1 	OUTI
      000706 ED A3            [16]    1 	OUTI
      000708 ED A3            [16]    1 	OUTI
      00070A ED A3            [16]    1 	OUTI
      00070C ED A3            [16]    1 	OUTI
      00070E ED A3            [16]    1 	OUTI
      000710 ED A3            [16]    1 	OUTI
      000712 AF               [ 4] 1134 	xor	a,a ; set Status Register #0 for reading
      000713 D3 99            [11] 1135 	out	(#0x99),a
      000715 3E 8F            [ 7] 1136 	ld	a,#0x8f
      000717 D3 99            [11] 1137 	out	(#0x99),a
      000719 FB               [ 4] 1138 	ei
      00071A C9               [10] 1139 	ret
                                   1140 ;src\mytestrom.c:765: }
                                   1141 ;src\mytestrom.c:817: void mySetAdjust(signed char x, signed char y) __sdcccall(1)
                                   1142 ;	---------------------------------
                                   1143 ; Function mySetAdjust
                                   1144 ; ---------------------------------
      00071B                       1145 _mySetAdjust::
                                   1146 ;src\mytestrom.c:819: unsigned char value = ((x-8) & 15) | (((y-8) & 15)<<4);
      00071B C6 F8            [ 7] 1147 	add	a, #0xf8
      00071D E6 0F            [ 7] 1148 	and	a, #0x0f
      00071F 4F               [ 4] 1149 	ld	c, a
      000720 7D               [ 4] 1150 	ld	a, l
      000721 C6 F8            [ 7] 1151 	add	a, #0xf8
      000723 E6 0F            [ 7] 1152 	and	a, #0x0f
      000725 87               [ 4] 1153 	add	a, a
      000726 87               [ 4] 1154 	add	a, a
      000727 87               [ 4] 1155 	add	a, a
      000728 87               [ 4] 1156 	add	a, a
      000729 B1               [ 4] 1157 	or	a, c
      00072A 4F               [ 4] 1158 	ld	c, a
                                   1159 ;src\mytestrom.c:820: RG18SA = value;			// Reg18 Save
      00072B FD 21 F1 FF      [14] 1160 	ld	iy, #_RG18SA
      00072F FD 71 00         [19] 1161 	ld	0 (iy), c
                                   1162 ;src\mytestrom.c:821: myVDPwrite(value,18);
      000732 2E 12            [ 7] 1163 	ld	l, #0x12
                                   1164 ;	spillPairReg hl
                                   1165 ;	spillPairReg hl
      000734 79               [ 4] 1166 	ld	a, c
                                   1167 ;src\mytestrom.c:822: }
      000735 C3rC9r06         [10] 1168 	jp	_myVDPwrite
                                   1169 ;src\mytestrom.c:829: void myFT_wait(unsigned char cicles) __sdcccall(1) __naked {
                                   1170 ;	---------------------------------
                                   1171 ; Function myFT_wait
                                   1172 ; ---------------------------------
      000738                       1173 _myFT_wait::
                                   1174 ;src\mytestrom.c:852: __endasm;
      000738 B7               [ 4] 1175 	or	a, a
      000739                       1176 	00004$:
      000739 C8               [11] 1177 	ret	Z
      00073A 76               [ 4] 1178 	halt
      00073B 3D               [ 4] 1179 	dec	a
      00073C C3r39r07         [10] 1180 	jp	00004$
                                   1181 ;src\mytestrom.c:853: }
                                   1182 ;src\mytestrom.c:855: void WaitLineInt(void) __sdcccall(1) __naked {
                                   1183 ;	---------------------------------
                                   1184 ; Function WaitLineInt
                                   1185 ; ---------------------------------
      00073F                       1186 _WaitLineInt::
                                   1187 ;src\mytestrom.c:885: __endasm;
      00073F F3               [ 4] 1188 	di
      000740 3E 01            [ 7] 1189 	ld	a,#1 ; set Status Register #1 for reading
      000742 D3 99            [11] 1190 	out	(#0x99),a
      000744 3E 8F            [ 7] 1191 	ld	a,#0x8f
      000746 D3 99            [11] 1192 	out	(#0x99),a
      000748                       1193 	WaitLI:
      000748 DB 99            [11] 1194 	in	a,(#0x99)
      00074A 0F               [ 4] 1195 	rrca
      00074B 30 FB            [12] 1196 	jr	nc,WaitLI
      00074D AF               [ 4] 1197 	xor	a,a ; set Status Register #0 for reading
      00074E D3 99            [11] 1198 	out	(#0x99),a
      000750 3E 8F            [ 7] 1199 	ld	a,#0x8f
      000752 D3 99            [11] 1200 	out	(#0x99),a
      000754 FB               [ 4] 1201 	ei
      000755 C9               [10] 1202 	ret
                                   1203 ;src\mytestrom.c:886: }
                                   1204 ;src\mytestrom.c:918: void FT_errorHandler(char n, char *name) __sdcccall(1) 
                                   1205 ;	---------------------------------
                                   1206 ; Function FT_errorHandler
                                   1207 ; ---------------------------------
      000756                       1208 _FT_errorHandler::
      000756 4F               [ 4] 1209 	ld	c, a
                                   1210 ;src\mytestrom.c:925: chgmod(0);
      000757 C5               [11] 1211 	push	bc
      000758 D5               [11] 1212 	push	de
      000759 AF               [ 4] 1213 	xor	a, a
      00075A CDrB7r0B         [17] 1214 	call	_chgmod
      00075D D1               [10] 1215 	pop	de
      00075E C1               [10] 1216 	pop	bc
                                   1217 ;src\mytestrom.c:927: switch (n)
      00075F 79               [ 4] 1218 	ld	a, c
      000760 3D               [ 4] 1219 	dec	a
      000761 28 12            [12] 1220 	jr	Z, 00101$
      000763 79               [ 4] 1221 	ld	a, c
      000764 D6 02            [ 7] 1222 	sub	a, #0x02
      000766 28 1C            [12] 1223 	jr	Z, 00102$
      000768 79               [ 4] 1224 	ld	a, c
      000769 D6 03            [ 7] 1225 	sub	a, #0x03
      00076B 28 26            [12] 1226 	jr	Z, 00103$
      00076D 79               [ 4] 1227 	ld	a, c
      00076E D6 04            [ 7] 1228 	sub	a, #0x04
      000770 28 2A            [12] 1229 	jr	Z, 00104$
      000772 C3rA8r07         [10] 1230 	jp	00105$
                                   1231 ;src\mytestrom.c:929: case 1:
      000775                       1232 00101$:
                                   1233 ;src\mytestrom.c:930: Print("\n\rFAILED: fcb_open(): ");
      000775 D5               [11] 1234 	push	de
      000776 21rAAr07         [10] 1235 	ld	hl, #___str_1
      000779 CDr5Cr0C         [17] 1236 	call	_Print
      00077C D1               [10] 1237 	pop	de
                                   1238 ;src\mytestrom.c:931: Print(name);
      00077D EB               [ 4] 1239 	ex	de, hl
      00077E CDr5Cr0C         [17] 1240 	call	_Print
                                   1241 ;src\mytestrom.c:932: break;
      000781 C3rA8r07         [10] 1242 	jp	00105$
                                   1243 ;src\mytestrom.c:934: case 2:
      000784                       1244 00102$:
                                   1245 ;src\mytestrom.c:935: Print("\n\rFAILED: fcb_close():");
      000784 D5               [11] 1246 	push	de
      000785 21rC1r07         [10] 1247 	ld	hl, #___str_2
      000788 CDr5Cr0C         [17] 1248 	call	_Print
      00078B D1               [10] 1249 	pop	de
                                   1250 ;src\mytestrom.c:936: Print(name);
      00078C EB               [ 4] 1251 	ex	de, hl
      00078D CDr5Cr0C         [17] 1252 	call	_Print
                                   1253 ;src\mytestrom.c:937: break;  
      000790 C3rA8r07         [10] 1254 	jp	00105$
                                   1255 ;src\mytestrom.c:939: case 3:
      000793                       1256 00103$:
                                   1257 ;src\mytestrom.c:940: Print("\n\rStop Kidding, run me on MSX2 !");
      000793 21rD8r07         [10] 1258 	ld	hl, #___str_3
      000796 CDr5Cr0C         [17] 1259 	call	_Print
                                   1260 ;src\mytestrom.c:941: break;
      000799 C3rA8r07         [10] 1261 	jp	00105$
                                   1262 ;src\mytestrom.c:943: case 4:
      00079C                       1263 00104$:
                                   1264 ;src\mytestrom.c:944: Print("\n\rUnespected end of file:");
      00079C D5               [11] 1265 	push	de
      00079D 21rF9r07         [10] 1266 	ld	hl, #___str_4
      0007A0 CDr5Cr0C         [17] 1267 	call	_Print
      0007A3 D1               [10] 1268 	pop	de
                                   1269 ;src\mytestrom.c:945: Print(name);		  
      0007A4 EB               [ 4] 1270 	ex	de, hl
      0007A5 CDr5Cr0C         [17] 1271 	call	_Print
                                   1272 ;src\mytestrom.c:947: }
      0007A8                       1273 00105$:
                                   1274 ;src\mytestrom.c:948: Reboot(0);
      0007A8 C7               [11] 1275 	rst	#0
                                   1276 ;src\mytestrom.c:949: }
      0007A9 C9               [10] 1277 	ret
      0007AA                       1278 ___str_1:
      0007AA 0A                    1279 	.db 0x0a
      0007AB 0D                    1280 	.db 0x0d
      0007AC 46 41 49 4C 45 44 3A  1281 	.ascii "FAILED: fcb_open(): "
             20 66 63 62 5F 6F 70
             65 6E 28 29 3A 20
      0007C0 00                    1282 	.db 0x00
      0007C1                       1283 ___str_2:
      0007C1 0A                    1284 	.db 0x0a
      0007C2 0D                    1285 	.db 0x0d
      0007C3 46 41 49 4C 45 44 3A  1286 	.ascii "FAILED: fcb_close():"
             20 66 63 62 5F 63 6C
             6F 73 65 28 29 3A
      0007D7 00                    1287 	.db 0x00
      0007D8                       1288 ___str_3:
      0007D8 0A                    1289 	.db 0x0a
      0007D9 0D                    1290 	.db 0x0d
      0007DA 53 74 6F 70 20 4B 69  1291 	.ascii "Stop Kidding, run me on MSX2 !"
             64 64 69 6E 67 2C 20
             72 75 6E 20 6D 65 20
             6F 6E 20 4D 53 58 32
             20 21
      0007F8 00                    1292 	.db 0x00
      0007F9                       1293 ___str_4:
      0007F9 0A                    1294 	.db 0x0a
      0007FA 0D                    1295 	.db 0x0d
      0007FB 55 6E 65 73 70 65 63  1296 	.ascii "Unespected end of file:"
             74 65 64 20 65 6E 64
             20 6F 66 20 66 69 6C
             65 3A
      000812 00                    1297 	.db 0x00
                                   1298 ;src\mytestrom.c:951: void MyLoadMap(char mapnumber,unsigned char* p ) __sdcccall(1)
                                   1299 ;	---------------------------------
                                   1300 ; Function MyLoadMap
                                   1301 ; ---------------------------------
      000813                       1302 _MyLoadMap::
                                   1303 ;src\mytestrom.c:955: LevelW = ((char*)DataLevelMap)[0];
      000813 01r14r1D         [10] 1304 	ld	bc, #_DataLevelMap
      000816 0A               [ 7] 1305 	ld	a, (bc)
      000817 32r21r00         [13] 1306 	ld	(_LevelW+0), a
                                   1307 ;src\mytestrom.c:956: LevelH = ((char*)DataLevelMap)[1];
      00081A 69               [ 4] 1308 	ld	l, c
                                   1309 ;	spillPairReg hl
                                   1310 ;	spillPairReg hl
      00081B 60               [ 4] 1311 	ld	h, b
                                   1312 ;	spillPairReg hl
                                   1313 ;	spillPairReg hl
      00081C 23               [ 6] 1314 	inc	hl
      00081D 7E               [ 7] 1315 	ld	a, (hl)
      00081E 32r22r00         [13] 1316 	ld	(_LevelH+0), a
                                   1317 ;src\mytestrom.c:957: memcpy(p,&((char*)DataLevelMap)[2],MaxLevelW*MaxLevelH);
                                   1318 ;	spillPairReg hl
                                   1319 ;	spillPairReg hl
      000821 69               [ 4] 1320 	ld	l, c
      000822 60               [ 4] 1321 	ld	h, b
      000823 23               [ 6] 1322 	inc	hl
      000824 23               [ 6] 1323 	inc	hl
                                   1324 ;	spillPairReg hl
                                   1325 ;	spillPairReg hl
      000825 01 00 0B         [10] 1326 	ld	bc, #0x0b00
      000828 ED B0            [21] 1327 	ldir
                                   1328 ;src\mytestrom.c:958: }
      00082A C9               [10] 1329 	ret
                                   1330 ;src\mytestrom.c:960: void myISR(void) __sdcccall(1) __naked
                                   1331 ;	---------------------------------
                                   1332 ; Function myISR
                                   1333 ; ---------------------------------
      00082B                       1334 _myISR::
                                   1335 ;src\mytestrom.c:999: __endasm;
      00082B F5               [11] 1336 	push	af
      00082C AF               [ 4] 1337 	xor	a,a ; set Status Register #0 for reading
      00082D D3 99            [11] 1338 	out	(#0x99),a
      00082F 3E 8F            [ 7] 1339 	ld	a,#0x8f
      000831 D3 99            [11] 1340 	out	(#0x99),a
      000833 DB 99            [11] 1341 	in	a,(#0x99) ; mimimum ISR
      000835 3Ar2Cr00         [13] 1342 	ld	a,(#_cursat)
      000838 A7               [ 4] 1343 	and	a,a
      000839 3E 03            [ 7] 1344 	ld	a,#3
      00083B 20 02            [12] 1345 	jr	nz,setsat1
      00083D 3E 01            [ 7] 1346 	ld	a,#1
      00083F                       1347 	setsat1:
      00083F D3 99            [11] 1348 	out	(#0x99),a
      000841 3E 8B            [ 7] 1349 	ld	a,#128+#11
      000843 D3 99            [11] 1350 	out	(#0x99),a
      000845 F1               [10] 1351 	pop	af
      000846 FB               [ 4] 1352 	ei
      000847 C9               [10] 1353 	ret
                                   1354 ;src\mytestrom.c:1000: }
                                   1355 ;src\mytestrom.c:1002: void myInstISR(void) __sdcccall(1) __naked
                                   1356 ;	---------------------------------
                                   1357 ; Function myInstISR
                                   1358 ; ---------------------------------
      000848                       1359 _myInstISR::
                                   1360 ;src\mytestrom.c:1004: myVDPwrite(WindowH-8,19); // indagare sul glitch !!! xxx
      000848 2E 13            [ 7] 1361 	ld	l, #0x13
                                   1362 ;	spillPairReg hl
                                   1363 ;	spillPairReg hl
      00084A 3E A8            [ 7] 1364 	ld	a, #0xa8
      00084C CDrC9r06         [17] 1365 	call	_myVDPwrite
                                   1366 ;src\mytestrom.c:1020: __endasm;
      00084F 21 9A FD         [10] 1367 	ld	hl,#0xFD9A
      000852 11r29r00         [10] 1368 	ld	de,#_OldIsr
      000855 01 03 00         [10] 1369 	ld	bc,#3
      000858 ED B0            [21] 1370 	ldir
      00085A F3               [ 4] 1371 	di
      00085B 3E C3            [ 7] 1372 	ld	a,#0xC3
      00085D 32 9A FD         [13] 1373 	ld	(#0xFD9A+#0),a
      000860 21r2Br08         [10] 1374 	ld	hl,#_myISR
      000863 22 9B FD         [16] 1375 	ld	(#0xFD9A+#1),hl
      000866 FB               [ 4] 1376 	ei
      000867 C9               [10] 1377 	ret
                                   1378 ;src\mytestrom.c:1021: }
                                   1379 ;src\mytestrom.c:1023: void myISRrestore(void) __sdcccall(1) __naked
                                   1380 ;	---------------------------------
                                   1381 ; Function myISRrestore
                                   1382 ; ---------------------------------
      000868                       1383 _myISRrestore::
                                   1384 ;src\mytestrom.c:1025: RG0SAV &= 0xEF;
      000868 3A DF F3         [13] 1385 	ld	a, (_RG0SAV+0)
      00086B E6 EF            [ 7] 1386 	and	a, #0xef
      00086D 32 DF F3         [13] 1387 	ld	(_RG0SAV+0), a
                                   1388 ;src\mytestrom.c:1026: myVDPwrite(RG0SAV,0);
      000870 2E 00            [ 7] 1389 	ld	l, #0x00
                                   1390 ;	spillPairReg hl
                                   1391 ;	spillPairReg hl
      000872 3A DF F3         [13] 1392 	ld	a, (_RG0SAV+0)
      000875 CDrC9r06         [17] 1393 	call	_myVDPwrite
                                   1394 ;src\mytestrom.c:1036: __endasm;
      000878 21r29r00         [10] 1395 	ld	hl,#_OldIsr
      00087B 11 9A FD         [10] 1396 	ld	de,#0xFD9A
      00087E 01 03 00         [10] 1397 	ld	bc,#3
      000881 F3               [ 4] 1398 	di
      000882 ED B0            [21] 1399 	ldir
      000884 FB               [ 4] 1400 	ei
      000885 C9               [10] 1401 	ret
                                   1402 ;src\mytestrom.c:1037: }
                                   1403 ;src\mytestrom.c:1041: unsigned char myCheckkbd(unsigned char nrow) __sdcccall(1) __naked
                                   1404 ;	---------------------------------
                                   1405 ; Function myCheckkbd
                                   1406 ; ---------------------------------
      000886                       1407 _myCheckkbd::
                                   1408 ;src\mytestrom.c:1067: __endasm;
                                   1409 ;
                                   1410 ;
                                   1411 ;
                                   1412 ;
                                   1413 ;
                                   1414 ;
                                   1415 ;
                                   1416 ;
                                   1417 ;
                                   1418 ;
                                   1419 ;	checkkbd:
      000886 5F               [ 4] 1420 	ld	e,a
      000887 F3               [ 4] 1421 	di
      000888 DB AA            [11] 1422 	in	a,(#0xaa)
      00088A E6 F0            [ 7] 1423 	and	a,#0b11110000 ; upper 4 bits contain info to preserve
      00088C B3               [ 4] 1424 	or	a,e
      00088D D3 AA            [11] 1425 	out	(#0xaa),a
      00088F DB A9            [11] 1426 	in	a,(#0xa9)
      000891 6F               [ 4] 1427 	ld	l,a
      000892 FB               [ 4] 1428 	ei
      000893 C9               [10] 1429 	ret
                                   1430 ;src\mytestrom.c:1068: }
                                   1431 ;src\mytestrom.c:1079: void ObjectsInit(void) {
                                   1432 ;	---------------------------------
                                   1433 ; Function ObjectsInit
                                   1434 ; ---------------------------------
      000894                       1435 _ObjectsInit::
      000894 DD E5            [15] 1436 	push	ix
      000896 DD 21 00 00      [14] 1437 	ld	ix,#0
      00089A DD 39            [15] 1438 	add	ix,sp
      00089C F5               [11] 1439 	push	af
      00089D 3B               [ 6] 1440 	dec	sp
                                   1441 ;src\mytestrom.c:1081: for (t=0;t<MaxObjNum;t++)
      00089E DD 36 FF 00      [19] 1442 	ld	-1 (ix), #0x00
      0008A2                       1443 00102$:
                                   1444 ;src\mytestrom.c:1083: object[t].x = t*LevelW*4/MaxObjNum + WindowW/2;
      0008A2 DD 4E FF         [19] 1445 	ld	c, -1 (ix)
      0008A5 06 00            [ 7] 1446 	ld	b, #0x00
      0008A7 69               [ 4] 1447 	ld	l, c
      0008A8 60               [ 4] 1448 	ld	h, b
      0008A9 29               [11] 1449 	add	hl, hl
      0008AA 09               [11] 1450 	add	hl, bc
      0008AB 29               [11] 1451 	add	hl, hl
      0008AC 09               [11] 1452 	add	hl, bc
      0008AD EB               [ 4] 1453 	ex	de, hl
      0008AE 21r2Fr0B         [10] 1454 	ld	hl, #_object
      0008B1 19               [11] 1455 	add	hl, de
      0008B2 EB               [ 4] 1456 	ex	de, hl
      0008B3 33               [ 6] 1457 	inc	sp
      0008B4 33               [ 6] 1458 	inc	sp
      0008B5 D5               [11] 1459 	push	de
      0008B6 D5               [11] 1460 	push	de
      0008B7 3Ar21r00         [13] 1461 	ld	a, (#_LevelW + 0)
      0008BA 5F               [ 4] 1462 	ld	e, a
      0008BB DD 66 FF         [19] 1463 	ld	h, -1 (ix)
                                   1464 ;	spillPairReg hl
                                   1465 ;	spillPairReg hl
      0008BE 2E 00            [ 7] 1466 	ld	l, #0x00
      0008C0 55               [ 4] 1467 	ld	d, l
      0008C1 06 08            [ 7] 1468 	ld	b, #0x08
      0008C3                       1469 00125$:
      0008C3 29               [11] 1470 	add	hl, hl
      0008C4 30 01            [12] 1471 	jr	NC, 00126$
      0008C6 19               [11] 1472 	add	hl, de
      0008C7                       1473 00126$:
      0008C7 10 FA            [13] 1474 	djnz	00125$
      0008C9 D1               [10] 1475 	pop	de
      0008CA 29               [11] 1476 	add	hl, hl
      0008CB 29               [11] 1477 	add	hl, hl
                                   1478 ;	spillPairReg hl
                                   1479 ;	spillPairReg hl
      0008CC 4D               [ 4] 1480 	ld	c,l
      0008CD 44               [ 4] 1481 	ld	b,h
                                   1482 ;	spillPairReg hl
                                   1483 ;	spillPairReg hl
      0008CE CB 78            [ 8] 1484 	bit	7, b
      0008D0 28 04            [12] 1485 	jr	Z, 00106$
      0008D2 21 07 00         [10] 1486 	ld	hl, #0x0007
      0008D5 09               [11] 1487 	add	hl, bc
      0008D6                       1488 00106$:
      0008D6 CB 2C            [ 8] 1489 	sra	h
      0008D8 CB 1D            [ 8] 1490 	rr	l
      0008DA CB 2C            [ 8] 1491 	sra	h
      0008DC CB 1D            [ 8] 1492 	rr	l
      0008DE CB 2C            [ 8] 1493 	sra	h
      0008E0 CB 1D            [ 8] 1494 	rr	l
      0008E2 7D               [ 4] 1495 	ld	a, l
      0008E3 44               [ 4] 1496 	ld	b, h
      0008E4 C6 78            [ 7] 1497 	add	a, #0x78
      0008E6 4F               [ 4] 1498 	ld	c, a
      0008E7 30 01            [12] 1499 	jr	NC, 00127$
      0008E9 04               [ 4] 1500 	inc	b
      0008EA                       1501 00127$:
      0008EA E1               [10] 1502 	pop	hl
      0008EB E5               [11] 1503 	push	hl
      0008EC 71               [ 7] 1504 	ld	(hl), c
      0008ED 23               [ 6] 1505 	inc	hl
      0008EE 70               [ 7] 1506 	ld	(hl), b
                                   1507 ;src\mytestrom.c:1084: object[t].y = (t & 1) ? LevelH*16-32 : 0;
      0008EF 6B               [ 4] 1508 	ld	l, e
                                   1509 ;	spillPairReg hl
                                   1510 ;	spillPairReg hl
      0008F0 62               [ 4] 1511 	ld	h, d
                                   1512 ;	spillPairReg hl
                                   1513 ;	spillPairReg hl
      0008F1 23               [ 6] 1514 	inc	hl
      0008F2 23               [ 6] 1515 	inc	hl
      0008F3 DD CB FF 46      [20] 1516 	bit	0, -1 (ix)
      0008F7 28 1A            [12] 1517 	jr	Z, 00107$
      0008F9 3Ar22r00         [13] 1518 	ld	a, (_LevelH+0)
      0008FC 0E 00            [ 7] 1519 	ld	c, #0x00
      0008FE 87               [ 4] 1520 	add	a, a
      0008FF CB 11            [ 8] 1521 	rl	c
      000901 87               [ 4] 1522 	add	a, a
      000902 CB 11            [ 8] 1523 	rl	c
      000904 87               [ 4] 1524 	add	a, a
      000905 CB 11            [ 8] 1525 	rl	c
      000907 87               [ 4] 1526 	add	a, a
      000908 CB 11            [ 8] 1527 	rl	c
      00090A C6 E0            [ 7] 1528 	add	a, #0xe0
      00090C 47               [ 4] 1529 	ld	b, a
      00090D 79               [ 4] 1530 	ld	a, c
      00090E CE FF            [ 7] 1531 	adc	a, #0xff
      000910 C3r15r09         [10] 1532 	jp	00108$
      000913                       1533 00107$:
      000913 AF               [ 4] 1534 	xor	a, a
      000914 47               [ 4] 1535 	ld	b, a
      000915                       1536 00108$:
      000915 70               [ 7] 1537 	ld	(hl), b
      000916 23               [ 6] 1538 	inc	hl
      000917 77               [ 7] 1539 	ld	(hl), a
                                   1540 ;src\mytestrom.c:1085: object[t].frame = t;
      000918 21 05 00         [10] 1541 	ld	hl, #0x0005
      00091B 19               [11] 1542 	add	hl, de
      00091C DD 7E FF         [19] 1543 	ld	a, -1 (ix)
      00091F 77               [ 7] 1544 	ld	(hl), a
                                   1545 ;src\mytestrom.c:1086: object[t].status = 255;		// 0 is for inactive
      000920 21 06 00         [10] 1546 	ld	hl, #0x0006
      000923 19               [11] 1547 	add	hl, de
      000924 36 FF            [10] 1548 	ld	(hl), #0xff
                                   1549 ;src\mytestrom.c:1081: for (t=0;t<MaxObjNum;t++)
      000926 DD 34 FF         [23] 1550 	inc	-1 (ix)
      000929 DD 7E FF         [19] 1551 	ld	a, -1 (ix)
      00092C D6 08            [ 7] 1552 	sub	a, #0x08
      00092E DArA2r08         [10] 1553 	jp	C, 00102$
                                   1554 ;src\mytestrom.c:1088: }
      000931 DD F9            [10] 1555 	ld	sp, ix
      000933 DD E1            [14] 1556 	pop	ix
      000935 C9               [10] 1557 	ret
                                   1558 ;src\mytestrom.c:1096: void ObjectstoVRAM(int MapX) __sdcccall(1)
                                   1559 ;	---------------------------------
                                   1560 ; Function ObjectstoVRAM
                                   1561 ; ---------------------------------
      000936                       1562 _ObjectstoVRAM::
      000936 DD E5            [15] 1563 	push	ix
      000938 DD 21 00 00      [14] 1564 	ld	ix,#0
      00093C DD 39            [15] 1565 	add	ix,sp
      00093E F5               [11] 1566 	push	af
      00093F F5               [11] 1567 	push	af
      000940 3B               [ 6] 1568 	dec	sp
      000941 DD 75 FD         [19] 1569 	ld	-3 (ix), l
      000944 DD 74 FE         [19] 1570 	ld	-2 (ix), h
                                   1571 ;src\mytestrom.c:1105: if (cursat==0) {
      000947 3Ar2Cr00         [13] 1572 	ld	a, (_cursat+0)
      00094A B7               [ 4] 1573 	or	a, a
      00094B 20 0D            [12] 1574 	jr	NZ, 00102$
                                   1575 ;src\mytestrom.c:1106: SetVramW(0,0xFA00);	// sat 0
      00094D 11 00 FA         [10] 1576 	ld	de, #0xfa00
      000950 AF               [ 4] 1577 	xor	a, a
      000951 CDr9Ar0B         [17] 1578 	call	_SetVramW
                                   1579 ;src\mytestrom.c:1107: q = &object[MaxObjNum-1];
      000954 11r60r0B         [10] 1580 	ld	de, #_object+49
      000957 C3r65r09         [10] 1581 	jp	00122$
      00095A                       1582 00102$:
                                   1583 ;src\mytestrom.c:1110: SetVramW(1,0xFA00);	// sat 1		
      00095A 11 00 FA         [10] 1584 	ld	de, #0xfa00
      00095D 3E 01            [ 7] 1585 	ld	a, #0x01
      00095F CDr9Ar0B         [17] 1586 	call	_SetVramW
                                   1587 ;src\mytestrom.c:1111: q = &object[0];		
      000962 11r2Fr0B         [10] 1588 	ld	de, #_object
                                   1589 ;src\mytestrom.c:1115: for (t=0; t<MaxObjNum; t++) 
      000965                       1590 00122$:
      000965 DD 36 FF 00      [19] 1591 	ld	-1 (ix), #0x00
      000969                       1592 00113$:
                                   1593 ;src\mytestrom.c:1118: u = q->x-(((unsigned int) MapX) & 0xFFF0);
      000969 6B               [ 4] 1594 	ld	l, e
      00096A 62               [ 4] 1595 	ld	h, d
      00096B 4E               [ 7] 1596 	ld	c, (hl)
      00096C 23               [ 6] 1597 	inc	hl
      00096D 46               [ 7] 1598 	ld	b, (hl)
      00096E DD 7E FD         [19] 1599 	ld	a, -3 (ix)
      000971 DD 6E FE         [19] 1600 	ld	l, -2 (ix)
                                   1601 ;	spillPairReg hl
                                   1602 ;	spillPairReg hl
      000974 E6 F0            [ 7] 1603 	and	a, #0xf0
      000976 DD 77 FB         [19] 1604 	ld	-5 (ix), a
      000979 DD 75 FC         [19] 1605 	ld	-4 (ix), l
      00097C 21r67r0B         [10] 1606 	ld	hl, #_u
      00097F 79               [ 4] 1607 	ld	a, c
      000980 DD 96 FB         [19] 1608 	sub	a, -5 (ix)
      000983 77               [ 7] 1609 	ld	(hl), a
      000984 78               [ 4] 1610 	ld	a, b
      000985 DD 9E FC         [19] 1611 	sbc	a, -4 (ix)
      000988 23               [ 6] 1612 	inc	hl
      000989 77               [ 7] 1613 	ld	(hl), a
                                   1614 ;src\mytestrom.c:1119: y = q->y;
      00098A 4B               [ 4] 1615 	ld	c, e
      00098B 42               [ 4] 1616 	ld	b, d
      00098C 03               [ 6] 1617 	inc	bc
      00098D 03               [ 6] 1618 	inc	bc
      00098E 0A               [ 7] 1619 	ld	a, (bc)
      00098F 32r69r0B         [13] 1620 	ld	(_y+0), a
                                   1621 ;src\mytestrom.c:1120: x = u;
      000992 3Ar67r0B         [13] 1622 	ld	a, (_u+0)
      000995 32r6Ar0B         [13] 1623 	ld	(_x+0), a
                                   1624 ;src\mytestrom.c:1121: v = q->frame<<4;
      000998 D5               [11] 1625 	push	de
      000999 FD E1            [14] 1626 	pop	iy
      00099B FD 7E 05         [19] 1627 	ld	a, 5 (iy)
      00099E 87               [ 4] 1628 	add	a, a
      00099F 87               [ 4] 1629 	add	a, a
      0009A0 87               [ 4] 1630 	add	a, a
      0009A1 87               [ 4] 1631 	add	a, a
      0009A2 32r6Br0B         [13] 1632 	ld	(_v+0), a
                                   1633 ;src\mytestrom.c:1123: if (q->status && (q->x - MapX >= 0) && (q->x - MapX < WindowW-16)) 
      0009A5 D5               [11] 1634 	push	de
      0009A6 FD E1            [14] 1635 	pop	iy
      0009A8 FD 7E 06         [19] 1636 	ld	a, 6 (iy)
      0009AB B7               [ 4] 1637 	or	a, a
      0009AC CAr1Ar0A         [10] 1638 	jp	Z, 00105$
      0009AF 6B               [ 4] 1639 	ld	l, e
      0009B0 62               [ 4] 1640 	ld	h, d
      0009B1 4E               [ 7] 1641 	ld	c, (hl)
      0009B2 23               [ 6] 1642 	inc	hl
      0009B3 46               [ 7] 1643 	ld	b, (hl)
      0009B4 79               [ 4] 1644 	ld	a, c
      0009B5 DD 96 FD         [19] 1645 	sub	a, -3 (ix)
      0009B8 4F               [ 4] 1646 	ld	c, a
      0009B9 78               [ 4] 1647 	ld	a, b
      0009BA DD 9E FE         [19] 1648 	sbc	a, -2 (ix)
      0009BD 47               [ 4] 1649 	ld	b, a
      0009BE CB 78            [ 8] 1650 	bit	7, b
      0009C0 C2r1Ar0A         [10] 1651 	jp	NZ, 00105$
      0009C3 79               [ 4] 1652 	ld	a, c
      0009C4 D6 E0            [ 7] 1653 	sub	a, #0xe0
      0009C6 78               [ 4] 1654 	ld	a, b
      0009C7 DE 00            [ 7] 1655 	sbc	a, #0x00
      0009C9 D2r1Ar0A         [10] 1656 	jp	NC, 00105$
                                   1657 ;src\mytestrom.c:1155: __endasm;
      0009CC 0E 98            [ 7] 1658 	ld	c,#0x98
                                   1659 	.rept	2
                                   1660 	ld	hl,#_y
                                   1661 	outi
                                   1662 	outi
                                   1663 	outi
                                   1664 	ld	a, (_v)
                                   1665 	out	(#0x98),a
                                   1666 	add	a, #4
                                   1667 	ld	(_v),a
                                   1668 	.endm
      0009CE 21r69r0B         [10]    1 	ld	hl,#_y
      0009D1 ED A3            [16]    2 	outi
      0009D3 ED A3            [16]    3 	outi
      0009D5 ED A3            [16]    4 	outi
      0009D7 3Ar6Br0B         [13]    5 	ld	a, (_v)
      0009DA D3 98            [11]    6 	out	(#0x98),a
      0009DC C6 04            [ 7]    7 	add	a, #4
      0009DE 32r6Br0B         [13]    8 	ld	(_v),a
      0009E1 21r69r0B         [10]    1 	ld	hl,#_y
      0009E4 ED A3            [16]    2 	outi
      0009E6 ED A3            [16]    3 	outi
      0009E8 ED A3            [16]    4 	outi
      0009EA 3Ar6Br0B         [13]    5 	ld	a, (_v)
      0009ED D3 98            [11]    6 	out	(#0x98),a
      0009EF C6 04            [ 7]    7 	add	a, #4
      0009F1 32r6Br0B         [13]    8 	ld	(_v),a
      0009F4 21r69r0B         [10] 1669 	ld	hl,#_y
      0009F7 3E 10            [ 7] 1670 	ld	a,#16
      0009F9 86               [ 7] 1671 	add	a,(hl)
      0009FA 77               [ 7] 1672 	ld	(hl),a
      0009FB ED A3            [16] 1673 	outi
      0009FD ED A3            [16] 1674 	outi
      0009FF ED A3            [16] 1675 	outi
      000A01 3Ar6Br0B         [13] 1676 	ld	a,(_v)
      000A04 D3 98            [11] 1677 	out	(#0x98),a
      000A06 C6 04            [ 7] 1678 	add	a, #4
      000A08 32r6Br0B         [13] 1679 	ld	(_v),a
      000A0B 21r69r0B         [10] 1680 	ld	hl,#_y
      000A0E ED A3            [16] 1681 	outi
      000A10 ED A3            [16] 1682 	outi
      000A12 ED A3            [16] 1683 	outi
      000A14 00               [ 4] 1684 	nop
      000A15 D3 98            [11] 1685 	out	(#0x98),a
      000A17 C3r4Cr0A         [10] 1686 	jp	00106$
      000A1A                       1687 00105$:
                                   1688 ;src\mytestrom.c:1164: __endasm;
      000A1A 3E D9            [ 7] 1689 	ld	a,#217
                                   1690 	.rept	16
                                   1691 	out	(#0x98),a
                                   1692 	nop
                                   1693 	.endm
      000A1C D3 98            [11]    1 	out	(#0x98),a
      000A1E 00               [ 4]    2 	nop
      000A1F D3 98            [11]    1 	out	(#0x98),a
      000A21 00               [ 4]    2 	nop
      000A22 D3 98            [11]    1 	out	(#0x98),a
      000A24 00               [ 4]    2 	nop
      000A25 D3 98            [11]    1 	out	(#0x98),a
      000A27 00               [ 4]    2 	nop
      000A28 D3 98            [11]    1 	out	(#0x98),a
      000A2A 00               [ 4]    2 	nop
      000A2B D3 98            [11]    1 	out	(#0x98),a
      000A2D 00               [ 4]    2 	nop
      000A2E D3 98            [11]    1 	out	(#0x98),a
      000A30 00               [ 4]    2 	nop
      000A31 D3 98            [11]    1 	out	(#0x98),a
      000A33 00               [ 4]    2 	nop
      000A34 D3 98            [11]    1 	out	(#0x98),a
      000A36 00               [ 4]    2 	nop
      000A37 D3 98            [11]    1 	out	(#0x98),a
      000A39 00               [ 4]    2 	nop
      000A3A D3 98            [11]    1 	out	(#0x98),a
      000A3C 00               [ 4]    2 	nop
      000A3D D3 98            [11]    1 	out	(#0x98),a
      000A3F 00               [ 4]    2 	nop
      000A40 D3 98            [11]    1 	out	(#0x98),a
      000A42 00               [ 4]    2 	nop
      000A43 D3 98            [11]    1 	out	(#0x98),a
      000A45 00               [ 4]    2 	nop
      000A46 D3 98            [11]    1 	out	(#0x98),a
      000A48 00               [ 4]    2 	nop
      000A49 D3 98            [11]    1 	out	(#0x98),a
      000A4B 00               [ 4]    2 	nop
      000A4C                       1694 00106$:
                                   1695 ;src\mytestrom.c:1166: if (cursat==0) {
      000A4C 3Ar2Cr00         [13] 1696 	ld	a, (_cursat+0)
      000A4F B7               [ 4] 1697 	or	a, a
      000A50 20 0B            [12] 1698 	jr	NZ, 00110$
                                   1699 ;src\mytestrom.c:1167: q--;
      000A52 7B               [ 4] 1700 	ld	a, e
      000A53 C6 F9            [ 7] 1701 	add	a, #0xf9
      000A55 5F               [ 4] 1702 	ld	e, a
      000A56 7A               [ 4] 1703 	ld	a, d
      000A57 CE FF            [ 7] 1704 	adc	a, #0xff
      000A59 57               [ 4] 1705 	ld	d, a
      000A5A C3r62r0A         [10] 1706 	jp	00114$
      000A5D                       1707 00110$:
                                   1708 ;src\mytestrom.c:1170: q++;
      000A5D 21 07 00         [10] 1709 	ld	hl, #0x0007
      000A60 19               [11] 1710 	add	hl, de
      000A61 EB               [ 4] 1711 	ex	de, hl
      000A62                       1712 00114$:
                                   1713 ;src\mytestrom.c:1115: for (t=0; t<MaxObjNum; t++) 
      000A62 DD 34 FF         [23] 1714 	inc	-1 (ix)
      000A65 DD 7E FF         [19] 1715 	ld	a, -1 (ix)
      000A68 D6 08            [ 7] 1716 	sub	a, #0x08
      000A6A DAr69r09         [10] 1717 	jp	C, 00113$
                                   1718 ;src\mytestrom.c:1176: }
      000A6D DD F9            [10] 1719 	ld	sp, ix
      000A6F DD E1            [14] 1720 	pop	ix
      000A71 C9               [10] 1721 	ret
                                   1722 ;src\mytestrom.c:1235: void UpdateColor(char plane,char frame,char nsat) __sdcccall(1){
                                   1723 ;	---------------------------------
                                   1724 ; Function UpdateColor
                                   1725 ; ---------------------------------
      000A72                       1726 _UpdateColor::
      000A72 DD E5            [15] 1727 	push	ix
      000A74 DD 21 00 00      [14] 1728 	ld	ix,#0
      000A78 DD 39            [15] 1729 	add	ix,sp
      000A7A 5F               [ 4] 1730 	ld	e, a
                                   1731 ;src\mytestrom.c:1238: SetVramW(1,0xF800+plane*16);
      000A7B 16 00            [ 7] 1732 	ld	d, #0x00
      000A7D EB               [ 4] 1733 	ex	de, hl
      000A7E 29               [11] 1734 	add	hl, hl
      000A7F 29               [11] 1735 	add	hl, hl
      000A80 29               [11] 1736 	add	hl, hl
      000A81 29               [11] 1737 	add	hl, hl
      000A82 EB               [ 4] 1738 	ex	de, hl
      000A83 7A               [ 4] 1739 	ld	a, d
      000A84 C6 F8            [ 7] 1740 	add	a, #0xf8
      000A86 57               [ 4] 1741 	ld	d, a
                                   1742 ;src\mytestrom.c:1237: if (nsat)
      000A87 DD 7E 04         [19] 1743 	ld	a, 4 (ix)
      000A8A B7               [ 4] 1744 	or	a, a
      000A8B 28 0A            [12] 1745 	jr	Z, 00102$
                                   1746 ;src\mytestrom.c:1238: SetVramW(1,0xF800+plane*16);
      000A8D E5               [11] 1747 	push	hl
      000A8E 3E 01            [ 7] 1748 	ld	a, #0x01
      000A90 CDr9Ar0B         [17] 1749 	call	_SetVramW
      000A93 E1               [10] 1750 	pop	hl
      000A94 C3r9Dr0A         [10] 1751 	jp	00103$
      000A97                       1752 00102$:
                                   1753 ;src\mytestrom.c:1240: SetVramW(0,0xF800+plane*16);
      000A97 E5               [11] 1754 	push	hl
      000A98 AF               [ 4] 1755 	xor	a, a
      000A99 CDr9Ar0B         [17] 1756 	call	_SetVramW
      000A9C E1               [10] 1757 	pop	hl
      000A9D                       1758 00103$:
                                   1759 ;src\mytestrom.c:1242: VramWrite(((unsigned int) &sprite_colors) + frame*64,64);
      000A9D 01r94r17         [10] 1760 	ld	bc, #_sprite_colors
      000AA0 26 00            [ 7] 1761 	ld	h, #0x00
                                   1762 ;	spillPairReg hl
                                   1763 ;	spillPairReg hl
      000AA2 29               [11] 1764 	add	hl, hl
      000AA3 29               [11] 1765 	add	hl, hl
      000AA4 29               [11] 1766 	add	hl, hl
      000AA5 29               [11] 1767 	add	hl, hl
      000AA6 29               [11] 1768 	add	hl, hl
      000AA7 29               [11] 1769 	add	hl, hl
      000AA8 09               [11] 1770 	add	hl, bc
      000AA9 11 40 00         [10] 1771 	ld	de, #0x0040
      000AAC CDr90r0B         [17] 1772 	call	_VramWrite
                                   1773 ;src\mytestrom.c:1243: }
      000AAF DD E1            [14] 1774 	pop	ix
      000AB1 E1               [10] 1775 	pop	hl
      000AB2 33               [ 6] 1776 	inc	sp
      000AB3 E9               [ 4] 1777 	jp	(hl)
                                   1778 ;src\mytestrom.c:1245: void UpdateFrame(char plane,char frame,char nsat) __sdcccall(1){
                                   1779 ;	---------------------------------
                                   1780 ; Function UpdateFrame
                                   1781 ; ---------------------------------
      000AB4                       1782 _UpdateFrame::
      000AB4 DD E5            [15] 1783 	push	ix
      000AB6 DD 21 00 00      [14] 1784 	ld	ix,#0
      000ABA DD 39            [15] 1785 	add	ix,sp
      000ABC 5F               [ 4] 1786 	ld	e, a
                                   1787 ;src\mytestrom.c:1248: SetVramW(0,0xF000+plane*32);
      000ABD 16 00            [ 7] 1788 	ld	d, #0x00
      000ABF EB               [ 4] 1789 	ex	de, hl
      000AC0 29               [11] 1790 	add	hl, hl
      000AC1 29               [11] 1791 	add	hl, hl
      000AC2 29               [11] 1792 	add	hl, hl
      000AC3 29               [11] 1793 	add	hl, hl
      000AC4 29               [11] 1794 	add	hl, hl
      000AC5 EB               [ 4] 1795 	ex	de, hl
                                   1796 ;src\mytestrom.c:1247: if (nsat)
      000AC6 DD 7E 04         [19] 1797 	ld	a, 4 (ix)
      000AC9 B7               [ 4] 1798 	or	a, a
      000ACA 28 0D            [12] 1799 	jr	Z, 00102$
                                   1800 ;src\mytestrom.c:1248: SetVramW(0,0xF000+plane*32);
      000ACC 7A               [ 4] 1801 	ld	a, d
      000ACD C6 F0            [ 7] 1802 	add	a, #0xf0
      000ACF 57               [ 4] 1803 	ld	d, a
      000AD0 E5               [11] 1804 	push	hl
      000AD1 AF               [ 4] 1805 	xor	a, a
      000AD2 CDr9Ar0B         [17] 1806 	call	_SetVramW
      000AD5 E1               [10] 1807 	pop	hl
      000AD6 C3rE3r0A         [10] 1808 	jp	00103$
      000AD9                       1809 00102$:
                                   1810 ;src\mytestrom.c:1250: SetVramW(0,0xF000+32*32+plane*32);
      000AD9 7A               [ 4] 1811 	ld	a, d
      000ADA C6 F4            [ 7] 1812 	add	a, #0xf4
      000ADC 57               [ 4] 1813 	ld	d, a
      000ADD E5               [11] 1814 	push	hl
      000ADE AF               [ 4] 1815 	xor	a, a
      000ADF CDr9Ar0B         [17] 1816 	call	_SetVramW
      000AE2 E1               [10] 1817 	pop	hl
      000AE3                       1818 00103$:
                                   1819 ;src\mytestrom.c:1252: VramWrite(((unsigned int) &sprite_patterns) + frame*128,128);
      000AE3 01r94r0C         [10] 1820 	ld	bc, #_sprite_patterns
      000AE6 AF               [ 4] 1821 	xor	a, a
      000AE7 CB 1F            [ 8] 1822 	rr	a
      000AE9 65               [ 4] 1823 	ld	h, l
      000AEA CB 1C            [ 8] 1824 	rr	h
      000AEC 1F               [ 4] 1825 	rra
      000AED 6F               [ 4] 1826 	ld	l, a
      000AEE 09               [11] 1827 	add	hl, bc
      000AEF 11 80 00         [10] 1828 	ld	de, #0x0080
      000AF2 CDr90r0B         [17] 1829 	call	_VramWrite
                                   1830 ;src\mytestrom.c:1253: }
      000AF5 DD E1            [14] 1831 	pop	ix
      000AF7 E1               [10] 1832 	pop	hl
      000AF8 33               [ 6] 1833 	inc	sp
      000AF9 E9               [ 4] 1834 	jp	(hl)
                                   1835 ;src\mytestrom.c:1308: void SprtInit(void) __sdcccall(1) 
                                   1836 ;	---------------------------------
                                   1837 ; Function SprtInit
                                   1838 ; ---------------------------------
      000AFA                       1839 _SprtInit::
                                   1840 ;src\mytestrom.c:1312: RG1SAV |= 2;
      000AFA 3A E0 F3         [13] 1841 	ld	a, (_RG1SAV+0)
      000AFD F6 02            [ 7] 1842 	or	a, #0x02
      000AFF 32 E0 F3         [13] 1843 	ld	(_RG1SAV+0), a
                                   1844 ;src\mytestrom.c:1313: myVDPwrite(RG1SAV,1);
      000B02 2E 01            [ 7] 1845 	ld	l, #0x01
                                   1846 ;	spillPairReg hl
                                   1847 ;	spillPairReg hl
      000B04 3A E0 F3         [13] 1848 	ld	a, (_RG1SAV+0)
      000B07 CDrC9r06         [17] 1849 	call	_myVDPwrite
                                   1850 ;src\mytestrom.c:1314: RG8SAV |= 32;
      000B0A 3A E7 FF         [13] 1851 	ld	a, (_RG8SAV+0)
      000B0D F6 20            [ 7] 1852 	or	a, #0x20
      000B0F 32 E7 FF         [13] 1853 	ld	(_RG8SAV+0), a
                                   1854 ;src\mytestrom.c:1315: myVDPwrite(RG8SAV,8);
      000B12 2E 08            [ 7] 1855 	ld	l, #0x08
                                   1856 ;	spillPairReg hl
                                   1857 ;	spillPairReg hl
      000B14 3A E7 FF         [13] 1858 	ld	a, (_RG8SAV+0)
      000B17 CDrC9r06         [17] 1859 	call	_myVDPwrite
                                   1860 ;src\mytestrom.c:1317: SetVramW(0,0xF800);					// sat 0
      000B1A 11 00 F8         [10] 1861 	ld	de, #0xf800
      000B1D AF               [ 4] 1862 	xor	a, a
      000B1E CDr9Ar0B         [17] 1863 	call	_SetVramW
                                   1864 ;src\mytestrom.c:1318: for (t=0; t<MaxObjNum; t++) {
      000B21 0E 00            [ 7] 1865 	ld	c, #0x00
      000B23                       1866 00104$:
                                   1867 ;src\mytestrom.c:1319: VramWrite(((unsigned int) &sprite_colors) + (MaxObjNum-1-t)*64,64);
      000B23 11r94r17         [10] 1868 	ld	de, #_sprite_colors
      000B26 69               [ 4] 1869 	ld	l, c
                                   1870 ;	spillPairReg hl
                                   1871 ;	spillPairReg hl
      000B27 26 00            [ 7] 1872 	ld	h, #0x00
                                   1873 ;	spillPairReg hl
                                   1874 ;	spillPairReg hl
      000B29 3E 07            [ 7] 1875 	ld	a, #0x07
      000B2B 95               [ 4] 1876 	sub	a, l
      000B2C 6F               [ 4] 1877 	ld	l, a
                                   1878 ;	spillPairReg hl
                                   1879 ;	spillPairReg hl
      000B2D 9F               [ 4] 1880 	sbc	a, a
      000B2E 94               [ 4] 1881 	sub	a, h
      000B2F 67               [ 4] 1882 	ld	h, a
      000B30 29               [11] 1883 	add	hl, hl
      000B31 29               [11] 1884 	add	hl, hl
      000B32 29               [11] 1885 	add	hl, hl
      000B33 29               [11] 1886 	add	hl, hl
      000B34 29               [11] 1887 	add	hl, hl
      000B35 29               [11] 1888 	add	hl, hl
      000B36 19               [11] 1889 	add	hl, de
      000B37 C5               [11] 1890 	push	bc
      000B38 11 40 00         [10] 1891 	ld	de, #0x0040
      000B3B CDr90r0B         [17] 1892 	call	_VramWrite
      000B3E C1               [10] 1893 	pop	bc
                                   1894 ;src\mytestrom.c:1318: for (t=0; t<MaxObjNum; t++) {
      000B3F 0C               [ 4] 1895 	inc	c
      000B40 79               [ 4] 1896 	ld	a, c
      000B41 D6 08            [ 7] 1897 	sub	a, #0x08
      000B43 38 DE            [12] 1898 	jr	C, 00104$
                                   1899 ;src\mytestrom.c:1322: SetVramW(1,0xF800);					// sat 1
      000B45 11 00 F8         [10] 1900 	ld	de, #0xf800
      000B48 3E 01            [ 7] 1901 	ld	a, #0x01
      000B4A CDr9Ar0B         [17] 1902 	call	_SetVramW
                                   1903 ;src\mytestrom.c:1323: for (t=0; t<MaxObjNum; t++) {
      000B4D 0E 00            [ 7] 1904 	ld	c, #0x00
      000B4F                       1905 00106$:
                                   1906 ;src\mytestrom.c:1324: VramWrite(((unsigned int) &sprite_colors) + t*64,64);
      000B4F 11r94r17         [10] 1907 	ld	de, #_sprite_colors
      000B52 69               [ 4] 1908 	ld	l, c
                                   1909 ;	spillPairReg hl
                                   1910 ;	spillPairReg hl
      000B53 26 00            [ 7] 1911 	ld	h, #0x00
                                   1912 ;	spillPairReg hl
                                   1913 ;	spillPairReg hl
      000B55 29               [11] 1914 	add	hl, hl
      000B56 29               [11] 1915 	add	hl, hl
      000B57 29               [11] 1916 	add	hl, hl
      000B58 29               [11] 1917 	add	hl, hl
      000B59 29               [11] 1918 	add	hl, hl
      000B5A 29               [11] 1919 	add	hl, hl
      000B5B 19               [11] 1920 	add	hl, de
      000B5C C5               [11] 1921 	push	bc
      000B5D 11 40 00         [10] 1922 	ld	de, #0x0040
      000B60 CDr90r0B         [17] 1923 	call	_VramWrite
      000B63 C1               [10] 1924 	pop	bc
                                   1925 ;src\mytestrom.c:1323: for (t=0; t<MaxObjNum; t++) {
      000B64 0C               [ 4] 1926 	inc	c
      000B65 79               [ 4] 1927 	ld	a, c
      000B66 D6 08            [ 7] 1928 	sub	a, #0x08
      000B68 38 E5            [12] 1929 	jr	C, 00106$
                                   1930 ;src\mytestrom.c:1327: SetVramW(0,0xF000);					// sprite patterns	
      000B6A 11 00 F0         [10] 1931 	ld	de, #0xf000
      000B6D AF               [ 4] 1932 	xor	a, a
      000B6E CDr9Ar0B         [17] 1933 	call	_SetVramW
                                   1934 ;src\mytestrom.c:1328: for (t=0; t<MaxObjNum; t++) {	
      000B71 0E 00            [ 7] 1935 	ld	c, #0x00
      000B73                       1936 00108$:
                                   1937 ;src\mytestrom.c:1329: VramWrite(((unsigned int) &sprite_patterns) + t*128,128);
      000B73 11r94r0C         [10] 1938 	ld	de, #_sprite_patterns
      000B76 69               [ 4] 1939 	ld	l, c
                                   1940 ;	spillPairReg hl
                                   1941 ;	spillPairReg hl
                                   1942 ;	spillPairReg hl
                                   1943 ;	spillPairReg hl
      000B77 AF               [ 4] 1944 	xor	a, a
      000B78 67               [ 4] 1945 	ld	h, a
      000B79 CB 1C            [ 8] 1946 	rr	h
      000B7B 65               [ 4] 1947 	ld	h, l
      000B7C CB 1C            [ 8] 1948 	rr	h
      000B7E 1F               [ 4] 1949 	rra
      000B7F 6F               [ 4] 1950 	ld	l, a
                                   1951 ;	spillPairReg hl
                                   1952 ;	spillPairReg hl
      000B80 19               [11] 1953 	add	hl, de
      000B81 C5               [11] 1954 	push	bc
      000B82 11 80 00         [10] 1955 	ld	de, #0x0080
      000B85 CDr90r0B         [17] 1956 	call	_VramWrite
      000B88 C1               [10] 1957 	pop	bc
                                   1958 ;src\mytestrom.c:1328: for (t=0; t<MaxObjNum; t++) {	
      000B89 0C               [ 4] 1959 	inc	c
      000B8A 79               [ 4] 1960 	ld	a, c
      000B8B D6 08            [ 7] 1961 	sub	a, #0x08
      000B8D 38 E4            [12] 1962 	jr	C, 00108$
                                   1963 ;src\mytestrom.c:1331: }
      000B8F C9               [10] 1964 	ret
                                   1965 ;src\mytestrom.c:1333: void VramWrite(unsigned int addr, unsigned int len) __sdcccall(1) __naked
                                   1966 ;	---------------------------------
                                   1967 ; Function VramWrite
                                   1968 ; ---------------------------------
      000B90                       1969 _VramWrite::
                                   1970 ;src\mytestrom.c:1346: __endasm;		
      000B90 0E 98            [ 7] 1971 	ld	c,#0x98
      000B92                       1972 	095$:
      000B92 ED A3            [16] 1973 	outi
      000B94 1B               [ 6] 1974 	dec	de
      000B95 7A               [ 4] 1975 	ld	a,d
      000B96 B3               [ 4] 1976 	or	a,e
      000B97 20 F9            [12] 1977 	jr	nz,095$
      000B99 C9               [10] 1978 	ret
                                   1979 ;src\mytestrom.c:1347: }
                                   1980 ;src\mytestrom.c:1349: void SetVramW(char page, unsigned int addr) __sdcccall(1) __naked {
                                   1981 ;	---------------------------------
                                   1982 ; Function SetVramW
                                   1983 ; ---------------------------------
      000B9A                       1984 _SetVramW::
                                   1985 ;src\mytestrom.c:1374: __endasm;		
                                   1986 ;	Set VDP address counter to write from address ADE (17-bit)
                                   1987 ;	Enables the interrupts
      000B9A EB               [ 4] 1988 	ex	de,hl
      000B9B CB 04            [ 8] 1989 	rlc	h
      000B9D 17               [ 4] 1990 	rla
      000B9E CB 04            [ 8] 1991 	rlc	h
      000BA0 17               [ 4] 1992 	rla
      000BA1 CB 3C            [ 8] 1993 	srl	h
      000BA3 CB 3C            [ 8] 1994 	srl	h
      000BA5 F3               [ 4] 1995 	di
      000BA6 D3 99            [11] 1996 	out	(#0x99),a
      000BA8 3E 8E            [ 7] 1997 	ld	a,#0x8E
      000BAA D3 99            [11] 1998 	out	(#0x99),a
      000BAC 7D               [ 4] 1999 	ld	a,l
      000BAD D3 99            [11] 2000 	out	(#0x99),a
      000BAF 7C               [ 4] 2001 	ld	a,h
      000BB0 F6 40            [ 7] 2002 	or	a,#0x40
      000BB2 FB               [ 4] 2003 	ei
      000BB3 D3 99            [11] 2004 	out	(#0x99),a
      000BB5 EB               [ 4] 2005 	ex	de,hl
      000BB6 C9               [10] 2006 	ret
                                   2007 ;src\mytestrom.c:1375: }
                                   2008 ;src\mytestrom.c:1378: void chgmod(char c) __sdcccall(1) __naked {
                                   2009 ;	---------------------------------
                                   2010 ; Function chgmod
                                   2011 ; ---------------------------------
      000BB7                       2012 _chgmod::
                                   2013 ;src\mytestrom.c:1382: __endasm;
      000BB7 C3 5F 00         [10] 2014 	jp	0x005f
                                   2015 ;src\mytestrom.c:1383: }
                                   2016 ;src\mytestrom.c:1385: void putch(char c) __sdcccall(1) __naked {
                                   2017 ;	---------------------------------
                                   2018 ; Function putch
                                   2019 ; ---------------------------------
      000BBA                       2020 _putch::
                                   2021 ;src\mytestrom.c:1389: __endasm;
      000BBA C3 A2 00         [10] 2022 	jp	0x00a2
                                   2023 ;src\mytestrom.c:1390: }
                                   2024 ;src\mytestrom.c:1393: void	myHMMV( unsigned int DX, unsigned int DY, unsigned int NX, unsigned int NY, char COL) __sdcccall(0) __naked
                                   2025 ;	---------------------------------
                                   2026 ; Function myHMMV
                                   2027 ; ---------------------------------
      000BBD                       2028 _myHMMV::
                                   2029 ;src\mytestrom.c:1456: __endasm;
                                   2030 ;****************************************************************
                                   2031 ;	HMMV painting the rectangle in high speed Eric
                                   2032 ;	void HMMV( unsigned int XS, unsigned int YS, unsigned int DX, unsigned int DY, char COL);
                                   2033 ;
                                   2034 ;****************************************************************
      000BBD DD E5            [15] 2035 	push	ix
      000BBF DD 21 00 00      [14] 2036 	ld	ix,#0
      000BC3 DD 39            [15] 2037 	add	ix,sp
      000BC5 F3               [ 4] 2038 	di
      000BC6 CDr7Dr0C         [17] 2039 	call	_myVDPready
      000BC9 3E 24            [ 7] 2040 	ld	a,#36
      000BCB D3 99            [11] 2041 	out	(#0x99),a
      000BCD 3E 91            [ 7] 2042 	ld	a,#128+#17
      000BCF D3 99            [11] 2043 	out	(#0x99),a ;R#17 := 36
      000BD1 0E 9B            [ 7] 2044 	ld	c,#0x9b
      000BD3 DD 7E 04         [19] 2045 	ld	a,4(ix) ;
      000BD6 ED 79            [12] 2046 	out	(c),a ; R36 DX low byte
      000BD8 DD 7E 05         [19] 2047 	ld	a,5(ix) ;
      000BDB ED 79            [12] 2048 	out	(c),a ; R37 DX high byte
      000BDD DD 7E 06         [19] 2049 	ld	a,6(ix) ;
      000BE0 ED 79            [12] 2050 	out	(c),a ; R38 DY low byte
      000BE2 DD 7E 07         [19] 2051 	ld	a,7(ix) ;
      000BE5 ED 79            [12] 2052 	out	(c),a ; R39 DY high byte
      000BE7 DD 7E 08         [19] 2053 	ld	a,8(ix) ;
      000BEA ED 79            [12] 2054 	out	(c),a ; R40 NX low byte
      000BEC DD 7E 09         [19] 2055 	ld	a,9(ix) ;
      000BEF ED 79            [12] 2056 	out	(c),a ; R41 NX high byte
      000BF1 DD 7E 0A         [19] 2057 	ld	a,10(ix) ;
      000BF4 ED 79            [12] 2058 	out	(c),a ; R42 NY low byte
      000BF6 DD 7E 0B         [19] 2059 	ld	a,11(ix) ;
      000BF9 ED 79            [12] 2060 	out	(c),a ; R43 NY high byte
      000BFB DD 7E 0C         [19] 2061 	ld	a,12(ix) ;
      000BFE ED 79            [12] 2062 	out	(c),a ; R44 COL low byte
      000C00 AF               [ 4] 2063 	xor	a ;
      000C01 ED 79            [12] 2064 	out	(c),a ; R45 DIX and DIY ! DX and DY express in incremental direction ! internal VRAM
      000C03 F6 C0            [ 7] 2065 	or	#0b11000000 ;HMMV command
      000C05 ED 79            [12] 2066 	out	(c),a ;do it
      000C07 FB               [ 4] 2067 	ei
      000C08 DD E1            [14] 2068 	pop	ix
      000C0A C9               [10] 2069 	ret
                                   2070 ;src\mytestrom.c:1457: }
                                   2071 ;src\mytestrom.c:1460: void SetDisplayPage(char n) __z88dk_fastcall
                                   2072 ;	---------------------------------
                                   2073 ; Function SetDisplayPage
                                   2074 ; ---------------------------------
      000C0B                       2075 _SetDisplayPage::
                                   2076 ;src\mytestrom.c:1487: __endasm;
                                   2077 ;----------------------------
                                   2078 ;	void SetDisplayPage(char n)
                                   2079 ;	MSX2 Show the specified VRAM Page at Screen
                                   2080 ;
      000C0B 7D               [ 4] 2081 	ld	a,l
      000C0C 17               [ 4] 2082 	rla
      000C0D 17               [ 4] 2083 	rla
      000C0E 17               [ 4] 2084 	rla
      000C0F 17               [ 4] 2085 	rla
      000C10 17               [ 4] 2086 	rla
      000C11 E6 7F            [ 7] 2087 	and	#0x7F
      000C13 F6 1F            [ 7] 2088 	or	#0x1F
      000C15 47               [ 4] 2089 	ld	b,a
      000C16 3E 02            [ 7] 2090 	ld	a,#2
      000C18 F6 80            [ 7] 2091 	or	#0x80
      000C1A 0E 99            [ 7] 2092 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C1C F3               [ 4] 2093 	di
      000C1D ED 41            [12] 2094 	out	(c), b ;; out data
      000C1F ED 79            [12] 2095 	out	(c), a ;; out VDP register number
      000C21 FB               [ 4] 2096 	ei
      000C22 32 F5 FA         [13] 2097 	ld	(#0xFAF5),a ;; DPPAGE
                                   2098 ;src\mytestrom.c:1488: }
      000C25 C9               [10] 2099 	ret
                                   2100 ;src\mytestrom.c:1493: void VDPlineSwitch(void) 
                                   2101 ;	---------------------------------
                                   2102 ; Function VDPlineSwitch
                                   2103 ; ---------------------------------
      000C26                       2104 _VDPlineSwitch::
                                   2105 ;src\mytestrom.c:1504: __endasm;
      000C26 3A E8 FF         [13] 2106 	ld	a,(#_RG9SAV)
      000C29 EE 80            [ 7] 2107 	xor	a,#0b10000000
      000C2B 32 E8 FF         [13] 2108 	ld	(#_RG9SAV),a
      000C2E 47               [ 4] 2109 	ld	b,a
      000C2F 3E 89            [ 7] 2110 	ld	a,#0x89
      000C31 0E 99            [ 7] 2111 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C33 ED 41            [12] 2112 	out	(c), b ;; out data
      000C35 ED 79            [12] 2113 	out	(c), a ;; out VDP register number
                                   2114 ;src\mytestrom.c:1505: }
      000C37 C9               [10] 2115 	ret
                                   2116 ;src\mytestrom.c:1507: void VDP60Hz(void)
                                   2117 ;	---------------------------------
                                   2118 ; Function VDP60Hz
                                   2119 ; ---------------------------------
      000C38                       2120 _VDP60Hz::
                                   2121 ;src\mytestrom.c:1518: __endasm;
      000C38 3A E8 FF         [13] 2122 	ld	a,(#_RG9SAV)
      000C3B E6 FD            [ 7] 2123 	and	#0b11111101
      000C3D 32 E8 FF         [13] 2124 	ld	(#_RG9SAV),a
      000C40 47               [ 4] 2125 	ld	b,a
      000C41 3E 89            [ 7] 2126 	ld	a,#0x89
      000C43 0E 99            [ 7] 2127 	ld	c, #0x99 ;; VDP port #1 (unsupport "MSX1 adapter")
      000C45 ED 41            [12] 2128 	out	(c), b ;; out data
      000C47 ED 79            [12] 2129 	out	(c), a ;; out VDP register number
                                   2130 ;src\mytestrom.c:1519: }
      000C49 C9               [10] 2131 	ret
                                   2132 ;src\mytestrom.c:1521: void PrintChar(char c) 
                                   2133 ;	---------------------------------
                                   2134 ; Function PrintChar
                                   2135 ; ---------------------------------
      000C4A                       2136 _PrintChar::
                                   2137 ;src\mytestrom.c:1532: __endasm;
      000C4A DD E5            [15] 2138 	push	ix
      000C4C DD 21 00 00      [14] 2139 	ld	ix,#0
      000C50 DD 39            [15] 2140 	add	ix,sp
      000C52 DD 7E 04         [19] 2141 	ld	a,4(ix)
      000C55 CD A2 00         [17] 2142 	call	#0xA2 ; Bios CHPUT
      000C58 FB               [ 4] 2143 	ei
      000C59 DD E1            [14] 2144 	pop	ix
                                   2145 ;src\mytestrom.c:1533: }
      000C5B C9               [10] 2146 	ret
                                   2147 ;src\mytestrom.c:1562: void Print(char* text)
                                   2148 ;	---------------------------------
                                   2149 ; Function Print
                                   2150 ; ---------------------------------
      000C5C                       2151 _Print::
                                   2152 ;src\mytestrom.c:1566: while(*(text)) 
      000C5C                       2153 00104$:
      000C5C 7E               [ 7] 2154 	ld	a, (hl)
      000C5D B7               [ 4] 2155 	or	a, a
      000C5E C8               [11] 2156 	ret	Z
                                   2157 ;src\mytestrom.c:1568: character=*(text++);
      000C5F 23               [ 6] 2158 	inc	hl
                                   2159 ;src\mytestrom.c:1569: if (character=='\n')
      000C60 4F               [ 4] 2160 	ld	c, a
      000C61 D6 0A            [ 7] 2161 	sub	a, #0x0a
      000C63 20 0F            [12] 2162 	jr	NZ, 00102$
                                   2163 ;src\mytestrom.c:1571: PrintChar(10); //LF (Line Feed)
      000C65 E5               [11] 2164 	push	hl
      000C66 3E 0A            [ 7] 2165 	ld	a, #0x0a
      000C68 CDr4Ar0C         [17] 2166 	call	_PrintChar
      000C6B 3E 0D            [ 7] 2167 	ld	a, #0x0d
      000C6D CDr4Ar0C         [17] 2168 	call	_PrintChar
      000C70 E1               [10] 2169 	pop	hl
      000C71 C3r5Cr0C         [10] 2170 	jp	00104$
      000C74                       2171 00102$:
                                   2172 ;src\mytestrom.c:1574: PrintChar(character);
      000C74 E5               [11] 2173 	push	hl
      000C75 79               [ 4] 2174 	ld	a, c
      000C76 CDr4Ar0C         [17] 2175 	call	_PrintChar
      000C79 E1               [10] 2176 	pop	hl
                                   2177 ;src\mytestrom.c:1577: }
      000C7A C3r5Cr0C         [10] 2178 	jp	00104$
                                   2179 ;src\mytestrom.c:1580: void     myVDPready(void) __naked															// Check if MSX2 VDP is ready (Internal Use)
                                   2180 ;	---------------------------------
                                   2181 ; Function myVDPready
                                   2182 ; ---------------------------------
      000C7D                       2183 _myVDPready::
                                   2184 ;src\mytestrom.c:1596: __endasm; 
      000C7D                       2185 	    checkIfReady:
      000C7D 3E 02            [ 7] 2186 	ld	a,#2
      000C7F D3 99            [11] 2187 	out	(#0x99),a ; wait till previous VDP execution is over (CE)
      000C81 3E 8F            [ 7] 2188 	ld	a,#128+#15
      000C83 D3 99            [11] 2189 	out	(#0x99),a
      000C85 DB 99            [11] 2190 	in	a,(#0x99)
      000C87 1F               [ 4] 2191 	rra	; check CE (bit#0)
      000C88 3E 00            [ 7] 2192 	ld	a, #0
      000C8A D3 99            [11] 2193 	out	(#0x99),a
      000C8C 3E 8F            [ 7] 2194 	ld	a,#128+#15
      000C8E D3 99            [11] 2195 	out	(#0x99),a
      000C90 DAr7Dr0C         [10] 2196 	jp	c, checkIfReady
      000C93 C9               [10] 2197 	ret
                                   2198 ;src\mytestrom.c:1597: }
                                   2199 ;src\mytestrom.c:1600: void sprite_patterns(void) __naked
                                   2200 ;	---------------------------------
                                   2201 ; Function sprite_patterns
                                   2202 ; ---------------------------------
      000C94                       2203 _sprite_patterns::
                                   2204 ;src\mytestrom.c:1604: __endasm;	
      000C94 00 00 00 00 00 0B 1F  2205 	.incbin	"data\knight_frm.bin"
             3E 6E F7 FB FF FF F9
             FE BF 00 00 00 00 00
             B8 1C BE 1B 3F FF BF
             BF AC 1C 3E 00 00 00
             01 03 00 08 09 35 7A
             7D 3B 07 27 61 40 00
             00 00 F8 F0 40 E8 48
             E6 D6 36 F6 F0 F0 E8
             C0 FF 7F 3F 00 DF EF
             EF FF CF 07 03 00 00
             00 00 00 FF DF BF 00
             F0 F0 78 08 F8 FC FC
             FC 64 5C 7E 00 38 3C
             00 FF 38 58 5C 4C 04
             00 00 00 00 00 00 00
             0E 2E 40 F0 00 00 80
             F0 00 78 78 78 38 20
             1C 7E
                                   2206 ;src\mytestrom.c:1605: }
                                   2207 ;src\mytestrom.c:1607: void sprite_colors(void) __naked
                                   2208 ;	---------------------------------
                                   2209 ; Function sprite_colors
                                   2210 ; ---------------------------------
      001794                       2211 _sprite_colors::
                                   2212 ;src\mytestrom.c:1611: __endasm;	
      001794 00 00 00 00 00 01 01  2213 	.incbin	"data\knight_clr.bin"
             01 01 01 01 01 01 01
             01 01 01 01 01 01 01
             08 48 48 48 48 48 48
             48 48 48 08 01 01 01
             00 01 01 01 01 01 01
             01 01 01 01 01 00 48
             48 08 01 48 48 48 48
             48 48 48 48 48 08 48
             01 00 00 00 00 01 01
             01 01 01 01 01 01 01
             01 01 01 01 01 01 01
             08 48 48 48 48 48 48
             48 48 48 08 48 01 01
             00 00 00 00 01 01 01
             01 01 01 01 01 01 00
             48 08 01 01 01 01 08
             08 48 48 48 48 48 08
             48 01
                                   2214 ;src\mytestrom.c:1612: }
                                   2215 ;src\mytestrom.c:1614: void DataLevelMap(void) __naked {
                                   2216 ;	---------------------------------
                                   2217 ; Function DataLevelMap
                                   2218 ; ---------------------------------
      001D14                       2219 _DataLevelMap::
                                   2220 ;src\mytestrom.c:1617: __endasm;
      001D14 64 0B 44 73 68 6B 6B  2221 	.incbin	"data\datamap.bin"
             6B 6B 6B 6B 6B 6B 2F
             5D 4D 51 51 51 51 51
             51 51 51 07 17 1D 27
             2E 41 4B 76 62 73 6B
             07 16 20 22 25 4B 41
             71 3B 5D 51 0A 0E 1B
             12 1C 3E 5C 65 32 31
             4A 06 0B 23 1A 18 37
             74 69 34 40 4E 07 17
             1D 27 2E 30 47 6E 29
             45 53 07 16 20 22 25
             4B 42 6D 24 35 3D 0A
             0E 1B 12 1C 41 3F 65
             32 31 4A 06 0B 23 1A
             18 4B 4B 69 34 40 4E
             0F 17 1D 27 2E 41 41
             6E 29 45 53 26 16 20
             22 25
                                   2222 ;src\mytestrom.c:1618: }
                                   2223 	.area _BANK0
                                   2224 	.area _INITIALIZER
                                   2225 	.area _CABS (ABS)
